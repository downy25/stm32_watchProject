
digitclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002638  08009c18  08009c18  0000ac18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c250  0800c250  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c250  0800c250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c258  0800c258  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c25c  0800c25c  0000d25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c260  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  200001e8  0800c448  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  0800c448  0000eac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001386a  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce0  00000000  00000000  00021a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00024768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e67  00000000  00000000  000259d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c15  00000000  00000000  00026837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e8f  00000000  00000000  0004044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5f9  00000000  00000000  000572db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f68d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  000f6918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fcaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c00 	.word	0x08009c00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009c00 	.word	0x08009c00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <Systick>:
uint8_t update = 0;
uint32_t time = 0;
uint16_t delay = 0;

//1ms주기로 호출됨(시간측정 콜백함수)
void Systick(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	time++;
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <Systick+0x18>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a03      	ldr	r2, [pc, #12]	@ (8000f00 <Systick+0x18>)
 8000ef4:	6013      	str	r3, [r2, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000208 	.word	0x20000208

08000f04 <SystickCallbackDelay>:

// 1ms의 주기로 호출됨
void SystickCallbackDelay(){
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	if(delay > 0) delay--;
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <SystickCallbackDelay+0x24>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <SystickCallbackDelay+0x18>
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <SystickCallbackDelay+0x24>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <SystickCallbackDelay+0x24>)
 8000f1a:	801a      	strh	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000020c 	.word	0x2000020c

08000f2c <SystickCallbackClock>:

//1ms주기로 호출됨
void SystickCallbackClock(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	static ksec=0;
	ksec++;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <SystickCallbackClock+0x7c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <SystickCallbackClock+0x7c>)
 8000f38:	6013      	str	r3, [r2, #0]
	if(ksec == 1000){
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <SystickCallbackClock+0x7c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f42:	d12c      	bne.n	8000f9e <SystickCallbackClock+0x72>
		ksec = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <SystickCallbackClock+0x7c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
		second++;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <SystickCallbackClock+0x80>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <SystickCallbackClock+0x80>)
 8000f54:	701a      	strb	r2, [r3, #0]
		update = 1;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <SystickCallbackClock+0x84>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
		if (second == 60) {
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <SystickCallbackClock+0x80>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f62:	d11c      	bne.n	8000f9e <SystickCallbackClock+0x72>
			second = 0;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <SystickCallbackClock+0x80>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			minute++;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <SystickCallbackClock+0x88>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <SystickCallbackClock+0x88>)
 8000f74:	701a      	strb	r2, [r3, #0]
			if(minute == 60){
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <SystickCallbackClock+0x88>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f7c:	d10f      	bne.n	8000f9e <SystickCallbackClock+0x72>
				minute = 0;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <SystickCallbackClock+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
				hour++;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <SystickCallbackClock+0x8c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <SystickCallbackClock+0x8c>)
 8000f8e:	701a      	strb	r2, [r3, #0]
				if(hour == 24){
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <SystickCallbackClock+0x8c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b18      	cmp	r3, #24
 8000f96:	d102      	bne.n	8000f9e <SystickCallbackClock+0x72>
					hour = 0;
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <SystickCallbackClock+0x8c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000210 	.word	0x20000210
 8000fac:	20000205 	.word	0x20000205
 8000fb0:	20000206 	.word	0x20000206
 8000fb4:	20000204 	.word	0x20000204
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <AnalogClock>:

void AnalogClock(){
 8000fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc4:	b088      	sub	sp, #32
 8000fc6:	af02      	add	r7, sp, #8
	//for analogClock
	const uint8_t centerX = 63;
 8000fc8:	233f      	movs	r3, #63	@ 0x3f
 8000fca:	75fb      	strb	r3, [r7, #23]
	const uint8_t centerY = 31;
 8000fcc:	231f      	movs	r3, #31
 8000fce:	75bb      	strb	r3, [r7, #22]
	const uint8_t lengthS = 29;
 8000fd0:	231d      	movs	r3, #29
 8000fd2:	757b      	strb	r3, [r7, #21]
	const uint8_t lengthM = 25;
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	753b      	strb	r3, [r7, #20]
	const uint8_t lengthH = 18;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	74fb      	strb	r3, [r7, #19]
	ssd1306_DrawCircle(63, 31, 31, 1);
 8000fdc:	2301      	movs	r3, #1
 8000fde:	221f      	movs	r2, #31
 8000fe0:	211f      	movs	r1, #31
 8000fe2:	203f      	movs	r0, #63	@ 0x3f
 8000fe4:	f001 f8f8 	bl	80021d8 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8000fe8:	f000 ff48 	bl	8001e7c <ssd1306_UpdateScreen>
	static uint8_t oldXs, oldYs, oldXm, oldYm, oldXh, oldYh;

	// 각도계산 (도 단위)
	uint16_t angleS = -90 + (360 / 60) * second;
 8000fec:	4bda      	ldr	r3, [pc, #872]	@ (8001358 <AnalogClock+0x398>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3b5a      	subs	r3, #90	@ 0x5a
 8000ffc:	823b      	strh	r3, [r7, #16]
	uint16_t angleM = -90 + (360 / 60) * minute;
 8000ffe:	4bd7      	ldr	r3, [pc, #860]	@ (800135c <AnalogClock+0x39c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	0052      	lsls	r2, r2, #1
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b29b      	uxth	r3, r3
 800100c:	3b5a      	subs	r3, #90	@ 0x5a
 800100e:	81fb      	strh	r3, [r7, #14]
	uint16_t angleH = -90 + (360 / 12) * hour;
 8001010:	4bd3      	ldr	r3, [pc, #844]	@ (8001360 <AnalogClock+0x3a0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	3b5a      	subs	r3, #90	@ 0x5a
 8001020:	81bb      	strh	r3, [r7, #12]

	// 바늘 끝위치 계산
	uint8_t Xs = centerX + cos(angleS * 3.14 / 180) * lengthS;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa85 	bl	8000534 <__aeabi_i2d>
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	8a3b      	ldrh	r3, [r7, #16]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa7f 	bl	8000534 <__aeabi_i2d>
 8001036:	a3c6      	add	r3, pc, #792	@ (adr r3, 8001350 <AnalogClock+0x390>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fae4 	bl	8000608 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4bc5      	ldr	r3, [pc, #788]	@ (8001364 <AnalogClock+0x3a4>)
 800104e:	f7ff fc05 	bl	800085c <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	ec43 2b17 	vmov	d7, r2, r3
 800105a:	eeb0 0a47 	vmov.f32	s0, s14
 800105e:	eef0 0a67 	vmov.f32	s1, s15
 8001062:	f007 fd49 	bl	8008af8 <cos>
 8001066:	ec59 8b10 	vmov	r8, r9, d0
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa61 	bl	8000534 <__aeabi_i2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4640      	mov	r0, r8
 8001078:	4649      	mov	r1, r9
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4620      	mov	r0, r4
 8001084:	4629      	mov	r1, r5
 8001086:	f7ff f909 	bl	800029c <__adddf3>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fd91 	bl	8000bb8 <__aeabi_d2uiz>
 8001096:	4603      	mov	r3, r0
 8001098:	72fb      	strb	r3, [r7, #11]
	uint8_t Ys = centerY + sin(angleS * 3.14 / 180) * lengthS;
 800109a:	7dbb      	ldrb	r3, [r7, #22]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa49 	bl	8000534 <__aeabi_i2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	8a3b      	ldrh	r3, [r7, #16]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa43 	bl	8000534 <__aeabi_i2d>
 80010ae:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001350 <AnalogClock+0x390>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa8 	bl	8000608 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4ba7      	ldr	r3, [pc, #668]	@ (8001364 <AnalogClock+0x3a4>)
 80010c6:	f7ff fbc9 	bl	800085c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	ec43 2b17 	vmov	d7, r2, r3
 80010d2:	eeb0 0a47 	vmov.f32	s0, s14
 80010d6:	eef0 0a67 	vmov.f32	s1, s15
 80010da:	f007 fd61 	bl	8008ba0 <sin>
 80010de:	ec59 8b10 	vmov	r8, r9, d0
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa25 	bl	8000534 <__aeabi_i2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4640      	mov	r0, r8
 80010f0:	4649      	mov	r1, r9
 80010f2:	f7ff fa89 	bl	8000608 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff f8cd 	bl	800029c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd55 	bl	8000bb8 <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	72bb      	strb	r3, [r7, #10]
	uint8_t Xm = centerX + cos(angleM * 3.14 / 180) * lengthM;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa0d 	bl	8000534 <__aeabi_i2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa07 	bl	8000534 <__aeabi_i2d>
 8001126:	a38a      	add	r3, pc, #552	@ (adr r3, 8001350 <AnalogClock+0x390>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fa6c 	bl	8000608 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b89      	ldr	r3, [pc, #548]	@ (8001364 <AnalogClock+0x3a4>)
 800113e:	f7ff fb8d 	bl	800085c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	ec43 2b17 	vmov	d7, r2, r3
 800114a:	eeb0 0a47 	vmov.f32	s0, s14
 800114e:	eef0 0a67 	vmov.f32	s1, s15
 8001152:	f007 fcd1 	bl	8008af8 <cos>
 8001156:	ec59 8b10 	vmov	r8, r9, d0
 800115a:	7d3b      	ldrb	r3, [r7, #20]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9e9 	bl	8000534 <__aeabi_i2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4640      	mov	r0, r8
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff fa4d 	bl	8000608 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff f891 	bl	800029c <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fd19 	bl	8000bb8 <__aeabi_d2uiz>
 8001186:	4603      	mov	r3, r0
 8001188:	727b      	strb	r3, [r7, #9]
	uint8_t Ym = centerY + sin(angleM * 3.14 / 180) * lengthM;
 800118a:	7dbb      	ldrb	r3, [r7, #22]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9d1 	bl	8000534 <__aeabi_i2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9cb 	bl	8000534 <__aeabi_i2d>
 800119e:	a36c      	add	r3, pc, #432	@ (adr r3, 8001350 <AnalogClock+0x390>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa30 	bl	8000608 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001364 <AnalogClock+0x3a4>)
 80011b6:	f7ff fb51 	bl	800085c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	ec43 2b17 	vmov	d7, r2, r3
 80011c2:	eeb0 0a47 	vmov.f32	s0, s14
 80011c6:	eef0 0a67 	vmov.f32	s1, s15
 80011ca:	f007 fce9 	bl	8008ba0 <sin>
 80011ce:	ec59 8b10 	vmov	r8, r9, d0
 80011d2:	7d3b      	ldrb	r3, [r7, #20]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9ad 	bl	8000534 <__aeabi_i2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4640      	mov	r0, r8
 80011e0:	4649      	mov	r1, r9
 80011e2:	f7ff fa11 	bl	8000608 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff f855 	bl	800029c <__adddf3>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	723b      	strb	r3, [r7, #8]
	uint8_t Xh = centerX + cos(angleH * 3.14 / 180) * lengthH;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f995 	bl	8000534 <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	89bb      	ldrh	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f98f 	bl	8000534 <__aeabi_i2d>
 8001216:	a34e      	add	r3, pc, #312	@ (adr r3, 8001350 <AnalogClock+0x390>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f9f4 	bl	8000608 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b4d      	ldr	r3, [pc, #308]	@ (8001364 <AnalogClock+0x3a4>)
 800122e:	f7ff fb15 	bl	800085c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b17 	vmov	d7, r2, r3
 800123a:	eeb0 0a47 	vmov.f32	s0, s14
 800123e:	eef0 0a67 	vmov.f32	s1, s15
 8001242:	f007 fc59 	bl	8008af8 <cos>
 8001246:	ec59 8b10 	vmov	r8, r9, d0
 800124a:	7cfb      	ldrb	r3, [r7, #19]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f971 	bl	8000534 <__aeabi_i2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4640      	mov	r0, r8
 8001258:	4649      	mov	r1, r9
 800125a:	f7ff f9d5 	bl	8000608 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f819 	bl	800029c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fca1 	bl	8000bb8 <__aeabi_d2uiz>
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	uint8_t Yh = centerY + sin(angleH * 3.14 / 180) * lengthH;
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f959 	bl	8000534 <__aeabi_i2d>
 8001282:	4604      	mov	r4, r0
 8001284:	460d      	mov	r5, r1
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f953 	bl	8000534 <__aeabi_i2d>
 800128e:	a330      	add	r3, pc, #192	@ (adr r3, 8001350 <AnalogClock+0x390>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9b8 	bl	8000608 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <AnalogClock+0x3a4>)
 80012a6:	f7ff fad9 	bl	800085c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	ec43 2b17 	vmov	d7, r2, r3
 80012b2:	eeb0 0a47 	vmov.f32	s0, s14
 80012b6:	eef0 0a67 	vmov.f32	s1, s15
 80012ba:	f007 fc71 	bl	8008ba0 <sin>
 80012be:	ec59 8b10 	vmov	r8, r9, d0
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f935 	bl	8000534 <__aeabi_i2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4640      	mov	r0, r8
 80012d0:	4649      	mov	r1, r9
 80012d2:	f7ff f999 	bl	8000608 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7fe ffdd 	bl	800029c <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc65 	bl	8000bb8 <__aeabi_d2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	71bb      	strb	r3, [r7, #6]
	//이전 그림 지우기
	ssd1306_Line(centerX, centerY, oldXs, oldYs, 0);
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <AnalogClock+0x3a8>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <AnalogClock+0x3ac>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	7db9      	ldrb	r1, [r7, #22]
 80012fc:	7df8      	ldrb	r0, [r7, #23]
 80012fe:	2400      	movs	r4, #0
 8001300:	9400      	str	r4, [sp, #0]
 8001302:	f000 fefd 	bl	8002100 <ssd1306_Line>
	ssd1306_Line(centerX, centerY, oldXm, oldYm, 0);
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <AnalogClock+0x3b0>)
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <AnalogClock+0x3b4>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	7db9      	ldrb	r1, [r7, #22]
 8001310:	7df8      	ldrb	r0, [r7, #23]
 8001312:	2400      	movs	r4, #0
 8001314:	9400      	str	r4, [sp, #0]
 8001316:	f000 fef3 	bl	8002100 <ssd1306_Line>
	ssd1306_Line(centerX, centerY, oldXh, oldYh, 0);
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <AnalogClock+0x3b8>)
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <AnalogClock+0x3bc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	7db9      	ldrb	r1, [r7, #22]
 8001324:	7df8      	ldrb	r0, [r7, #23]
 8001326:	2400      	movs	r4, #0
 8001328:	9400      	str	r4, [sp, #0]
 800132a:	f000 fee9 	bl	8002100 <ssd1306_Line>
	//새로 그리기
	ssd1306_Line(centerX, centerY, Xs, Ys, 1);
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	7db9      	ldrb	r1, [r7, #22]
 8001334:	7df8      	ldrb	r0, [r7, #23]
 8001336:	2401      	movs	r4, #1
 8001338:	9400      	str	r4, [sp, #0]
 800133a:	f000 fee1 	bl	8002100 <ssd1306_Line>
	ssd1306_Line(centerX, centerY, Xm, Ym, 1);
 800133e:	7a3b      	ldrb	r3, [r7, #8]
 8001340:	7a7a      	ldrb	r2, [r7, #9]
 8001342:	7db9      	ldrb	r1, [r7, #22]
 8001344:	7df8      	ldrb	r0, [r7, #23]
 8001346:	2401      	movs	r4, #1
 8001348:	e01a      	b.n	8001380 <AnalogClock+0x3c0>
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	51eb851f 	.word	0x51eb851f
 8001354:	40091eb8 	.word	0x40091eb8
 8001358:	20000205 	.word	0x20000205
 800135c:	20000204 	.word	0x20000204
 8001360:	20000000 	.word	0x20000000
 8001364:	40668000 	.word	0x40668000
 8001368:	20000214 	.word	0x20000214
 800136c:	20000215 	.word	0x20000215
 8001370:	20000216 	.word	0x20000216
 8001374:	20000217 	.word	0x20000217
 8001378:	20000218 	.word	0x20000218
 800137c:	20000219 	.word	0x20000219
 8001380:	9400      	str	r4, [sp, #0]
 8001382:	f000 febd 	bl	8002100 <ssd1306_Line>
	ssd1306_Line(centerX, centerY, Xh, Yh, 1);
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	7db9      	ldrb	r1, [r7, #22]
 800138c:	7df8      	ldrb	r0, [r7, #23]
 800138e:	2401      	movs	r4, #1
 8001390:	9400      	str	r4, [sp, #0]
 8001392:	f000 feb5 	bl	8002100 <ssd1306_Line>
	//좌표 백업
	oldXs = Xs;
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <AnalogClock+0x41c>)
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	7013      	strb	r3, [r2, #0]
	oldYs = Ys;
 800139c:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <AnalogClock+0x420>)
 800139e:	7abb      	ldrb	r3, [r7, #10]
 80013a0:	7013      	strb	r3, [r2, #0]
	oldXm = Xm;
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <AnalogClock+0x424>)
 80013a4:	7a7b      	ldrb	r3, [r7, #9]
 80013a6:	7013      	strb	r3, [r2, #0]
	oldYm = Ym;
 80013a8:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <AnalogClock+0x428>)
 80013aa:	7a3b      	ldrb	r3, [r7, #8]
 80013ac:	7013      	strb	r3, [r2, #0]
	oldXh = Xh;
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <AnalogClock+0x42c>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	7013      	strb	r3, [r2, #0]
	oldYh = Yh;
 80013b4:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <AnalogClock+0x430>)
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	7013      	strb	r3, [r2, #0]
	//스크린에 업데이트
	ssd1306_UpdateScreen();
 80013ba:	f000 fd5f 	bl	8001e7c <ssd1306_UpdateScreen>

	update = 0;
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <AnalogClock+0x434>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	while (update == 0);
 80013c4:	bf00      	nop
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <AnalogClock+0x434>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0fb      	beq.n	80013c6 <AnalogClock+0x406>
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013da:	bf00      	nop
 80013dc:	20000214 	.word	0x20000214
 80013e0:	20000215 	.word	0x20000215
 80013e4:	20000216 	.word	0x20000216
 80013e8:	20000217 	.word	0x20000217
 80013ec:	20000218 	.word	0x20000218
 80013f0:	20000219 	.word	0x20000219
 80013f4:	20000206 	.word	0x20000206

080013f8 <DigitClock>:
void DigitClock(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
	//digitClock
	char str[20];
	sprintf(str, "%02d:%02d:%02d", hour, minute, second); //3개의 값을 뿌려줌
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <DigitClock+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <DigitClock+0x48>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <DigitClock+0x4c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	1d38      	adds	r0, r7, #4
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	460b      	mov	r3, r1
 8001414:	490c      	ldr	r1, [pc, #48]	@ (8001448 <DigitClock+0x50>)
 8001416:	f005 fa2f 	bl	8006878 <siprintf>
	ssd1306_SetCursor(0, 15); //좌표값 설정
 800141a:	210f      	movs	r1, #15
 800141c:	2000      	movs	r0, #0
 800141e:	f000 fe57 	bl	80020d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, 1); //폰트, 컬러
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <DigitClock+0x54>)
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	2301      	movs	r3, #1
 8001428:	ca06      	ldmia	r2, {r1, r2}
 800142a:	f000 fe2b 	bl	8002084 <ssd1306_WriteString>
	ssd1306_UpdateScreen(); //스크린에 업데이트
 800142e:	f000 fd25 	bl	8001e7c <ssd1306_UpdateScreen>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	20000204 	.word	0x20000204
 8001444:	20000205 	.word	0x20000205
 8001448:	08009c18 	.word	0x08009c18
 800144c:	2000000c 	.word	0x2000000c

08001450 <DisplayStr>:
void DisplayStr(){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
	//display string
	char str[20];
	strcpy(str,"User Mode!!");
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <DisplayStr+0x30>)
 800145a:	ca07      	ldmia	r2, {r0, r1, r2}
 800145c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ssd1306_SetCursor(5, 20); //좌표값 설정
 8001460:	2114      	movs	r1, #20
 8001462:	2005      	movs	r0, #5
 8001464:	f000 fe34 	bl	80020d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, 1); //폰트, 컬러
 8001468:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <DisplayStr+0x34>)
 800146a:	1d38      	adds	r0, r7, #4
 800146c:	2301      	movs	r3, #1
 800146e:	ca06      	ldmia	r2, {r1, r2}
 8001470:	f000 fe08 	bl	8002084 <ssd1306_WriteString>
	ssd1306_UpdateScreen(); //스크린에 업데이트
 8001474:	f000 fd02 	bl	8001e7c <ssd1306_UpdateScreen>
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	08009c28 	.word	0x08009c28
 8001484:	20000004 	.word	0x20000004

08001488 <Displaytemp>:
void Displaytemp(){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
	char str[20];
	strcpy(str,"32C'");
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <Displaytemp+0x34>)
 8001492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001496:	6018      	str	r0, [r3, #0]
 8001498:	3304      	adds	r3, #4
 800149a:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(20, 20); //좌표값 설정
 800149c:	2114      	movs	r1, #20
 800149e:	2014      	movs	r0, #20
 80014a0:	f000 fe16 	bl	80020d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, 1); //폰트, 컬러
 80014a4:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <Displaytemp+0x38>)
 80014a6:	1d38      	adds	r0, r7, #4
 80014a8:	2301      	movs	r3, #1
 80014aa:	ca06      	ldmia	r2, {r1, r2}
 80014ac:	f000 fdea 	bl	8002084 <ssd1306_WriteString>
	ssd1306_UpdateScreen(); //스크린에 업데이트
 80014b0:	f000 fce4 	bl	8001e7c <ssd1306_UpdateScreen>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08009c34 	.word	0x08009c34
 80014c0:	20000004 	.word	0x20000004

080014c4 <app>:
	ssd1306_Fill(0x00); //이전화면을 지우고 새로쓰기
	ssd1306_UpdateScreen(); //스크린에 업데이트
}


void app(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	// uart 장치 초기화
	initUart(&huart2);
 80014ca:	489a      	ldr	r0, [pc, #616]	@ (8001734 <app+0x270>)
 80014cc:	f001 f99a 	bl	8002804 <initUart>
	ssd1306_Init();
 80014d0:	f000 fbc2 	bl	8001c58 <ssd1306_Init>
	// timer 장치 초기화
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80014d4:	213c      	movs	r1, #60	@ 0x3c
 80014d6:	4898      	ldr	r0, [pc, #608]	@ (8001738 <app+0x274>)
 80014d8:	f003 fa52 	bl	8004980 <HAL_TIM_Encoder_Start>
	static uint8_t counterState = 0;
	static uint8_t initMode=0;
	static uint32_t countSw=0;
	static uint8_t countEn=0;
	static uint8_t timeState=0;
	uint8_t displayOn = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]

	while(1){
		uint8_t EnState=(int)htim3.Instance->CNT;
 80014e0:	4b95      	ldr	r3, [pc, #596]	@ (8001738 <app+0x274>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	71bb      	strb	r3, [r7, #6]
		uint8_t SwState=HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin);
 80014e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ec:	4893      	ldr	r0, [pc, #588]	@ (800173c <app+0x278>)
 80014ee:	f002 f869 	bl	80035c4 <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	717b      	strb	r3, [r7, #5]

		////시간 측정구간
		if((OldSwState!=SwState)&&(SwState==0)){
 80014f6:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <app+0x27c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	797a      	ldrb	r2, [r7, #5]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d010      	beq.n	8001522 <app+0x5e>
 8001500:	797b      	ldrb	r3, [r7, #5]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <app+0x5e>
			//하강엣지 일때 엣지의 시작시간 저장 후 카운팅 시작시그널이 바뀌고 count 값이 증가
			countSw++;
 8001506:	4b8f      	ldr	r3, [pc, #572]	@ (8001744 <app+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a8d      	ldr	r2, [pc, #564]	@ (8001744 <app+0x280>)
 800150e:	6013      	str	r3, [r2, #0]
			StartTime = time;
 8001510:	4b8d      	ldr	r3, [pc, #564]	@ (8001748 <app+0x284>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <app+0x288>)
 8001518:	801a      	strh	r2, [r3, #0]
			counterState = 1;
 800151a:	4b8d      	ldr	r3, [pc, #564]	@ (8001750 <app+0x28c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e017      	b.n	8001552 <app+0x8e>
		}//상승엣지일때 시작,끝시간,카운팅 시작시그널을 0으로 리셋
		else if((OldSwState!=SwState)&&(SwState==1)){
 8001522:	4b87      	ldr	r3, [pc, #540]	@ (8001740 <app+0x27c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	797a      	ldrb	r2, [r7, #5]
 8001528:	429a      	cmp	r2, r3
 800152a:	d012      	beq.n	8001552 <app+0x8e>
 800152c:	797b      	ldrb	r3, [r7, #5]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10f      	bne.n	8001552 <app+0x8e>
			StartTime=0;
 8001532:	4b86      	ldr	r3, [pc, #536]	@ (800174c <app+0x288>)
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
			EndTime=0;
 8001538:	4b86      	ldr	r3, [pc, #536]	@ (8001754 <app+0x290>)
 800153a:	2200      	movs	r2, #0
 800153c:	801a      	strh	r2, [r3, #0]
			counterState=0;
 800153e:	4b84      	ldr	r3, [pc, #528]	@ (8001750 <app+0x28c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
			//버튼을 떼는 그순간에 timeState가 4이면 다시 초만 변경하도록 바꿈
			if(timeState==4)timeState=0;
 8001544:	4b84      	ldr	r3, [pc, #528]	@ (8001758 <app+0x294>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d102      	bne.n	8001552 <app+0x8e>
 800154c:	4b82      	ldr	r3, [pc, #520]	@ (8001758 <app+0x294>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
		}

		//counting이 시작되었다고 판단되면
		if (counterState == 1) {
 8001552:	4b7f      	ldr	r3, [pc, #508]	@ (8001750 <app+0x28c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10c      	bne.n	8001574 <app+0xb0>
			//예전상태와 이전상태가 같고 현제상태가 == 0 이면 시간을 계속업데이트하면서 끝나는 시간을 기록
			if ((OldSwState == SwState) && (SwState == 0))EndTime = time;
 800155a:	4b79      	ldr	r3, [pc, #484]	@ (8001740 <app+0x27c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	797a      	ldrb	r2, [r7, #5]
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <app+0xb0>
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d104      	bne.n	8001574 <app+0xb0>
 800156a:	4b77      	ldr	r3, [pc, #476]	@ (8001748 <app+0x284>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b78      	ldr	r3, [pc, #480]	@ (8001754 <app+0x290>)
 8001572:	801a      	strh	r2, [r3, #0]
		}

		//init모드 활성,비활성화 구간
		//엔코더 상태가 0이고 측정시간이 3초가 넘어가고
		if ((EndTime - StartTime) >= 3000) {
 8001574:	4b77      	ldr	r3, [pc, #476]	@ (8001754 <app+0x290>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <app+0x288>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001584:	4293      	cmp	r3, r2
 8001586:	dd0c      	ble.n	80015a2 <app+0xde>
			if (countSw % 2 == 0) initMode = 0; //짝수이면 initMode 비활성화
 8001588:	4b6e      	ldr	r3, [pc, #440]	@ (8001744 <app+0x280>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <app+0xd8>
 8001594:	4b71      	ldr	r3, [pc, #452]	@ (800175c <app+0x298>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e002      	b.n	80015a2 <app+0xde>
			else initMode = 1; //홀수이면 initMode 활성화
 800159c:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <app+0x298>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
		}

		//init모드에 관한 설정
		if (initMode) {
 80015a2:	4b6e      	ldr	r3, [pc, #440]	@ (800175c <app+0x298>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b3 	beq.w	8001712 <app+0x24e>
			if ((EndTime - StartTime) > 3000 && (EndTime - StartTime) <= 5000) timeState = 1; //초만 변경가능
 80015ac:	4b69      	ldr	r3, [pc, #420]	@ (8001754 <app+0x290>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b66      	ldr	r3, [pc, #408]	@ (800174c <app+0x288>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80015bc:	4293      	cmp	r3, r2
 80015be:	dd0d      	ble.n	80015dc <app+0x118>
 80015c0:	4b64      	ldr	r3, [pc, #400]	@ (8001754 <app+0x290>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b61      	ldr	r3, [pc, #388]	@ (800174c <app+0x288>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	dc03      	bgt.n	80015dc <app+0x118>
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <app+0x294>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e024      	b.n	8001626 <app+0x162>
			else if ((EndTime - StartTime) > 5000 && (EndTime - StartTime) <= 7000)timeState = 2; //분만 변경가능
 80015dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <app+0x290>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b5a      	ldr	r3, [pc, #360]	@ (800174c <app+0x288>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	dd0d      	ble.n	800160c <app+0x148>
 80015f0:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <app+0x290>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b55      	ldr	r3, [pc, #340]	@ (800174c <app+0x288>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001600:	4293      	cmp	r3, r2
 8001602:	dc03      	bgt.n	800160c <app+0x148>
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <app+0x294>)
 8001606:	2202      	movs	r2, #2
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e00c      	b.n	8001626 <app+0x162>
			else if ((EndTime - StartTime) > 7000 )timeState = 3; //시만 변경가능
 800160c:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <app+0x290>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <app+0x288>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800161c:	4293      	cmp	r3, r2
 800161e:	dd02      	ble.n	8001626 <app+0x162>
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <app+0x294>)
 8001622:	2203      	movs	r2, #3
 8001624:	701a      	strb	r2, [r3, #0]

			//500ms주기로 초기화하려는 부분이 켜졌다 꺼졌다 하는부분
			if (delay == 0) {
 8001626:	4b4e      	ldr	r3, [pc, #312]	@ (8001760 <app+0x29c>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d12c      	bne.n	8001688 <app+0x1c4>
				//500ms마다 한번씩 들어옴
				delay = 500;
 800162e:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <app+0x29c>)
 8001630:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001634:	801a      	strh	r2, [r3, #0]
				if (displayOn == 0){
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11c      	bne.n	8001676 <app+0x1b2>
					switch (timeState) {
 800163c:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <app+0x294>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d00e      	beq.n	8001662 <app+0x19e>
 8001644:	2b03      	cmp	r3, #3
 8001646:	dc10      	bgt.n	800166a <app+0x1a6>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d002      	beq.n	8001652 <app+0x18e>
 800164c:	2b02      	cmp	r3, #2
 800164e:	d004      	beq.n	800165a <app+0x196>
 8001650:	e00b      	b.n	800166a <app+0x1a6>
						case 1:
							ssd1306_FillSec(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fbe6 	bl	8001e24 <ssd1306_FillSec>
							break;
 8001658:	e012      	b.n	8001680 <app+0x1bc>
						case 2:
							ssd1306_FillMin(0x00);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 fbb6 	bl	8001dcc <ssd1306_FillMin>
							break;
 8001660:	e00e      	b.n	8001680 <app+0x1bc>
						case 3:
							ssd1306_FillHour(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 fb86 	bl	8001d74 <ssd1306_FillHour>
							break;
 8001668:	e00a      	b.n	8001680 <app+0x1bc>
						default: {
							ssd1306_Fill(0x00);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fb5e 	bl	8001d2c <ssd1306_Fill>
							ssd1306_UpdateScreen();
 8001670:	f000 fc04 	bl	8001e7c <ssd1306_UpdateScreen>
							break;
 8001674:	e004      	b.n	8001680 <app+0x1bc>
						}
					}
				}
				else if (displayOn == 1) DigitClock(); //digital clock 띄우기
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <app+0x1bc>
 800167c:	f7ff febc 	bl	80013f8 <DigitClock>
				displayOn ^= 1; //번갈아가면서 실행 1초 주기로
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	71fb      	strb	r3, [r7, #7]
			}

			if (OldEnState != EnState){//엔코더의 이전값과 현재값이 다르면
 8001688:	4b36      	ldr	r3, [pc, #216]	@ (8001764 <app+0x2a0>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	79ba      	ldrb	r2, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	d03b      	beq.n	800170a <app+0x246>
				switch (timeState){
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <app+0x294>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d022      	beq.n	80016e0 <app+0x21c>
 800169a:	2b03      	cmp	r3, #3
 800169c:	dc2e      	bgt.n	80016fc <app+0x238>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d002      	beq.n	80016a8 <app+0x1e4>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d00e      	beq.n	80016c4 <app+0x200>
					case 3:
						hour++;
						if(hour==24)hour=0;
						break;
					default:
						break;
 80016a6:	e029      	b.n	80016fc <app+0x238>
						second++;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <app+0x2a4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <app+0x2a4>)
 80016b2:	701a      	strb	r2, [r3, #0]
						if(second==60)second=0;
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <app+0x2a4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b3c      	cmp	r3, #60	@ 0x3c
 80016ba:	d121      	bne.n	8001700 <app+0x23c>
 80016bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <app+0x2a4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
						break;
 80016c2:	e01d      	b.n	8001700 <app+0x23c>
						minute++;
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <app+0x2a8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <app+0x2a8>)
 80016ce:	701a      	strb	r2, [r3, #0]
						if(minute==60)minute=0;
 80016d0:	4b26      	ldr	r3, [pc, #152]	@ (800176c <app+0x2a8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b3c      	cmp	r3, #60	@ 0x3c
 80016d6:	d115      	bne.n	8001704 <app+0x240>
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <app+0x2a8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
						break;
 80016de:	e011      	b.n	8001704 <app+0x240>
						hour++;
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <app+0x2ac>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <app+0x2ac>)
 80016ea:	701a      	strb	r2, [r3, #0]
						if(hour==24)hour=0;
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <app+0x2ac>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b18      	cmp	r3, #24
 80016f2:	d109      	bne.n	8001708 <app+0x244>
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <app+0x2ac>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
						break;
 80016fa:	e005      	b.n	8001708 <app+0x244>
						break;
 80016fc:	bf00      	nop
 80016fe:	e004      	b.n	800170a <app+0x246>
						break;
 8001700:	bf00      	nop
 8001702:	e002      	b.n	800170a <app+0x246>
						break;
 8001704:	bf00      	nop
 8001706:	e000      	b.n	800170a <app+0x246>
						break;
 8001708:	bf00      	nop
				}
			}
			OldEnState = EnState; //이전값을 저장
 800170a:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <app+0x2a0>)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	7013      	strb	r3, [r2, #0]
 8001710:	e038      	b.n	8001784 <app+0x2c0>
		}
		else{ //init모드가 아닐때는 슬라이드 기능
			ssd1306_Fill(0x00);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 fb0a 	bl	8001d2c <ssd1306_Fill>
			switch (EnState) {
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d02d      	beq.n	800177a <app+0x2b6>
 800171e:	2b02      	cmp	r3, #2
 8001720:	dc30      	bgt.n	8001784 <app+0x2c0>
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <app+0x268>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d024      	beq.n	8001774 <app+0x2b0>
 800172a:	e02b      	b.n	8001784 <app+0x2c0>
				case 0:
					DigitClock();
 800172c:	f7ff fe64 	bl	80013f8 <DigitClock>
					break;
 8001730:	e028      	b.n	8001784 <app+0x2c0>
 8001732:	bf00      	nop
 8001734:	20000410 	.word	0x20000410
 8001738:	200003c8 	.word	0x200003c8
 800173c:	40020800 	.word	0x40020800
 8001740:	2000021a 	.word	0x2000021a
 8001744:	2000021c 	.word	0x2000021c
 8001748:	20000208 	.word	0x20000208
 800174c:	20000220 	.word	0x20000220
 8001750:	20000222 	.word	0x20000222
 8001754:	20000224 	.word	0x20000224
 8001758:	20000226 	.word	0x20000226
 800175c:	20000227 	.word	0x20000227
 8001760:	2000020c 	.word	0x2000020c
 8001764:	20000228 	.word	0x20000228
 8001768:	20000205 	.word	0x20000205
 800176c:	20000204 	.word	0x20000204
 8001770:	20000000 	.word	0x20000000
				case 1:
					AnalogClock();
 8001774:	f7ff fc24 	bl	8000fc0 <AnalogClock>
					break;
 8001778:	e004      	b.n	8001784 <app+0x2c0>
				case 2:
					DisplayStr();
 800177a:	f7ff fe69 	bl	8001450 <DisplayStr>
					userMode();
 800177e:	f000 f807 	bl	8001790 <userMode>
					break;
 8001782:	bf00      	nop
			}
		}
		OldSwState = SwState;
 8001784:	4a01      	ldr	r2, [pc, #4]	@ (800178c <app+0x2c8>)
 8001786:	797b      	ldrb	r3, [r7, #5]
 8001788:	7013      	strb	r3, [r2, #0]
	while(1){
 800178a:	e6a9      	b.n	80014e0 <app+0x1c>
 800178c:	2000021a 	.word	0x2000021a

08001790 <userMode>:
	}
}
void userMode(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	static char buffer[256];
	static uint16_t count = 0;

	char ch = getUart();
 8001796:	f001 f889 	bl	80028ac <getUart>
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	if ((ch != '\0') && (ch != '\n')) {
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00e      	beq.n	80017c2 <userMode+0x32>
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d00b      	beq.n	80017c2 <userMode+0x32>
		buffer[count] = ch;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <userMode+0x7c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <userMode+0x80>)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	5453      	strb	r3, [r2, r1]
		count++;
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <userMode+0x7c>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <userMode+0x7c>)
 80017c0:	801a      	strh	r2, [r3, #0]
	}

	if (ch == '\n') {
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b0a      	cmp	r3, #10
 80017c6:	d11c      	bne.n	8001802 <userMode+0x72>
		buffer[count] = '\0';
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <userMode+0x7c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <userMode+0x80>)
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
		printf("%s\n", buffer);
 80017d4:	480e      	ldr	r0, [pc, #56]	@ (8001810 <userMode+0x80>)
 80017d6:	f005 f847 	bl	8006868 <puts>
		ssd1306_Fill(0x00);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 faa6 	bl	8001d2c <ssd1306_Fill>
		if(strncmp(buffer,"temp",4)==0){
 80017e0:	2204      	movs	r2, #4
 80017e2:	490c      	ldr	r1, [pc, #48]	@ (8001814 <userMode+0x84>)
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <userMode+0x80>)
 80017e6:	f005 f947 	bl	8006a78 <strncmp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <userMode+0x66>
			while(1){
				Displaytemp();
 80017f0:	f7ff fe4a 	bl	8001488 <Displaytemp>
 80017f4:	e7fc      	b.n	80017f0 <userMode+0x60>
			}
		}
		buffer[0] = '\0';
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <userMode+0x80>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
		count = 0;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <userMode+0x7c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	801a      	strh	r2, [r3, #0]
	}
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000022a 	.word	0x2000022a
 8001810:	2000022c 	.word	0x2000022c
 8001814:	08009c3c 	.word	0x08009c3c

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f001 f8a2 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001820:	f000 f80e 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001824:	f000 f968 	bl	8001af8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001828:	f000 f8ba 	bl	80019a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800182c:	f000 f8e6 	bl	80019fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001830:	f000 f938 	bl	8001aa4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001834:	f000 f862 	bl	80018fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app();
 8001838:	f7ff fe44 	bl	80014c4 <app>
  //Uart();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <main+0x24>

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f90a 	bl	8006a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <SystemClock_Config+0xb4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a21      	ldr	r2, [pc, #132]	@ (80018f4 <SystemClock_Config+0xb4>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <SystemClock_Config+0xb4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <SystemClock_Config+0xb8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <SystemClock_Config+0xb8>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <SystemClock_Config+0xb8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fb67 	bl	8003f84 <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018bc:	f000 f97e 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	230f      	movs	r3, #15
 80018c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fdca 	bl	8004474 <HAL_RCC_ClockConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018e6:	f000 f969 	bl	8001bbc <Error_Handler>
  }
}
 80018ea:	bf00      	nop
 80018ec:	3750      	adds	r7, #80	@ 0x50
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000

080018fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <MX_ADC1_Init+0x9c>)
 8001912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001916:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800191a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <MX_ADC1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_ADC1_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <MX_ADC1_Init+0x98>)
 800193e:	4a17      	ldr	r2, [pc, #92]	@ (800199c <MX_ADC1_Init+0xa0>)
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <MX_ADC1_Init+0x98>)
 800194a:	2201      	movs	r2, #1
 800194c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_ADC1_Init+0x98>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	480d      	ldr	r0, [pc, #52]	@ (8001994 <MX_ADC1_Init+0x98>)
 800195e:	f001 f897 	bl	8002a90 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 f928 	bl	8001bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_ADC1_Init+0x98>)
 800197e:	f001 f8cb 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 f918 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000032c 	.word	0x2000032c
 8001998:	40012000 	.word	0x40012000
 800199c:	0f000001 	.word	0x0f000001

080019a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019a6:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <MX_I2C1_Init+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019ac:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <MX_I2C1_Init+0x58>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <MX_I2C1_Init+0x50>)
 80019de:	f001 fe23 	bl	8003628 <HAL_I2C_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e8:	f000 f8e8 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000374 	.word	0x20000374
 80019f4:	40005400 	.word	0x40005400
 80019f8:	00061a80 	.word	0x00061a80

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2224      	movs	r2, #36	@ 0x24
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 f82c 	bl	8006a68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a18:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a1a:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <MX_TIM3_Init+0xa4>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3-1;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a44:	2301      	movs	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a68:	f002 fee4 	bl	8004834 <HAL_TIM_Encoder_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001a72:	f000 f8a3 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <MX_TIM3_Init+0xa0>)
 8001a84:	f003 f8bc 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a8e:	f000 f895 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3730      	adds	r7, #48	@ 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200003c8 	.word	0x200003c8
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <MX_USART2_UART_Init+0x50>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_USART2_UART_Init+0x4c>)
 8001adc:	f003 f8fe 	bl	8004cdc <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ae6:	f000 f869 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000410 	.word	0x20000410
 8001af4:	40004400 	.word	0x40004400

08001af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <MX_GPIO_Init+0xb8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b68:	4812      	ldr	r0, [pc, #72]	@ (8001bb4 <MX_GPIO_Init+0xbc>)
 8001b6a:	f001 fd43 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <MX_GPIO_Init+0xc0>)
 8001b84:	f001 fb9a 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8001b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_GPIO_Init+0xbc>)
 8001ba2:	f001 fb8b 	bl	80032bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020800 	.word	0x40020800

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <Error_Handler+0x8>

08001bc8 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bd2:	4807      	ldr	r0, [pc, #28]	@ (8001bf0 <ssd1306_Reset+0x28>)
 8001bd4:	f001 fd0e 	bl	80035f4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 ff35 	bl	8002a48 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <ssd1306_Reset+0x28>)
 8001be6:	f001 fd05 	bl	80035f4 <HAL_GPIO_WritePin>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2178      	movs	r1, #120	@ 0x78
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <ssd1306_WriteCommand+0x2c>)
 8001c14:	f001 fe4c 	bl	80038b0 <HAL_I2C_Mem_Write>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000374 	.word	0x20000374

08001c24 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f04f 32ff 	mov.w	r2, #4294967295
 8001c36:	9202      	str	r2, [sp, #8]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	2240      	movs	r2, #64	@ 0x40
 8001c42:	2178      	movs	r1, #120	@ 0x78
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <ssd1306_WriteData+0x30>)
 8001c46:	f001 fe33 	bl	80038b0 <HAL_I2C_Mem_Write>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000374 	.word	0x20000374

08001c58 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c5c:	f7ff ffb4 	bl	8001bc8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c60:	2064      	movs	r0, #100	@ 0x64
 8001c62:	f000 fef1 	bl	8002a48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 fb50 	bl	800230c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c6c:	2020      	movs	r0, #32
 8001c6e:	f7ff ffc1 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff ffbe 	bl	8001bf4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c78:	20b0      	movs	r0, #176	@ 0xb0
 8001c7a:	f7ff ffbb 	bl	8001bf4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c7e:	20c8      	movs	r0, #200	@ 0xc8
 8001c80:	f7ff ffb8 	bl	8001bf4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ffb5 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c8a:	2010      	movs	r0, #16
 8001c8c:	f7ff ffb2 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c90:	2040      	movs	r0, #64	@ 0x40
 8001c92:	f7ff ffaf 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c96:	20ff      	movs	r0, #255	@ 0xff
 8001c98:	f000 fb25 	bl	80022e6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c9c:	20a1      	movs	r0, #161	@ 0xa1
 8001c9e:	f7ff ffa9 	bl	8001bf4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ca2:	20a6      	movs	r0, #166	@ 0xa6
 8001ca4:	f7ff ffa6 	bl	8001bf4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ca8:	20a8      	movs	r0, #168	@ 0xa8
 8001caa:	f7ff ffa3 	bl	8001bf4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001cae:	203f      	movs	r0, #63	@ 0x3f
 8001cb0:	f7ff ffa0 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cb4:	20a4      	movs	r0, #164	@ 0xa4
 8001cb6:	f7ff ff9d 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001cba:	20d3      	movs	r0, #211	@ 0xd3
 8001cbc:	f7ff ff9a 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff ff97 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cc6:	20d5      	movs	r0, #213	@ 0xd5
 8001cc8:	f7ff ff94 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ccc:	20f0      	movs	r0, #240	@ 0xf0
 8001cce:	f7ff ff91 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cd2:	20d9      	movs	r0, #217	@ 0xd9
 8001cd4:	f7ff ff8e 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cd8:	2022      	movs	r0, #34	@ 0x22
 8001cda:	f7ff ff8b 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cde:	20da      	movs	r0, #218	@ 0xda
 8001ce0:	f7ff ff88 	bl	8001bf4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ce4:	2012      	movs	r0, #18
 8001ce6:	f7ff ff85 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cea:	20db      	movs	r0, #219	@ 0xdb
 8001cec:	f7ff ff82 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cf0:	2020      	movs	r0, #32
 8001cf2:	f7ff ff7f 	bl	8001bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cf6:	208d      	movs	r0, #141	@ 0x8d
 8001cf8:	f7ff ff7c 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f7ff ff79 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 fb02 	bl	800230c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 f80f 	bl	8001d2c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d0e:	f000 f8b5 	bl	8001e7c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <ssd1306_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <ssd1306_Init+0xd0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d1e:	4b02      	ldr	r3, [pc, #8]	@ (8001d28 <ssd1306_Init+0xd0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	711a      	strb	r2, [r3, #4]
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000858 	.word	0x20000858

08001d2c <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;
    //printf("size : %d\n",sizeof(SSD1306_Buffer[0])); //buffer size = 1024 1층에 1024
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e00d      	b.n	8001d58 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <ssd1306_Fill+0x1a>
 8001d42:	2100      	movs	r1, #0
 8001d44:	e000      	b.n	8001d48 <ssd1306_Fill+0x1c>
 8001d46:	21ff      	movs	r1, #255	@ 0xff
 8001d48:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <ssd1306_Fill+0x44>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	460a      	mov	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5e:	d3ed      	bcc.n	8001d3c <ssd1306_Fill+0x10>
    }

}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000458 	.word	0x20000458

08001d74 <ssd1306_FillHour>:
//시간부분만 검정색처리
void ssd1306_FillHour(SSD1306_COLOR color){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i,j;
	for (i = 0; i < 8; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e017      	b.n	8001db4 <ssd1306_FillHour+0x40>
		for(j = 0; j<=37; j++){   //38~42까지 첫번째:포함
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	e00e      	b.n	8001da8 <ssd1306_FillHour+0x34>
			SSD1306_Buffer[i*128+j]=(color == Black) ? 0x00 : 0xFF;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <ssd1306_FillHour+0x20>
 8001d90:	2100      	movs	r1, #0
 8001d92:	e000      	b.n	8001d96 <ssd1306_FillHour+0x22>
 8001d94:	21ff      	movs	r1, #255	@ 0xff
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	01da      	lsls	r2, r3, #7
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <ssd1306_FillHour+0x54>)
 8001da0:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j<=37; j++){   //38~42까지 첫번째:포함
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b25      	cmp	r3, #37	@ 0x25
 8001dac:	d9ed      	bls.n	8001d8a <ssd1306_FillHour+0x16>
	for (i = 0; i < 8; i++) {
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d9e4      	bls.n	8001d84 <ssd1306_FillHour+0x10>
		}
	}
	ssd1306_UpdateScreen();
 8001dba:	f000 f85f 	bl	8001e7c <ssd1306_UpdateScreen>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000458 	.word	0x20000458

08001dcc <ssd1306_FillMin>:

//minute 부분만 검정색처리
void ssd1306_FillMin(SSD1306_COLOR color){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i,j;
	for (i = 0; i < 8; i++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e017      	b.n	8001e0c <ssd1306_FillMin+0x40>
		for(j = 43; j<=81; j++){   //38~42까지 첫번째:포함
 8001ddc:	232b      	movs	r3, #43	@ 0x2b
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e00e      	b.n	8001e00 <ssd1306_FillMin+0x34>
			SSD1306_Buffer[i*128+j]=(color == Black) ? 0x00 : 0xFF;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <ssd1306_FillMin+0x20>
 8001de8:	2100      	movs	r1, #0
 8001dea:	e000      	b.n	8001dee <ssd1306_FillMin+0x22>
 8001dec:	21ff      	movs	r1, #255	@ 0xff
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	01da      	lsls	r2, r3, #7
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <ssd1306_FillMin+0x54>)
 8001df8:	54d1      	strb	r1, [r2, r3]
		for(j = 43; j<=81; j++){   //38~42까지 첫번째:포함
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b51      	cmp	r3, #81	@ 0x51
 8001e04:	d9ed      	bls.n	8001de2 <ssd1306_FillMin+0x16>
	for (i = 0; i < 8; i++) {
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b07      	cmp	r3, #7
 8001e10:	d9e4      	bls.n	8001ddc <ssd1306_FillMin+0x10>
		}
	}
	ssd1306_UpdateScreen();
 8001e12:	f000 f833 	bl	8001e7c <ssd1306_UpdateScreen>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000458 	.word	0x20000458

08001e24 <ssd1306_FillSec>:

//second 부분만 검정색처리
void ssd1306_FillSec(SSD1306_COLOR color){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i,j;
	for (i = 0; i < 8; i++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e017      	b.n	8001e64 <ssd1306_FillSec+0x40>
		for(j = 92; j<=127; j++){   //38~42까지 첫번째:포함
 8001e34:	235c      	movs	r3, #92	@ 0x5c
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	e00e      	b.n	8001e58 <ssd1306_FillSec+0x34>
			SSD1306_Buffer[i*128+j]=(color == Black) ? 0x00 : 0xFF;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <ssd1306_FillSec+0x20>
 8001e40:	2100      	movs	r1, #0
 8001e42:	e000      	b.n	8001e46 <ssd1306_FillSec+0x22>
 8001e44:	21ff      	movs	r1, #255	@ 0xff
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	01da      	lsls	r2, r3, #7
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <ssd1306_FillSec+0x54>)
 8001e50:	54d1      	strb	r1, [r2, r3]
		for(j = 92; j<=127; j++){   //38~42까지 첫번째:포함
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e5c:	d9ed      	bls.n	8001e3a <ssd1306_FillSec+0x16>
	for (i = 0; i < 8; i++) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b07      	cmp	r3, #7
 8001e68:	d9e4      	bls.n	8001e34 <ssd1306_FillSec+0x10>
		}
	}
	ssd1306_UpdateScreen();
 8001e6a:	f000 f807 	bl	8001e7c <ssd1306_UpdateScreen>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000458 	.word	0x20000458

08001e7c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	e016      	b.n	8001eb6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3b50      	subs	r3, #80	@ 0x50
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff feb0 	bl	8001bf4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f7ff fead 	bl	8001bf4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001e9a:	2010      	movs	r0, #16
 8001e9c:	f7ff feaa 	bl	8001bf4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	01db      	lsls	r3, r3, #7
 8001ea4:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <ssd1306_UpdateScreen+0x4c>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff feba 	bl	8001c24 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b07      	cmp	r3, #7
 8001eba:	d9e5      	bls.n	8001e88 <ssd1306_UpdateScreen+0xc>
    }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000458 	.word	0x20000458

08001ecc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	71bb      	strb	r3, [r7, #6]
 8001eda:	4613      	mov	r3, r2
 8001edc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db3d      	blt.n	8001f62 <ssd1306_DrawPixel+0x96>
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eea:	d83a      	bhi.n	8001f62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001eec:	797b      	ldrb	r3, [r7, #5]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d11a      	bne.n	8001f28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	01db      	lsls	r3, r3, #7
 8001efe:	4413      	add	r3, r2
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <ssd1306_DrawPixel+0xa4>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	b25a      	sxtb	r2, r3
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b259      	sxtb	r1, r3
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2c9      	uxtb	r1, r1
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <ssd1306_DrawPixel+0xa4>)
 8001f24:	54d1      	strb	r1, [r2, r3]
 8001f26:	e01d      	b.n	8001f64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	b2d8      	uxtb	r0, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4413      	add	r3, r2
 8001f36:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <ssd1306_DrawPixel+0xa4>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	b25a      	sxtb	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b259      	sxtb	r1, r3
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	4603      	mov	r3, r0
 8001f56:	01db      	lsls	r3, r3, #7
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <ssd1306_DrawPixel+0xa4>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
 8001f60:	e000      	b.n	8001f64 <ssd1306_DrawPixel+0x98>
        return;
 8001f62:	bf00      	nop
    }
}
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000458 	.word	0x20000458

08001f74 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	1d38      	adds	r0, r7, #4
 8001f7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b1f      	cmp	r3, #31
 8001f90:	d902      	bls.n	8001f98 <ssd1306_WriteChar+0x24>
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f96:	d901      	bls.n	8001f9c <ssd1306_WriteChar+0x28>
        return 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e06c      	b.n	8002076 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f9c:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2b80      	cmp	r3, #128	@ 0x80
 8001fa8:	dc06      	bgt.n	8001fb8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001faa:	4b35      	ldr	r3, [pc, #212]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8001fac:	885b      	ldrh	r3, [r3, #2]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	797b      	ldrb	r3, [r7, #5]
 8001fb2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	dd01      	ble.n	8001fbc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e05c      	b.n	8002076 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	e04c      	b.n	800205c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3b20      	subs	r3, #32
 8001fc8:	7979      	ldrb	r1, [r7, #5]
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	440b      	add	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e034      	b.n	800204c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ff2:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8002002:	885b      	ldrh	r3, [r3, #2]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4413      	add	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	7bba      	ldrb	r2, [r7, #14]
 8002010:	4619      	mov	r1, r3
 8002012:	f7ff ff5b 	bl	8001ecc <ssd1306_DrawPixel>
 8002016:	e016      	b.n	8002046 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4413      	add	r3, r2
 8002024:	b2d8      	uxtb	r0, r3
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8002028:	885b      	ldrh	r3, [r3, #2]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b2d9      	uxtb	r1, r3
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	f7ff ff43 	bl	8001ecc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	3301      	adds	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	793b      	ldrb	r3, [r7, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	4293      	cmp	r3, r2
 8002054:	d3c5      	bcc.n	8001fe2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3301      	adds	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	797b      	ldrb	r3, [r7, #5]
 800205e:	461a      	mov	r2, r3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4293      	cmp	r3, r2
 8002064:	d3ad      	bcc.n	8001fc2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	793a      	ldrb	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <ssd1306_WriteChar+0x10c>)
 8002072:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	20000858 	.word	0x20000858

08002084 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	1d38      	adds	r0, r7, #4
 800208e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002092:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002094:	e012      	b.n	80020bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	7818      	ldrb	r0, [r3, #0]
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	1d3a      	adds	r2, r7, #4
 800209e:	ca06      	ldmia	r2, {r1, r2}
 80020a0:	f7ff ff68 	bl	8001f74 <ssd1306_WriteChar>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d002      	beq.n	80020b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	e008      	b.n	80020c8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3301      	adds	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e8      	bne.n	8002096 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	781b      	ldrb	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	4613      	mov	r3, r2
 80020de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <ssd1306_SetCursor+0x2c>)
 80020e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <ssd1306_SetCursor+0x2c>)
 80020ee:	805a      	strh	r2, [r3, #2]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	20000858 	.word	0x20000858

08002100 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	4603      	mov	r3, r0
 8002114:	71bb      	strb	r3, [r7, #6]
 8002116:	460b      	mov	r3, r1
 8002118:	717b      	strb	r3, [r7, #5]
 800211a:	4613      	mov	r3, r2
 800211c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800211e:	797a      	ldrb	r2, [r7, #5]
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bfb8      	it	lt
 8002128:	425b      	neglt	r3, r3
 800212a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800212c:	793a      	ldrb	r2, [r7, #4]
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	bfb8      	it	lt
 8002136:	425b      	neglt	r3, r3
 8002138:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	429a      	cmp	r2, r3
 8002140:	d201      	bcs.n	8002146 <ssd1306_Line+0x46>
 8002142:	2301      	movs	r3, #1
 8002144:	e001      	b.n	800214a <ssd1306_Line+0x4a>
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800214c:	79ba      	ldrb	r2, [r7, #6]
 800214e:	793b      	ldrb	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d201      	bcs.n	8002158 <ssd1306_Line+0x58>
 8002154:	2301      	movs	r3, #1
 8002156:	e001      	b.n	800215c <ssd1306_Line+0x5c>
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8002166:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800216a:	7939      	ldrb	r1, [r7, #4]
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff feac 	bl	8001ecc <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8002174:	e024      	b.n	80021c0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8002176:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800217a:	79b9      	ldrb	r1, [r7, #6]
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fea4 	bl	8001ecc <ssd1306_DrawPixel>
    error2 = error * 2;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	425b      	negs	r3, r3
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	dd08      	ble.n	80021a6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	4413      	add	r3, r2
 80021a4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	da08      	bge.n	80021c0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	4413      	add	r3, r2
 80021b4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	4413      	add	r3, r2
 80021be:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1d6      	bne.n	8002176 <ssd1306_Line+0x76>
 80021c8:	79ba      	ldrb	r2, [r7, #6]
 80021ca:	793b      	ldrb	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1d2      	bne.n	8002176 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80021d0:	bf00      	nop
}
 80021d2:	3724      	adds	r7, #36	@ 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4604      	mov	r4, r0
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4623      	mov	r3, r4
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	4603      	mov	r3, r0
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	460b      	mov	r3, r1
 80021f0:	717b      	strb	r3, [r7, #5]
 80021f2:	4613      	mov	r3, r2
 80021f4:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 80021f6:	797b      	ldrb	r3, [r7, #5]
 80021f8:	425b      	negs	r3, r3
 80021fa:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	f1c3 0301 	rsb	r3, r3, #1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db65      	blt.n	80022de <ssd1306_DrawCircle+0x106>
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	2b3f      	cmp	r3, #63	@ 0x3f
 8002216:	d862      	bhi.n	80022de <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b2d8      	uxtb	r0, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	4413      	add	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	793a      	ldrb	r2, [r7, #4]
 800222e:	4619      	mov	r1, r3
 8002230:	f7ff fe4c 	bl	8001ecc <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4413      	add	r3, r2
 800223c:	b2d8      	uxtb	r0, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	4413      	add	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	793a      	ldrb	r2, [r7, #4]
 800224a:	4619      	mov	r1, r3
 800224c:	f7ff fe3e 	bl	8001ecc <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4413      	add	r3, r2
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	79ba      	ldrb	r2, [r7, #6]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	793a      	ldrb	r2, [r7, #4]
 8002266:	4619      	mov	r1, r3
 8002268:	f7ff fe30 	bl	8001ecc <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b2d8      	uxtb	r0, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	79ba      	ldrb	r2, [r7, #6]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	793a      	ldrb	r2, [r7, #4]
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff fe22 	bl	8001ecc <ssd1306_DrawPixel>
        e2 = err;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	dc13      	bgt.n	80022bc <ssd1306_DrawCircle+0xe4>
            y++;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	3301      	adds	r3, #1
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	425b      	negs	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d105      	bne.n	80022bc <ssd1306_DrawCircle+0xe4>
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dc01      	bgt.n	80022bc <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dd08      	ble.n	80022d6 <ssd1306_DrawCircle+0xfe>
          x++;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3301      	adds	r3, #1
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dd9d      	ble.n	8002218 <ssd1306_DrawCircle+0x40>

    return;
 80022dc:	e000      	b.n	80022e0 <ssd1306_DrawCircle+0x108>
    return;
 80022de:	bf00      	nop
}
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}

080022e6 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022f0:	2381      	movs	r3, #129	@ 0x81
 80022f2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fc7c 	bl	8001bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc78 	bl	8001bf4 <ssd1306_WriteCommand>
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800231c:	23af      	movs	r3, #175	@ 0xaf
 800231e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <ssd1306_SetDisplayOn+0x38>)
 8002322:	2201      	movs	r2, #1
 8002324:	715a      	strb	r2, [r3, #5]
 8002326:	e004      	b.n	8002332 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002328:	23ae      	movs	r3, #174	@ 0xae
 800232a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <ssd1306_SetDisplayOn+0x38>)
 800232e:	2200      	movs	r2, #0
 8002330:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc5d 	bl	8001bf4 <ssd1306_WriteCommand>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000858 	.word	0x20000858

08002348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_MspInit+0x4c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <HAL_MspInit+0x4c>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_MspInit+0x4c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a08      	ldr	r2, [pc, #32]	@ (8002394 <HAL_MspInit+0x4c>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	@ 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <HAL_ADC_MspInit+0x7c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d127      	bne.n	800240a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a15      	ldr	r2, [pc, #84]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a0e      	ldr	r2, [pc, #56]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_ADC_MspInit+0x80>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <HAL_ADC_MspInit+0x84>)
 8002406:	f000 ff59 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	@ 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40012000 	.word	0x40012000
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000

08002420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	@ (80024a4 <HAL_I2C_MspInit+0x84>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12b      	bne.n	800249a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245e:	23c0      	movs	r3, #192	@ 0xc0
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002462:	2312      	movs	r3, #18
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800246e:	2304      	movs	r3, #4
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <HAL_I2C_MspInit+0x8c>)
 800247a:	f000 ff1f 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 8002488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_I2C_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40005400 	.word	0x40005400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <HAL_TIM_Encoder_MspInit+0x84>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d12b      	bne.n	800252a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a10      	ldr	r2, [pc, #64]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_TIM_Encoder_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QuadA_Pin|QuadB_Pin;
 800250a:	23c0      	movs	r3, #192	@ 0xc0
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251a:	2302      	movs	r3, #2
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	@ (800253c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002526:	f000 fec9 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	@ 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40000400 	.word	0x40000400
 8002538:	40023800 	.word	0x40023800
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <HAL_UART_MspInit+0x94>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d133      	bne.n	80025ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_UART_MspInit+0x98>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800259a:	230c      	movs	r3, #12
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025aa:	2307      	movs	r3, #7
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4809      	ldr	r0, [pc, #36]	@ (80025dc <HAL_UART_MspInit+0x9c>)
 80025b6:	f000 fe81 	bl	80032bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2026      	movs	r0, #38	@ 0x26
 80025c0:	f000 fdb3 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c4:	2026      	movs	r0, #38	@ 0x26
 80025c6:	f000 fdcc 	bl	8003162 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <NMI_Handler+0x4>

080025e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <UsageFault_Handler+0x4>

08002608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickCallbackClock();
 8002636:	f7fe fc79 	bl	8000f2c <SystickCallbackClock>
	Systick();
 800263a:	f7fe fc55 	bl	8000ee8 <Systick>
	SystickCallbackDelay();
 800263e:	f7fe fc61 	bl	8000f04 <SystickCallbackDelay>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002642:	f000 f9e1 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <USART2_IRQHandler+0x10>)
 8002652:	f002 fc43 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000410 	.word	0x20000410

08002660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_kill>:

int _kill(int pid, int sig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800267a:	f004 fa59 	bl	8006b30 <__errno>
 800267e:	4603      	mov	r3, r0
 8002680:	2216      	movs	r2, #22
 8002682:	601a      	str	r2, [r3, #0]
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_exit>:

void _exit (int status)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffe7 	bl	8002670 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026a2:	bf00      	nop
 80026a4:	e7fd      	b.n	80026a2 <_exit+0x12>

080026a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e00a      	b.n	80026ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b8:	f3af 8000 	nop.w
 80026bc:	4601      	mov	r1, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbf0      	blt.n	80026b8 <_read+0x12>
  }

  return len;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002708:	605a      	str	r2, [r3, #4]
  return 0;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_isatty>:

int _isatty(int file)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <_sbrk+0x5c>)
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <_sbrk+0x60>)
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <_sbrk+0x64>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <_sbrk+0x64>)
 8002766:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <_sbrk+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d207      	bcs.n	8002788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002778:	f004 f9da 	bl	8006b30 <__errno>
 800277c:	4603      	mov	r3, r0
 800277e:	220c      	movs	r2, #12
 8002780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	e009      	b.n	800279c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	4a05      	ldr	r2, [pc, #20]	@ (80027ac <_sbrk+0x64>)
 8002798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20020000 	.word	0x20020000
 80027a8:	00000400 	.word	0x00000400
 80027ac:	20000860 	.word	0x20000860
 80027b0:	20000ac8 	.word	0x20000ac8

080027b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <SystemInit+0x20>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <SystemInit+0x20>)
 80027c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <_write>:
#define rxBufferMax 255				 //수신버퍼의 최대크기
int rxBufferWrite; 					   //수신버퍼 쓰기 포인터
int rxBufferRead;						   //수신버퍼 읽기 포인터
uint8_t rxBuffer[rxBufferMax]; //수신버퍼

int _write(int file, char* p, int len){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <_write+0x28>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	230a      	movs	r3, #10
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	f002 fac4 	bl	8004d7c <HAL_UART_Transmit>
	return len;
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000864 	.word	0x20000864

08002804 <initUart>:

// uart장치의 초기화 함수 구현
void initUart(UART_HandleTypeDef *inHuart) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 800280c:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <initUart+0x34>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
	//수신인터럽트 설정
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <initUart+0x34>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4908      	ldr	r1, [pc, #32]	@ (800283c <initUart+0x38>)
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fb39 	bl	8004e92 <HAL_UART_Receive_IT>
	rxBufferRead = rxBufferWrite = 0;
 8002820:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <initUart+0x3c>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <initUart+0x3c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <initUart+0x40>)
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000864 	.word	0x20000864
 800283c:	20000868 	.word	0x20000868
 8002840:	2000086c 	.word	0x2000086c
 8002844:	20000870 	.word	0x20000870

08002848 <HAL_UART_RxCpltCallback>:

//문자수신 처리 함수 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	// 수신딘 문자를 버퍼에 저장하고 쓰기포인터의 값을 1증가
	rxBuffer[rxBufferWrite++] = rxChar;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_UART_RxCpltCallback+0x50>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4910      	ldr	r1, [pc, #64]	@ (8002898 <HAL_UART_RxCpltCallback+0x50>)
 8002858:	600a      	str	r2, [r1, #0]
 800285a:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_UART_RxCpltCallback+0x54>)
 800285c:	7811      	ldrb	r1, [r2, #0]
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_UART_RxCpltCallback+0x58>)
 8002860:	54d1      	strb	r1, [r2, r3]
	// 쓰기포인터의 값이 최대치에 도달하면 다시 0으로 초기화
	rxBufferWrite %= rxBufferMax;
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_UART_RxCpltCallback+0x50>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002868:	fb83 1302 	smull	r1, r3, r3, r2
 800286c:	4413      	add	r3, r2
 800286e:	11d9      	asrs	r1, r3, #7
 8002870:	17d3      	asrs	r3, r2, #31
 8002872:	1ac9      	subs	r1, r1, r3
 8002874:	460b      	mov	r3, r1
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	1a5b      	subs	r3, r3, r1
 800287a:	1ad1      	subs	r1, r2, r3
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_UART_RxCpltCallback+0x50>)
 800287e:	6019      	str	r1, [r3, #0]
	// 다음 문자 수신 인터럽트를 위하여 재 설정
			HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_UART_RxCpltCallback+0x60>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4905      	ldr	r1, [pc, #20]	@ (800289c <HAL_UART_RxCpltCallback+0x54>)
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fb02 	bl	8004e92 <HAL_UART_Receive_IT>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000086c 	.word	0x2000086c
 800289c:	20000868 	.word	0x20000868
 80028a0:	20000874 	.word	0x20000874
 80028a4:	80808081 	.word	0x80808081
 80028a8:	20000864 	.word	0x20000864

080028ac <getUart>:

// 버퍼에서 문자 꺼내오기
uint8_t getUart(){
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
	uint8_t result;
	// 수신된 문자 없음
	if(rxBufferWrite == rxBufferRead) return 0;
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <getUart+0x54>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <getUart+0x58>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d101      	bne.n	80028c2 <getUart+0x16>
 80028be:	2300      	movs	r3, #0
 80028c0:	e017      	b.n	80028f2 <getUart+0x46>
	//읽기 포인터가 가르키는 위치의 버퍼문자를 꺼내고, 읽기포인터를 1 증가
	result = rxBuffer[rxBufferRead++];
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <getUart+0x58>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <getUart+0x58>)
 80028ca:	600a      	str	r2, [r1, #0]
 80028cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <getUart+0x5c>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	71fb      	strb	r3, [r7, #7]
	//읽기포인터가 최대치에 도달하면 다시 0으로 초기화
	rxBufferRead %= rxBufferMax;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <getUart+0x58>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <getUart+0x60>)
 80028d8:	fb83 1302 	smull	r1, r3, r3, r2
 80028dc:	4413      	add	r3, r2
 80028de:	11d9      	asrs	r1, r3, #7
 80028e0:	17d3      	asrs	r3, r2, #31
 80028e2:	1ac9      	subs	r1, r1, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	1a5b      	subs	r3, r3, r1
 80028ea:	1ad1      	subs	r1, r2, r3
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <getUart+0x58>)
 80028ee:	6019      	str	r1, [r3, #0]
	return result;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	2000086c 	.word	0x2000086c
 8002904:	20000870 	.word	0x20000870
 8002908:	20000874 	.word	0x20000874
 800290c:	80808081 	.word	0x80808081

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002914:	f7ff ff4e 	bl	80027b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	@ (8002950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	@ (800295c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293e:	f004 f8fd 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002942:	f7fe ff69 	bl	8001818 <main>
  bx  lr    
 8002946:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002954:	0800c260 	.word	0x0800c260
  ldr r2, =_sbss
 8002958:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800295c:	20000ac4 	.word	0x20000ac4

08002960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 fbc1 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fcd6 	bl	8002348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fbd9 	bl	800317e <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 fba1 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	@ (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000014 	.word	0x20000014
 8002a00:	2000001c 	.word	0x2000001c
 8002a04:	20000018 	.word	0x20000018

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000001c 	.word	0x2000001c
 8002a2c:	20000974 	.word	0x20000974

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000974 	.word	0x20000974

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000001c 	.word	0x2000001c

08002a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e033      	b.n	8002b0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fc72 	bl	8002398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ad6:	f023 0302 	bic.w	r3, r3, #2
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f94a 	bl	8002d7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002afe:	e001      	b.n	8002b04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e113      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x244>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d925      	bls.n	8002b90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68d9      	ldr	r1, [r3, #12]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	3b1e      	subs	r3, #30
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43da      	mvns	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	400a      	ands	r2, r1
 8002b68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68d9      	ldr	r1, [r3, #12]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4403      	add	r3, r0
 8002b82:	3b1e      	subs	r3, #30
 8002b84:	409a      	lsls	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	e022      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6919      	ldr	r1, [r3, #16]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4403      	add	r3, r0
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d824      	bhi.n	8002c28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b05      	subs	r3, #5
 8002bf0:	221f      	movs	r2, #31
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b05      	subs	r3, #5
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c26:	e04c      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d824      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b23      	subs	r3, #35	@ 0x23
 8002c42:	221f      	movs	r2, #31
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	400a      	ands	r2, r1
 8002c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b23      	subs	r3, #35	@ 0x23
 8002c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c78:	e023      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b41      	subs	r3, #65	@ 0x41
 8002c8c:	221f      	movs	r2, #31
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	400a      	ands	r2, r1
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b41      	subs	r3, #65	@ 0x41
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc2:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <HAL_ADC_ConfigChannel+0x250>)
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_ADC_ConfigChannel+0x254>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10f      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b12      	cmp	r3, #18
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_ADC_ConfigChannel+0x254>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12b      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x23a>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <HAL_ADC_ConfigChannel+0x258>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x1f4>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b11      	cmp	r3, #17
 8002d0a:	d122      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_ADC_ConfigChannel+0x258>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_ADC_ConfigChannel+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <HAL_ADC_ConfigChannel+0x260>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	0c9a      	lsrs	r2, r3, #18
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d44:	e002      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40012300 	.word	0x40012300
 8002d6c:	40012000 	.word	0x40012000
 8002d70:	10000012 	.word	0x10000012
 8002d74:	20000014 	.word	0x20000014
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d84:	4b79      	ldr	r3, [pc, #484]	@ (8002f6c <ADC_Init+0x1f0>)
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	4a58      	ldr	r2, [pc, #352]	@ (8002f70 <ADC_Init+0x1f4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e00f      	b.n	8002e7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0202 	bic.w	r2, r2, #2
 8002e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
 8002e94:	005a      	lsls	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	035a      	lsls	r2, r3, #13
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e007      	b.n	8002ef0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	051a      	lsls	r2, r3, #20
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f32:	025a      	lsls	r2, r3, #9
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	029a      	lsls	r2, r3, #10
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	0f000001 	.word	0x0f000001

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	@ (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	@ (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff fc44 	bl	8002a30 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d008      	beq.n	80031c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e052      	b.n	800326e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0216 	bic.w	r2, r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HAL_DMA_Abort+0x62>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0208 	bic.w	r2, r2, #8
 8003206:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003218:	e013      	b.n	8003242 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321a:	f7ff fc09 	bl	8002a30 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b05      	cmp	r3, #5
 8003226:	d90c      	bls.n	8003242 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e015      	b.n	800326e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e4      	bne.n	800321a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	223f      	movs	r2, #63	@ 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2280      	movs	r2, #128	@ 0x80
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e00c      	b.n	80032ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	@ 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e159      	b.n	800358c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 8148 	bne.w	8003586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d005      	beq.n	800330e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	2b02      	cmp	r3, #2
 800330c:	d130      	bne.n	8003370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003344:	2201      	movs	r2, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0201 	and.w	r2, r3, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d017      	beq.n	80033ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d123      	bne.n	8003400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a2 	beq.w	8003586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b57      	ldr	r3, [pc, #348]	@ (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	4a56      	ldr	r2, [pc, #344]	@ (80035a4 <HAL_GPIO_Init+0x2e8>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003450:	6453      	str	r3, [r2, #68]	@ 0x44
 8003452:	4b54      	ldr	r3, [pc, #336]	@ (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345e:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <HAL_GPIO_Init+0x2f0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x202>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <HAL_GPIO_Init+0x2f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x1fe>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a47      	ldr	r2, [pc, #284]	@ (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x1fa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a46      	ldr	r2, [pc, #280]	@ (80035b8 <HAL_GPIO_Init+0x2fc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x1f6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a45      	ldr	r2, [pc, #276]	@ (80035bc <HAL_GPIO_Init+0x300>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x1f2>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e008      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e006      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b2:	2303      	movs	r3, #3
 80034b4:	e004      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034be:	2300      	movs	r3, #0
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f002 0203 	and.w	r2, r2, #3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4093      	lsls	r3, r2
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d0:	4935      	ldr	r1, [pc, #212]	@ (80035a8 <HAL_GPIO_Init+0x2ec>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034de:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003502:	4a2f      	ldr	r2, [pc, #188]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003508:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800352c:	4a24      	ldr	r2, [pc, #144]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003532:	4b23      	ldr	r3, [pc, #140]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003556:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355c:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003580:	4a0f      	ldr	r2, [pc, #60]	@ (80035c0 <HAL_GPIO_Init+0x304>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3301      	adds	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f67f aea2 	bls.w	80032d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3724      	adds	r7, #36	@ 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e001      	b.n	80035e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e12b      	b.n	8003892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fee6 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800367a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800368c:	f001 f8aa 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a81      	ldr	r2, [pc, #516]	@ (800389c <HAL_I2C_Init+0x274>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d807      	bhi.n	80036ac <HAL_I2C_Init+0x84>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a80      	ldr	r2, [pc, #512]	@ (80038a0 <HAL_I2C_Init+0x278>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e006      	b.n	80036ba <HAL_I2C_Init+0x92>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a7d      	ldr	r2, [pc, #500]	@ (80038a4 <HAL_I2C_Init+0x27c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0e7      	b.n	8003892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a78      	ldr	r2, [pc, #480]	@ (80038a8 <HAL_I2C_Init+0x280>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	@ (800389c <HAL_I2C_Init+0x274>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <HAL_I2C_Init+0xd4>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3301      	adds	r3, #1
 80036fa:	e009      	b.n	8003710 <HAL_I2C_Init+0xe8>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	4a69      	ldr	r2, [pc, #420]	@ (80038ac <HAL_I2C_Init+0x284>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	3301      	adds	r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	495c      	ldr	r1, [pc, #368]	@ (800389c <HAL_I2C_Init+0x274>)
 800372c:	428b      	cmp	r3, r1
 800372e:	d819      	bhi.n	8003764 <HAL_I2C_Init+0x13c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1e59      	subs	r1, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fbb1 f3f3 	udiv	r3, r1, r3
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003744:	400b      	ands	r3, r1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_I2C_Init+0x138>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e59      	subs	r1, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fbb1 f3f3 	udiv	r3, r1, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	e051      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003760:	2304      	movs	r3, #4
 8003762:	e04f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <HAL_I2C_Init+0x168>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e012      	b.n	80037b6 <HAL_I2C_Init+0x18e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e58      	subs	r0, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	0099      	lsls	r1, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Init+0x196>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10e      	bne.n	80037e4 <HAL_I2C_Init+0x1bc>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e58      	subs	r0, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e2:	e00f      	b.n	8003804 <HAL_I2C_Init+0x1dc>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	6809      	ldr	r1, [r1, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6911      	ldr	r1, [r2, #16]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	000186a0 	.word	0x000186a0
 80038a0:	001e847f 	.word	0x001e847f
 80038a4:	003d08ff 	.word	0x003d08ff
 80038a8:	431bde83 	.word	0x431bde83
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ca:	f7ff f8b1 	bl	8002a30 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	f040 80d9 	bne.w	8003a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2319      	movs	r3, #25
 80038e4:	2201      	movs	r2, #1
 80038e6:	496d      	ldr	r1, [pc, #436]	@ (8003a9c <HAL_I2C_Mem_Write+0x1ec>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f971 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0cc      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Mem_Write+0x56>
 8003902:	2302      	movs	r3, #2
 8003904:	e0c5      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d007      	beq.n	800392c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2221      	movs	r2, #33	@ 0x21
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800396c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396e:	88f8      	ldrh	r0, [r7, #6]
 8003970:	893a      	ldrh	r2, [r7, #8]
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4603      	mov	r3, r0
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f890 	bl	8003aa4 <I2C_RequestMemoryWrite>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d052      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e081      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa36 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d107      	bne.n	80039b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06b      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d11b      	bne.n	8003a30 <HAL_I2C_Mem_Write+0x180>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d017      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1aa      	bne.n	800398e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fa29 	bl	8003e94 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d107      	bne.n	8003a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e016      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	00100002 	.word	0x00100002
 8003aa0:	ffff0000 	.word	0xffff0000

08003aa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f878 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af4:	d103      	bne.n	8003afe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e05f      	b.n	8003bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	492d      	ldr	r1, [pc, #180]	@ (8003bcc <I2C_RequestMemoryWrite+0x128>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8d3 	bl	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04c      	b.n	8003bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f95e 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02b      	b.n	8003bc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	611a      	str	r2, [r3, #16]
 8003b7a:	e021      	b.n	8003bc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b7c:	893b      	ldrh	r3, [r7, #8]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8c:	6a39      	ldr	r1, [r7, #32]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f938 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d107      	bne.n	8003bb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e005      	b.n	8003bc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb6:	893b      	ldrh	r3, [r7, #8]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	00010002 	.word	0x00010002

08003bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	e048      	b.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d044      	beq.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe ff21 	bl	8002a30 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d139      	bne.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10d      	bne.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	e00c      	b.n	8003c40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d116      	bne.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e023      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10d      	bne.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	e00c      	b.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d093      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd2:	e071      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d123      	bne.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e067      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d041      	beq.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe fe7c 	bl	8002a30 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d136      	bne.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10c      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e00b      	b.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e021      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10c      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e00b      	b.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f af6d 	bne.w	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	e034      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f886 	bl	8003f24 <I2C_IsAcknowledgeFailed>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e034      	b.n	8003e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d028      	beq.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe fe01 	bl	8002a30 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b80      	cmp	r3, #128	@ 0x80
 8003e88:	d1c3      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea0:	e034      	b.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f83e 	bl	8003f24 <I2C_IsAcknowledgeFailed>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e034      	b.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d028      	beq.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe fdb9 	bl	8002a30 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11d      	bne.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d016      	beq.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e007      	b.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d1c3      	bne.n	8003ea2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d11b      	bne.n	8003f74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e267      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d075      	beq.n	800408e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b85      	ldr	r3, [pc, #532]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d112      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b82      	ldr	r3, [pc, #520]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05b      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d157      	bne.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e242      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x74>
 8003fea:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x98>
 8004002:	4b70      	ldr	r3, [pc, #448]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6f      	ldr	r2, [pc, #444]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6d      	ldr	r3, [pc, #436]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6c      	ldr	r2, [pc, #432]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 800401c:	4b69      	ldr	r3, [pc, #420]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a65      	ldr	r2, [pc, #404]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fcf8 	bl	8002a30 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fe fcf4 	bl	8002a30 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e207      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b5b      	ldr	r3, [pc, #364]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xc0>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fce4 	bl	8002a30 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fce0 	bl	8002a30 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1f3      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b51      	ldr	r3, [pc, #324]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800409a:	4b4a      	ldr	r3, [pc, #296]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b41      	ldr	r3, [pc, #260]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1c7      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3b      	ldr	r3, [pc, #236]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4937      	ldr	r1, [pc, #220]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b34      	ldr	r3, [pc, #208]	@ (80041c8 <HAL_RCC_OscConfig+0x244>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe fc99 	bl	8002a30 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe fc95 	bl	8002a30 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1a8      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b28      	ldr	r3, [pc, #160]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4925      	ldr	r1, [pc, #148]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <HAL_RCC_OscConfig+0x244>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fc78 	bl	8002a30 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004144:	f7fe fc74 	bl	8002a30 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e187      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_RCC_OscConfig+0x248>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe fc58 	bl	8002a30 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe fc54 	bl	8002a30 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e167      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x200>
 80041a2:	e01b      	b.n	80041dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_OscConfig+0x248>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe fc41 	bl	8002a30 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00e      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe fc3d 	bl	8002a30 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d907      	bls.n	80041d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e150      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	42470000 	.word	0x42470000
 80041cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	4b88      	ldr	r3, [pc, #544]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ea      	bne.n	80041b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8097 	beq.w	8004318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ee:	4b81      	ldr	r3, [pc, #516]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	4a7c      	ldr	r2, [pc, #496]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	@ 0x40
 800420a:	4b7a      	ldr	r3, [pc, #488]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	4b77      	ldr	r3, [pc, #476]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d118      	bne.n	8004258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004226:	4b74      	ldr	r3, [pc, #464]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a73      	ldr	r2, [pc, #460]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004232:	f7fe fbfd 	bl	8002a30 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fe fbf9 	bl	8002a30 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e10c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x2ea>
 8004260:	4b64      	ldr	r3, [pc, #400]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	4a63      	ldr	r2, [pc, #396]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	@ 0x70
 800426c:	e01c      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x30c>
 8004276:	4b5f      	ldr	r3, [pc, #380]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a5e      	ldr	r2, [pc, #376]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
 8004282:	4b5c      	ldr	r3, [pc, #368]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a5b      	ldr	r2, [pc, #364]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 8004290:	4b58      	ldr	r3, [pc, #352]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	4a57      	ldr	r2, [pc, #348]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	@ 0x70
 800429c:	4b55      	ldr	r3, [pc, #340]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	4a54      	ldr	r2, [pc, #336]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 0304 	bic.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe fbbe 	bl	8002a30 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe fbba 	bl	8002a30 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0cb      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	4b49      	ldr	r3, [pc, #292]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ee      	beq.n	80042b8 <HAL_RCC_OscConfig+0x334>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042dc:	f7fe fba8 	bl	8002a30 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fe fba4 	bl	8002a30 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0b5      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fa:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ee      	bne.n	80042e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a1 	beq.w	8004464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004322:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d05c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d141      	bne.n	80043ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fb78 	bl	8002a30 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe fb74 	bl	8002a30 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e087      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	491b      	ldr	r1, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fb4d 	bl	8002a30 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe fb49 	bl	8002a30 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e05c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ac:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x416>
 80043b8:	e054      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b10      	ldr	r3, [pc, #64]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fb36 	bl	8002a30 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe fb32 	bl	8002a30 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e045      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x444>
 80043e6:	e03d      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e038      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_RCC_OscConfig+0x4ec>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d028      	beq.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d121      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d11a      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	4293      	cmp	r3, r2
 800443a:	d111      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cc      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b68      	ldr	r3, [pc, #416]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b65      	ldr	r3, [pc, #404]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b63      	ldr	r3, [pc, #396]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0b8      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b59      	ldr	r3, [pc, #356]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a58      	ldr	r2, [pc, #352]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e0:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a52      	ldr	r2, [pc, #328]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b50      	ldr	r3, [pc, #320]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	494d      	ldr	r1, [pc, #308]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d044      	beq.n	8004594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e067      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4934      	ldr	r1, [pc, #208]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004564:	f7fe fa64 	bl	8002a30 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe fa60 	bl	8002a30 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e04f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b25      	ldr	r3, [pc, #148]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b22      	ldr	r3, [pc, #136]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b20      	ldr	r3, [pc, #128]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e032      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4916      	ldr	r1, [pc, #88]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	490e      	ldr	r1, [pc, #56]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045fa:	f000 f821 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490a      	ldr	r1, [pc, #40]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004616:	4b09      	ldr	r3, [pc, #36]	@ (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe f9c4 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	0800bcec 	.word	0x0800bcec
 8004638:	20000014 	.word	0x20000014
 800463c:	20000018 	.word	0x20000018

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004644:	b090      	sub	sp, #64	@ 0x40
 8004646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004658:	4b59      	ldr	r3, [pc, #356]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d00d      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x40>
 8004664:	2b08      	cmp	r3, #8
 8004666:	f200 80a1 	bhi.w	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x34>
 800466e:	2b04      	cmp	r3, #4
 8004670:	d003      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x3a>
 8004672:	e09b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004678:	e09b      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800467a:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800467e:	e098      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004680:	4b4f      	ldr	r3, [pc, #316]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800468a:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004696:	4b4a      	ldr	r3, [pc, #296]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046a8:	2100      	movs	r1, #0
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ac:	fb03 f201 	mul.w	r2, r3, r1
 80046b0:	2300      	movs	r3, #0
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	4a43      	ldr	r2, [pc, #268]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ba:	fba0 1202 	umull	r1, r2, r0, r2
 80046be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c0:	460a      	mov	r2, r1
 80046c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80046c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c6:	4413      	add	r3, r2
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046cc:	2200      	movs	r2, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	61fa      	str	r2, [r7, #28]
 80046d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046da:	f7fc fa8d 	bl	8000bf8 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4613      	mov	r3, r2
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	e053      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e8:	4b35      	ldr	r3, [pc, #212]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	2200      	movs	r2, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	617a      	str	r2, [r7, #20]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046fa:	f04f 0b00 	mov.w	fp, #0
 80046fe:	4652      	mov	r2, sl
 8004700:	465b      	mov	r3, fp
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	0159      	lsls	r1, r3, #5
 800470c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004710:	0150      	lsls	r0, r2, #5
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	ebb2 080a 	subs.w	r8, r2, sl
 800471a:	eb63 090b 	sbc.w	r9, r3, fp
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800472a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800472e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004732:	ebb2 0408 	subs.w	r4, r2, r8
 8004736:	eb63 0509 	sbc.w	r5, r3, r9
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	00eb      	lsls	r3, r5, #3
 8004744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004748:	00e2      	lsls	r2, r4, #3
 800474a:	4614      	mov	r4, r2
 800474c:	461d      	mov	r5, r3
 800474e:	eb14 030a 	adds.w	r3, r4, sl
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	eb45 030b 	adc.w	r3, r5, fp
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004766:	4629      	mov	r1, r5
 8004768:	028b      	lsls	r3, r1, #10
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004770:	4621      	mov	r1, r4
 8004772:	028a      	lsls	r2, r1, #10
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477a:	2200      	movs	r2, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	60fa      	str	r2, [r7, #12]
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	f7fc fa38 	bl	8000bf8 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004790:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80047a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3740      	adds	r7, #64	@ 0x40
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	017d7840 	.word	0x017d7840

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000014 	.word	0x20000014

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a9b      	lsrs	r3, r3, #10
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	0800bcfc 	.word	0x0800bcfc

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004810:	f7ff ffdc 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0b5b      	lsrs	r3, r3, #13
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	@ (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	0800bcfc 	.word	0x0800bcfc

08004834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e097      	b.n	8004978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fd fe27 	bl	80024b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004878:	f023 0307 	bic.w	r3, r3, #7
 800487c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f000 f907 	bl	8004a9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	4313      	orrs	r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048d4:	f023 030c 	bic.w	r3, r3, #12
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	4313      	orrs	r3, r2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	031b      	lsls	r3, r3, #12
 8004904:	4313      	orrs	r3, r2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	4313      	orrs	r3, r2
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b6:	7b7b      	ldrb	r3, [r7, #13]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e069      	b.n	8004a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d0:	e031      	b.n	8004a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d110      	bne.n	80049fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d8:	7bbb      	ldrb	r3, [r7, #14]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049de:	7b3b      	ldrb	r3, [r7, #12]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e055      	b.n	8004a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f8:	e01d      	b.n	8004a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d108      	bne.n	8004a12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a00:	7bbb      	ldrb	r3, [r7, #14]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a06:	7b7b      	ldrb	r3, [r7, #13]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d102      	bne.n	8004a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a0c:	7b3b      	ldrb	r3, [r7, #12]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e03e      	b.n	8004a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0xc4>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d008      	beq.n	8004a54 <HAL_TIM_Encoder_Start+0xd4>
 8004a42:	e00f      	b.n	8004a64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f8b1 	bl	8004bb4 <TIM_CCxChannelCmd>
      break;
 8004a52:	e016      	b.n	8004a82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f8a9 	bl	8004bb4 <TIM_CCxChannelCmd>
      break;
 8004a62:	e00e      	b.n	8004a82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f8a1 	bl	8004bb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	2104      	movs	r1, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f89a 	bl	8004bb4 <TIM_CCxChannelCmd>
      break;
 8004a80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3a      	ldr	r2, [pc, #232]	@ (8004b98 <TIM_Base_SetConfig+0xfc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a37      	ldr	r2, [pc, #220]	@ (8004b9c <TIM_Base_SetConfig+0x100>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a36      	ldr	r2, [pc, #216]	@ (8004ba0 <TIM_Base_SetConfig+0x104>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x38>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a35      	ldr	r2, [pc, #212]	@ (8004ba4 <TIM_Base_SetConfig+0x108>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b98 <TIM_Base_SetConfig+0xfc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a28      	ldr	r2, [pc, #160]	@ (8004b9c <TIM_Base_SetConfig+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a27      	ldr	r2, [pc, #156]	@ (8004ba0 <TIM_Base_SetConfig+0x104>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a26      	ldr	r2, [pc, #152]	@ (8004ba4 <TIM_Base_SetConfig+0x108>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a25      	ldr	r2, [pc, #148]	@ (8004ba8 <TIM_Base_SetConfig+0x10c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a24      	ldr	r2, [pc, #144]	@ (8004bac <TIM_Base_SetConfig+0x110>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a23      	ldr	r2, [pc, #140]	@ (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b98 <TIM_Base_SetConfig+0xfc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d103      	bne.n	8004b6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d105      	bne.n	8004b8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800

08004bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e050      	b.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d013      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a16      	ldr	r2, [pc, #88]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a13      	ldr	r2, [pc, #76]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40014000 	.word	0x40014000

08004cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e042      	b.n	8004d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fc1c 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	@ 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fdbd 	bl	80058a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d175      	bne.n	8004e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Transmit+0x2c>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e06e      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2221      	movs	r2, #33	@ 0x21
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dba:	f7fd fe39 	bl	8002a30 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df0:	e02e      	b.n	8004e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fb1f 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e03a      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e007      	b.n	8004e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1cb      	bne.n	8004df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2140      	movs	r1, #64	@ 0x40
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 faeb 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e006      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d112      	bne.n	8004ed2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_UART_Receive_IT+0x26>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e00b      	b.n	8004ed4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fb12 	bl	80054f2 <UART_Start_Receive_IT>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	e000      	b.n	8004ed4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b0ba      	sub	sp, #232	@ 0xe8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fbf2 	bl	8005724 <UART_Receive_IT>
      return;
 8004f40:	e25b      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80de 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d1 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	f043 0202 	orr.w	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
 8004fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	f043 0208 	orr.w	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 81f2 	beq.w	80053f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb7d 	bl	8005724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <HAL_UART_IRQHandler+0x17a>
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04f      	beq.n	80050f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa85 	bl	8005566 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d141      	bne.n	80050ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800509a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1d9      	bne.n	800506a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	4a7e      	ldr	r2, [pc, #504]	@ (80052bc <HAL_UART_IRQHandler+0x3e0>)
 80050c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe f8d3 	bl	8003276 <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00e      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f994 	bl	8005414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00a      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f990 	bl	8005414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e006      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f98c 	bl	8005414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005102:	e175      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	bf00      	nop
    return;
 8005106:	e173      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 814f 	bne.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8148 	beq.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8141 	beq.w	80053b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b40      	cmp	r3, #64	@ 0x40
 8005150:	f040 80b6 	bne.w	80052c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8145 	beq.w	80053f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005172:	429a      	cmp	r2, r3
 8005174:	f080 813e 	bcs.w	80053f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800517e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518a:	f000 8088 	beq.w	800529e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005202:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800526c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005280:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005282:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005286:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800528e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd ff7c 	bl	8003196 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8b7 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ba:	e09b      	b.n	80053f4 <HAL_UART_IRQHandler+0x518>
 80052bc:	0800562d 	.word	0x0800562d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 808e 	beq.w	80053f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8089 	beq.w	80053f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800530a:	647a      	str	r2, [r7, #68]	@ 0x44
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	623b      	str	r3, [r7, #32]
   return(result);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005342:	633a      	str	r2, [r7, #48]	@ 0x30
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e3      	bne.n	800531e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60fb      	str	r3, [r7, #12]
   return(result);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e3      	bne.n	8005364 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f83d 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ae:	e023      	b.n	80053f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <HAL_UART_IRQHandler+0x4f4>
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f943 	bl	8005654 <UART_Transmit_IT>
    return;
 80053ce:	e014      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_UART_IRQHandler+0x51e>
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f983 	bl	80056f4 <UART_EndTransmit_IT>
    return;
 80053ee:	e004      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
    return;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
      return;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_UART_IRQHandler+0x51e>
      return;
 80053f8:	bf00      	nop
  }
}
 80053fa:	37e8      	adds	r7, #232	@ 0xe8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005450:	e03b      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d037      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fd fae9 	bl	8002a30 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <UART_WaitOnFlagUntilTimeout+0x30>
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e03a      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d023      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b80      	cmp	r3, #128	@ 0x80
 8005486:	d020      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	d01d      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d116      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f857 	bl	8005566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2208      	movs	r2, #8
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e00f      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d0b4      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2222      	movs	r2, #34	@ 0x22
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005536:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0220 	orr.w	r2, r2, #32
 8005556:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005566:	b480      	push	{r7}
 8005568:	b095      	sub	sp, #84	@ 0x54
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800558e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d119      	bne.n	8005612 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 0310 	bic.w	r3, r3, #16
 80055f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055fe:	61ba      	str	r2, [r7, #24]
 8005600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e5      	bne.n	80055de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005620:	bf00      	nop
 8005622:	3754      	adds	r7, #84	@ 0x54
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff fee4 	bl	8005414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b21      	cmp	r3, #33	@ 0x21
 8005666:	d13e      	bne.n	80056e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005670:	d114      	bne.n	800569c <UART_Transmit_IT+0x48>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d110      	bne.n	800569c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]
 800569a:	e008      	b.n	80056ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	1c59      	adds	r1, r3, #1
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6211      	str	r1, [r2, #32]
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4619      	mov	r1, r3
 80056bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fe73 	bl	8005400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	@ 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b22      	cmp	r3, #34	@ 0x22
 8005736:	f040 80ae 	bne.w	8005896 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005742:	d117      	bne.n	8005774 <UART_Receive_IT+0x50>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d113      	bne.n	8005774 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	b29a      	uxth	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28
 8005772:	e026      	b.n	80057c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	d007      	beq.n	8005798 <UART_Receive_IT+0x74>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <UART_Receive_IT+0x82>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e008      	b.n	80057b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4619      	mov	r1, r3
 80057d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d15d      	bne.n	8005892 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0220 	bic.w	r2, r2, #32
 80057e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d135      	bne.n	8005888 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f023 0310 	bic.w	r3, r3, #16
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005842:	623a      	str	r2, [r7, #32]
 8005844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d10a      	bne.n	800587a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fdd1 	bl	8005428 <HAL_UARTEx_RxEventCallback>
 8005886:	e002      	b.n	800588e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc ffdd 	bl	8002848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e002      	b.n	8005898 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3730      	adds	r7, #48	@ 0x30
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a4:	b0c0      	sub	sp, #256	@ 0x100
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	68d9      	ldr	r1, [r3, #12]
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	ea40 0301 	orr.w	r3, r0, r1
 80058c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	431a      	orrs	r2, r3
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058f8:	f021 010c 	bic.w	r1, r1, #12
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005906:	430b      	orrs	r3, r1
 8005908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	ea40 0301 	orr.w	r3, r0, r1
 8005926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b8f      	ldr	r3, [pc, #572]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005930:	429a      	cmp	r2, r3
 8005932:	d005      	beq.n	8005940 <UART_SetConfig+0xa0>
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b70 <UART_SetConfig+0x2d0>)
 800593c:	429a      	cmp	r2, r3
 800593e:	d104      	bne.n	800594a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe ff64 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8005944:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005948:	e003      	b.n	8005952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fe ff4b 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 800594e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595c:	f040 810c 	bne.w	8005b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800596e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	1891      	adds	r1, r2, r2
 8005978:	65b9      	str	r1, [r7, #88]	@ 0x58
 800597a:	415b      	adcs	r3, r3
 800597c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800597e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005982:	4621      	mov	r1, r4
 8005984:	eb12 0801 	adds.w	r8, r2, r1
 8005988:	4629      	mov	r1, r5
 800598a:	eb43 0901 	adc.w	r9, r3, r1
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800599e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a2:	4690      	mov	r8, r2
 80059a4:	4699      	mov	r9, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	eb18 0303 	adds.w	r3, r8, r3
 80059ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059b0:	462b      	mov	r3, r5
 80059b2:	eb49 0303 	adc.w	r3, r9, r3
 80059b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059ce:	460b      	mov	r3, r1
 80059d0:	18db      	adds	r3, r3, r3
 80059d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d4:	4613      	mov	r3, r2
 80059d6:	eb42 0303 	adc.w	r3, r2, r3
 80059da:	657b      	str	r3, [r7, #84]	@ 0x54
 80059dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059e4:	f7fb f908 	bl	8000bf8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b61      	ldr	r3, [pc, #388]	@ (8005b74 <UART_SetConfig+0x2d4>)
 80059ee:	fba3 2302 	umull	r2, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	011c      	lsls	r4, r3, #4
 80059f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	1891      	adds	r1, r2, r2
 8005a0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a10:	415b      	adcs	r3, r3
 8005a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a18:	4641      	mov	r1, r8
 8005a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a1e:	4649      	mov	r1, r9
 8005a20:	eb43 0b01 	adc.w	fp, r3, r1
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a38:	4692      	mov	sl, r2
 8005a3a:	469b      	mov	fp, r3
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a46:	464b      	mov	r3, r9
 8005a48:	eb4b 0303 	adc.w	r3, fp, r3
 8005a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a7a:	f7fb f8bd 	bl	8000bf8 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	4b3b      	ldr	r3, [pc, #236]	@ (8005b74 <UART_SetConfig+0x2d4>)
 8005a86:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2264      	movs	r2, #100	@ 0x64
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	1acb      	subs	r3, r1, r3
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a9a:	4b36      	ldr	r3, [pc, #216]	@ (8005b74 <UART_SetConfig+0x2d4>)
 8005a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005aa8:	441c      	add	r4, r3
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005abc:	4642      	mov	r2, r8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	1891      	adds	r1, r2, r2
 8005ac2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ac4:	415b      	adcs	r3, r3
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005acc:	4641      	mov	r1, r8
 8005ace:	1851      	adds	r1, r2, r1
 8005ad0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	414b      	adcs	r3, r1
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	00cb      	lsls	r3, r1, #3
 8005ae8:	4651      	mov	r1, sl
 8005aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aee:	4651      	mov	r1, sl
 8005af0:	00ca      	lsls	r2, r1, #3
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	4642      	mov	r2, r8
 8005afa:	189b      	adds	r3, r3, r2
 8005afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b00:	464b      	mov	r3, r9
 8005b02:	460a      	mov	r2, r1
 8005b04:	eb42 0303 	adc.w	r3, r2, r3
 8005b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b20:	460b      	mov	r3, r1
 8005b22:	18db      	adds	r3, r3, r3
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b26:	4613      	mov	r3, r2
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b36:	f7fb f85f 	bl	8000bf8 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <UART_SetConfig+0x2d4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	@ 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	3332      	adds	r3, #50	@ 0x32
 8005b52:	4a08      	ldr	r2, [pc, #32]	@ (8005b74 <UART_SetConfig+0x2d4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 0207 	and.w	r2, r3, #7
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4422      	add	r2, r4
 8005b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b68:	e106      	b.n	8005d78 <UART_SetConfig+0x4d8>
 8005b6a:	bf00      	nop
 8005b6c:	40011000 	.word	0x40011000
 8005b70:	40011400 	.word	0x40011400
 8005b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	1891      	adds	r1, r2, r2
 8005b90:	6239      	str	r1, [r7, #32]
 8005b92:	415b      	adcs	r3, r3
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	1854      	adds	r4, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb43 0501 	adc.w	r5, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	00eb      	lsls	r3, r5, #3
 8005bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb2:	00e2      	lsls	r2, r4, #3
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	461d      	mov	r5, r3
 8005bb8:	4643      	mov	r3, r8
 8005bba:	18e3      	adds	r3, r4, r3
 8005bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	eb45 0303 	adc.w	r3, r5, r3
 8005bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005be6:	4629      	mov	r1, r5
 8005be8:	008b      	lsls	r3, r1, #2
 8005bea:	4621      	mov	r1, r4
 8005bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	008a      	lsls	r2, r1, #2
 8005bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bf8:	f7fa fffe 	bl	8000bf8 <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4b60      	ldr	r3, [pc, #384]	@ (8005d84 <UART_SetConfig+0x4e4>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	011c      	lsls	r4, r3, #4
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	61b9      	str	r1, [r7, #24]
 8005c24:	415b      	adcs	r3, r3
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	1851      	adds	r1, r2, r1
 8005c30:	6139      	str	r1, [r7, #16]
 8005c32:	4649      	mov	r1, r9
 8005c34:	414b      	adcs	r3, r1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c44:	4659      	mov	r1, fp
 8005c46:	00cb      	lsls	r3, r1, #3
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4e:	4651      	mov	r1, sl
 8005c50:	00ca      	lsls	r2, r1, #3
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	4642      	mov	r2, r8
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c60:	464b      	mov	r3, r9
 8005c62:	460a      	mov	r2, r1
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c84:	4649      	mov	r1, r9
 8005c86:	008b      	lsls	r3, r1, #2
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c8e:	4641      	mov	r1, r8
 8005c90:	008a      	lsls	r2, r1, #2
 8005c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c96:	f7fa ffaf 	bl	8000bf8 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4b38      	ldr	r3, [pc, #224]	@ (8005d84 <UART_SetConfig+0x4e4>)
 8005ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2264      	movs	r2, #100	@ 0x64
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	1acb      	subs	r3, r1, r3
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	3332      	adds	r3, #50	@ 0x32
 8005cb4:	4a33      	ldr	r2, [pc, #204]	@ (8005d84 <UART_SetConfig+0x4e4>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc0:	441c      	add	r4, r3
 8005cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ccc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	1851      	adds	r1, r2, r1
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	414b      	adcs	r3, r1
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	00cb      	lsls	r3, r1, #3
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d02:	4651      	mov	r1, sl
 8005d04:	00ca      	lsls	r2, r1, #3
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d12:	464b      	mov	r3, r9
 8005d14:	460a      	mov	r2, r1
 8005d16:	eb42 0303 	adc.w	r3, r2, r3
 8005d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d34:	4649      	mov	r1, r9
 8005d36:	008b      	lsls	r3, r1, #2
 8005d38:	4641      	mov	r1, r8
 8005d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d3e:	4641      	mov	r1, r8
 8005d40:	008a      	lsls	r2, r1, #2
 8005d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d46:	f7fa ff57 	bl	8000bf8 <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <UART_SetConfig+0x4e4>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	2164      	movs	r1, #100	@ 0x64
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	3332      	adds	r3, #50	@ 0x32
 8005d62:	4a08      	ldr	r2, [pc, #32]	@ (8005d84 <UART_SetConfig+0x4e4>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4422      	add	r2, r4
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d84:	51eb851f 	.word	0x51eb851f

08005d88 <__cvt>:
 8005d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	ec57 6b10 	vmov	r6, r7, d0
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4619      	mov	r1, r3
 8005d96:	463b      	mov	r3, r7
 8005d98:	bfbb      	ittet	lt
 8005d9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d9e:	461f      	movlt	r7, r3
 8005da0:	2300      	movge	r3, #0
 8005da2:	232d      	movlt	r3, #45	@ 0x2d
 8005da4:	700b      	strb	r3, [r1, #0]
 8005da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005dac:	4691      	mov	r9, r2
 8005dae:	f023 0820 	bic.w	r8, r3, #32
 8005db2:	bfbc      	itt	lt
 8005db4:	4632      	movlt	r2, r6
 8005db6:	4616      	movlt	r6, r2
 8005db8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dbc:	d005      	beq.n	8005dca <__cvt+0x42>
 8005dbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005dc2:	d100      	bne.n	8005dc6 <__cvt+0x3e>
 8005dc4:	3401      	adds	r4, #1
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	e000      	b.n	8005dcc <__cvt+0x44>
 8005dca:	2103      	movs	r1, #3
 8005dcc:	ab03      	add	r3, sp, #12
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	ab02      	add	r3, sp, #8
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	ec47 6b10 	vmov	d0, r6, r7
 8005dd8:	4653      	mov	r3, sl
 8005dda:	4622      	mov	r2, r4
 8005ddc:	f000 ff6c 	bl	8006cb8 <_dtoa_r>
 8005de0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005de4:	4605      	mov	r5, r0
 8005de6:	d119      	bne.n	8005e1c <__cvt+0x94>
 8005de8:	f019 0f01 	tst.w	r9, #1
 8005dec:	d00e      	beq.n	8005e0c <__cvt+0x84>
 8005dee:	eb00 0904 	add.w	r9, r0, r4
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dfe:	b108      	cbz	r0, 8005e04 <__cvt+0x7c>
 8005e00:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e04:	2230      	movs	r2, #48	@ 0x30
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	454b      	cmp	r3, r9
 8005e0a:	d31e      	bcc.n	8005e4a <__cvt+0xc2>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e10:	1b5b      	subs	r3, r3, r5
 8005e12:	4628      	mov	r0, r5
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	b004      	add	sp, #16
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e20:	eb00 0904 	add.w	r9, r0, r4
 8005e24:	d1e5      	bne.n	8005df2 <__cvt+0x6a>
 8005e26:	7803      	ldrb	r3, [r0, #0]
 8005e28:	2b30      	cmp	r3, #48	@ 0x30
 8005e2a:	d10a      	bne.n	8005e42 <__cvt+0xba>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e38:	b918      	cbnz	r0, 8005e42 <__cvt+0xba>
 8005e3a:	f1c4 0401 	rsb	r4, r4, #1
 8005e3e:	f8ca 4000 	str.w	r4, [sl]
 8005e42:	f8da 3000 	ldr.w	r3, [sl]
 8005e46:	4499      	add	r9, r3
 8005e48:	e7d3      	b.n	8005df2 <__cvt+0x6a>
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	9103      	str	r1, [sp, #12]
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e7d9      	b.n	8005e06 <__cvt+0x7e>

08005e52 <__exponent>:
 8005e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e54:	2900      	cmp	r1, #0
 8005e56:	bfba      	itte	lt
 8005e58:	4249      	neglt	r1, r1
 8005e5a:	232d      	movlt	r3, #45	@ 0x2d
 8005e5c:	232b      	movge	r3, #43	@ 0x2b
 8005e5e:	2909      	cmp	r1, #9
 8005e60:	7002      	strb	r2, [r0, #0]
 8005e62:	7043      	strb	r3, [r0, #1]
 8005e64:	dd29      	ble.n	8005eba <__exponent+0x68>
 8005e66:	f10d 0307 	add.w	r3, sp, #7
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	270a      	movs	r7, #10
 8005e6e:	461a      	mov	r2, r3
 8005e70:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e74:	fb07 1416 	mls	r4, r7, r6, r1
 8005e78:	3430      	adds	r4, #48	@ 0x30
 8005e7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e7e:	460c      	mov	r4, r1
 8005e80:	2c63      	cmp	r4, #99	@ 0x63
 8005e82:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e86:	4631      	mov	r1, r6
 8005e88:	dcf1      	bgt.n	8005e6e <__exponent+0x1c>
 8005e8a:	3130      	adds	r1, #48	@ 0x30
 8005e8c:	1e94      	subs	r4, r2, #2
 8005e8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e92:	1c41      	adds	r1, r0, #1
 8005e94:	4623      	mov	r3, r4
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	d30a      	bcc.n	8005eb0 <__exponent+0x5e>
 8005e9a:	f10d 0309 	add.w	r3, sp, #9
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	42ac      	cmp	r4, r5
 8005ea2:	bf88      	it	hi
 8005ea4:	2300      	movhi	r3, #0
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	4403      	add	r3, r0
 8005eaa:	1a18      	subs	r0, r3, r0
 8005eac:	b003      	add	sp, #12
 8005eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005eb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005eb8:	e7ed      	b.n	8005e96 <__exponent+0x44>
 8005eba:	2330      	movs	r3, #48	@ 0x30
 8005ebc:	3130      	adds	r1, #48	@ 0x30
 8005ebe:	7083      	strb	r3, [r0, #2]
 8005ec0:	70c1      	strb	r1, [r0, #3]
 8005ec2:	1d03      	adds	r3, r0, #4
 8005ec4:	e7f1      	b.n	8005eaa <__exponent+0x58>
	...

08005ec8 <_printf_float>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b08d      	sub	sp, #52	@ 0x34
 8005ece:	460c      	mov	r4, r1
 8005ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	461f      	mov	r7, r3
 8005ed8:	4605      	mov	r5, r0
 8005eda:	f000 fddf 	bl	8006a9c <_localeconv_r>
 8005ede:	6803      	ldr	r3, [r0, #0]
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fa f9cc 	bl	8000280 <strlen>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eec:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef0:	9005      	str	r0, [sp, #20]
 8005ef2:	3307      	adds	r3, #7
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	f103 0208 	add.w	r2, r3, #8
 8005efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f00:	f8d4 b000 	ldr.w	fp, [r4]
 8005f04:	f8c8 2000 	str.w	r2, [r8]
 8005f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f10:	9307      	str	r3, [sp, #28]
 8005f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006190 <_printf_float+0x2c8>)
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	f7fa fe0a 	bl	8000b3c <__aeabi_dcmpun>
 8005f28:	bb70      	cbnz	r0, 8005f88 <_printf_float+0xc0>
 8005f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f2e:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <_printf_float+0x2c8>)
 8005f30:	f04f 32ff 	mov.w	r2, #4294967295
 8005f34:	f7fa fde4 	bl	8000b00 <__aeabi_dcmple>
 8005f38:	bb30      	cbnz	r0, 8005f88 <_printf_float+0xc0>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fdd3 	bl	8000aec <__aeabi_dcmplt>
 8005f46:	b110      	cbz	r0, 8005f4e <_printf_float+0x86>
 8005f48:	232d      	movs	r3, #45	@ 0x2d
 8005f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f4e:	4a91      	ldr	r2, [pc, #580]	@ (8006194 <_printf_float+0x2cc>)
 8005f50:	4b91      	ldr	r3, [pc, #580]	@ (8006198 <_printf_float+0x2d0>)
 8005f52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f56:	bf94      	ite	ls
 8005f58:	4690      	movls	r8, r2
 8005f5a:	4698      	movhi	r8, r3
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	f02b 0304 	bic.w	r3, fp, #4
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	f04f 0900 	mov.w	r9, #0
 8005f6a:	9700      	str	r7, [sp, #0]
 8005f6c:	4633      	mov	r3, r6
 8005f6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f70:	4621      	mov	r1, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f9d2 	bl	800631c <_printf_common>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f040 808d 	bne.w	8006098 <_printf_float+0x1d0>
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	b00d      	add	sp, #52	@ 0x34
 8005f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fdd4 	bl	8000b3c <__aeabi_dcmpun>
 8005f94:	b140      	cbz	r0, 8005fa8 <_printf_float+0xe0>
 8005f96:	464b      	mov	r3, r9
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	bfbc      	itt	lt
 8005f9c:	232d      	movlt	r3, #45	@ 0x2d
 8005f9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800619c <_printf_float+0x2d4>)
 8005fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80061a0 <_printf_float+0x2d8>)
 8005fa6:	e7d4      	b.n	8005f52 <_printf_float+0x8a>
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005fae:	9206      	str	r2, [sp, #24]
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	d13b      	bne.n	800602c <_printf_float+0x164>
 8005fb4:	2306      	movs	r3, #6
 8005fb6:	6063      	str	r3, [r4, #4]
 8005fb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	9303      	str	r3, [sp, #12]
 8005fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005fc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005fc8:	ab09      	add	r3, sp, #36	@ 0x24
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	6861      	ldr	r1, [r4, #4]
 8005fce:	ec49 8b10 	vmov	d0, r8, r9
 8005fd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7ff fed6 	bl	8005d88 <__cvt>
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fe0:	2b47      	cmp	r3, #71	@ 0x47
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	d129      	bne.n	800603a <_printf_float+0x172>
 8005fe6:	1cc8      	adds	r0, r1, #3
 8005fe8:	db02      	blt.n	8005ff0 <_printf_float+0x128>
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	4299      	cmp	r1, r3
 8005fee:	dd41      	ble.n	8006074 <_printf_float+0x1ac>
 8005ff0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ff8:	3901      	subs	r1, #1
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006000:	9109      	str	r1, [sp, #36]	@ 0x24
 8006002:	f7ff ff26 	bl	8005e52 <__exponent>
 8006006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006008:	1813      	adds	r3, r2, r0
 800600a:	2a01      	cmp	r2, #1
 800600c:	4681      	mov	r9, r0
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	dc02      	bgt.n	8006018 <_printf_float+0x150>
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	07d2      	lsls	r2, r2, #31
 8006016:	d501      	bpl.n	800601c <_printf_float+0x154>
 8006018:	3301      	adds	r3, #1
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0a2      	beq.n	8005f6a <_printf_float+0xa2>
 8006024:	232d      	movs	r3, #45	@ 0x2d
 8006026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800602a:	e79e      	b.n	8005f6a <_printf_float+0xa2>
 800602c:	9a06      	ldr	r2, [sp, #24]
 800602e:	2a47      	cmp	r2, #71	@ 0x47
 8006030:	d1c2      	bne.n	8005fb8 <_printf_float+0xf0>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1c0      	bne.n	8005fb8 <_printf_float+0xf0>
 8006036:	2301      	movs	r3, #1
 8006038:	e7bd      	b.n	8005fb6 <_printf_float+0xee>
 800603a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800603e:	d9db      	bls.n	8005ff8 <_printf_float+0x130>
 8006040:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006044:	d118      	bne.n	8006078 <_printf_float+0x1b0>
 8006046:	2900      	cmp	r1, #0
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	dd0b      	ble.n	8006064 <_printf_float+0x19c>
 800604c:	6121      	str	r1, [r4, #16]
 800604e:	b913      	cbnz	r3, 8006056 <_printf_float+0x18e>
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	07d0      	lsls	r0, r2, #31
 8006054:	d502      	bpl.n	800605c <_printf_float+0x194>
 8006056:	3301      	adds	r3, #1
 8006058:	440b      	add	r3, r1
 800605a:	6123      	str	r3, [r4, #16]
 800605c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800605e:	f04f 0900 	mov.w	r9, #0
 8006062:	e7db      	b.n	800601c <_printf_float+0x154>
 8006064:	b913      	cbnz	r3, 800606c <_printf_float+0x1a4>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	07d2      	lsls	r2, r2, #31
 800606a:	d501      	bpl.n	8006070 <_printf_float+0x1a8>
 800606c:	3302      	adds	r3, #2
 800606e:	e7f4      	b.n	800605a <_printf_float+0x192>
 8006070:	2301      	movs	r3, #1
 8006072:	e7f2      	b.n	800605a <_printf_float+0x192>
 8006074:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607a:	4299      	cmp	r1, r3
 800607c:	db05      	blt.n	800608a <_printf_float+0x1c2>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	6121      	str	r1, [r4, #16]
 8006082:	07d8      	lsls	r0, r3, #31
 8006084:	d5ea      	bpl.n	800605c <_printf_float+0x194>
 8006086:	1c4b      	adds	r3, r1, #1
 8006088:	e7e7      	b.n	800605a <_printf_float+0x192>
 800608a:	2900      	cmp	r1, #0
 800608c:	bfd4      	ite	le
 800608e:	f1c1 0202 	rsble	r2, r1, #2
 8006092:	2201      	movgt	r2, #1
 8006094:	4413      	add	r3, r2
 8006096:	e7e0      	b.n	800605a <_printf_float+0x192>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	055a      	lsls	r2, r3, #21
 800609c:	d407      	bmi.n	80060ae <_printf_float+0x1e6>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	4642      	mov	r2, r8
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d12b      	bne.n	8006104 <_printf_float+0x23c>
 80060ac:	e767      	b.n	8005f7e <_printf_float+0xb6>
 80060ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060b2:	f240 80dd 	bls.w	8006270 <_printf_float+0x3a8>
 80060b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060ba:	2200      	movs	r2, #0
 80060bc:	2300      	movs	r3, #0
 80060be:	f7fa fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d033      	beq.n	800612e <_printf_float+0x266>
 80060c6:	4a37      	ldr	r2, [pc, #220]	@ (80061a4 <_printf_float+0x2dc>)
 80060c8:	2301      	movs	r3, #1
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f af54 	beq.w	8005f7e <_printf_float+0xb6>
 80060d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060da:	4543      	cmp	r3, r8
 80060dc:	db02      	blt.n	80060e4 <_printf_float+0x21c>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	07d8      	lsls	r0, r3, #31
 80060e2:	d50f      	bpl.n	8006104 <_printf_float+0x23c>
 80060e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f af45 	beq.w	8005f7e <_printf_float+0xb6>
 80060f4:	f04f 0900 	mov.w	r9, #0
 80060f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80060fc:	f104 0a1a 	add.w	sl, r4, #26
 8006100:	45c8      	cmp	r8, r9
 8006102:	dc09      	bgt.n	8006118 <_printf_float+0x250>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	f100 8103 	bmi.w	8006312 <_printf_float+0x44a>
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006110:	4298      	cmp	r0, r3
 8006112:	bfb8      	it	lt
 8006114:	4618      	movlt	r0, r3
 8006116:	e734      	b.n	8005f82 <_printf_float+0xba>
 8006118:	2301      	movs	r3, #1
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af2b 	beq.w	8005f7e <_printf_float+0xb6>
 8006128:	f109 0901 	add.w	r9, r9, #1
 800612c:	e7e8      	b.n	8006100 <_printf_float+0x238>
 800612e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	dc39      	bgt.n	80061a8 <_printf_float+0x2e0>
 8006134:	4a1b      	ldr	r2, [pc, #108]	@ (80061a4 <_printf_float+0x2dc>)
 8006136:	2301      	movs	r3, #1
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af1d 	beq.w	8005f7e <_printf_float+0xb6>
 8006144:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006148:	ea59 0303 	orrs.w	r3, r9, r3
 800614c:	d102      	bne.n	8006154 <_printf_float+0x28c>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	d5d7      	bpl.n	8006104 <_printf_float+0x23c>
 8006154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af0d 	beq.w	8005f7e <_printf_float+0xb6>
 8006164:	f04f 0a00 	mov.w	sl, #0
 8006168:	f104 0b1a 	add.w	fp, r4, #26
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	425b      	negs	r3, r3
 8006170:	4553      	cmp	r3, sl
 8006172:	dc01      	bgt.n	8006178 <_printf_float+0x2b0>
 8006174:	464b      	mov	r3, r9
 8006176:	e793      	b.n	80060a0 <_printf_float+0x1d8>
 8006178:	2301      	movs	r3, #1
 800617a:	465a      	mov	r2, fp
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f aefb 	beq.w	8005f7e <_printf_float+0xb6>
 8006188:	f10a 0a01 	add.w	sl, sl, #1
 800618c:	e7ee      	b.n	800616c <_printf_float+0x2a4>
 800618e:	bf00      	nop
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	0800bd04 	.word	0x0800bd04
 8006198:	0800bd08 	.word	0x0800bd08
 800619c:	0800bd0c 	.word	0x0800bd0c
 80061a0:	0800bd10 	.word	0x0800bd10
 80061a4:	0800bd14 	.word	0x0800bd14
 80061a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061ae:	4553      	cmp	r3, sl
 80061b0:	bfa8      	it	ge
 80061b2:	4653      	movge	r3, sl
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	4699      	mov	r9, r3
 80061b8:	dc36      	bgt.n	8006228 <_printf_float+0x360>
 80061ba:	f04f 0b00 	mov.w	fp, #0
 80061be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061c2:	f104 021a 	add.w	r2, r4, #26
 80061c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061c8:	9306      	str	r3, [sp, #24]
 80061ca:	eba3 0309 	sub.w	r3, r3, r9
 80061ce:	455b      	cmp	r3, fp
 80061d0:	dc31      	bgt.n	8006236 <_printf_float+0x36e>
 80061d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d4:	459a      	cmp	sl, r3
 80061d6:	dc3a      	bgt.n	800624e <_printf_float+0x386>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d437      	bmi.n	800624e <_printf_float+0x386>
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	ebaa 0903 	sub.w	r9, sl, r3
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	ebaa 0303 	sub.w	r3, sl, r3
 80061ea:	4599      	cmp	r9, r3
 80061ec:	bfa8      	it	ge
 80061ee:	4699      	movge	r9, r3
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	dc33      	bgt.n	800625e <_printf_float+0x396>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061fe:	f104 0b1a 	add.w	fp, r4, #26
 8006202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006204:	ebaa 0303 	sub.w	r3, sl, r3
 8006208:	eba3 0309 	sub.w	r3, r3, r9
 800620c:	4543      	cmp	r3, r8
 800620e:	f77f af79 	ble.w	8006104 <_printf_float+0x23c>
 8006212:	2301      	movs	r3, #1
 8006214:	465a      	mov	r2, fp
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	f43f aeae 	beq.w	8005f7e <_printf_float+0xb6>
 8006222:	f108 0801 	add.w	r8, r8, #1
 8006226:	e7ec      	b.n	8006202 <_printf_float+0x33a>
 8006228:	4642      	mov	r2, r8
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	d1c2      	bne.n	80061ba <_printf_float+0x2f2>
 8006234:	e6a3      	b.n	8005f7e <_printf_float+0xb6>
 8006236:	2301      	movs	r3, #1
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	9206      	str	r2, [sp, #24]
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae9c 	beq.w	8005f7e <_printf_float+0xb6>
 8006246:	9a06      	ldr	r2, [sp, #24]
 8006248:	f10b 0b01 	add.w	fp, fp, #1
 800624c:	e7bb      	b.n	80061c6 <_printf_float+0x2fe>
 800624e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	d1c0      	bne.n	80061de <_printf_float+0x316>
 800625c:	e68f      	b.n	8005f7e <_printf_float+0xb6>
 800625e:	9a06      	ldr	r2, [sp, #24]
 8006260:	464b      	mov	r3, r9
 8006262:	4442      	add	r2, r8
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	d1c3      	bne.n	80061f6 <_printf_float+0x32e>
 800626e:	e686      	b.n	8005f7e <_printf_float+0xb6>
 8006270:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006274:	f1ba 0f01 	cmp.w	sl, #1
 8006278:	dc01      	bgt.n	800627e <_printf_float+0x3b6>
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d536      	bpl.n	80062ec <_printf_float+0x424>
 800627e:	2301      	movs	r3, #1
 8006280:	4642      	mov	r2, r8
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f ae78 	beq.w	8005f7e <_printf_float+0xb6>
 800628e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	f43f ae70 	beq.w	8005f7e <_printf_float+0xb6>
 800629e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062aa:	f7fa fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ae:	b9c0      	cbnz	r0, 80062e2 <_printf_float+0x41a>
 80062b0:	4653      	mov	r3, sl
 80062b2:	f108 0201 	add.w	r2, r8, #1
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	d10c      	bne.n	80062da <_printf_float+0x412>
 80062c0:	e65d      	b.n	8005f7e <_printf_float+0xb6>
 80062c2:	2301      	movs	r3, #1
 80062c4:	465a      	mov	r2, fp
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b8      	blx	r7
 80062cc:	3001      	adds	r0, #1
 80062ce:	f43f ae56 	beq.w	8005f7e <_printf_float+0xb6>
 80062d2:	f108 0801 	add.w	r8, r8, #1
 80062d6:	45d0      	cmp	r8, sl
 80062d8:	dbf3      	blt.n	80062c2 <_printf_float+0x3fa>
 80062da:	464b      	mov	r3, r9
 80062dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062e0:	e6df      	b.n	80060a2 <_printf_float+0x1da>
 80062e2:	f04f 0800 	mov.w	r8, #0
 80062e6:	f104 0b1a 	add.w	fp, r4, #26
 80062ea:	e7f4      	b.n	80062d6 <_printf_float+0x40e>
 80062ec:	2301      	movs	r3, #1
 80062ee:	4642      	mov	r2, r8
 80062f0:	e7e1      	b.n	80062b6 <_printf_float+0x3ee>
 80062f2:	2301      	movs	r3, #1
 80062f4:	464a      	mov	r2, r9
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae3e 	beq.w	8005f7e <_printf_float+0xb6>
 8006302:	f108 0801 	add.w	r8, r8, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	4543      	cmp	r3, r8
 800630e:	dcf0      	bgt.n	80062f2 <_printf_float+0x42a>
 8006310:	e6fc      	b.n	800610c <_printf_float+0x244>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	f104 0919 	add.w	r9, r4, #25
 800631a:	e7f4      	b.n	8006306 <_printf_float+0x43e>

0800631c <_printf_common>:
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	4616      	mov	r6, r2
 8006322:	4698      	mov	r8, r3
 8006324:	688a      	ldr	r2, [r1, #8]
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800632c:	4293      	cmp	r3, r2
 800632e:	bfb8      	it	lt
 8006330:	4613      	movlt	r3, r2
 8006332:	6033      	str	r3, [r6, #0]
 8006334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006338:	4607      	mov	r7, r0
 800633a:	460c      	mov	r4, r1
 800633c:	b10a      	cbz	r2, 8006342 <_printf_common+0x26>
 800633e:	3301      	adds	r3, #1
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	0699      	lsls	r1, r3, #26
 8006346:	bf42      	ittt	mi
 8006348:	6833      	ldrmi	r3, [r6, #0]
 800634a:	3302      	addmi	r3, #2
 800634c:	6033      	strmi	r3, [r6, #0]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	f015 0506 	ands.w	r5, r5, #6
 8006354:	d106      	bne.n	8006364 <_printf_common+0x48>
 8006356:	f104 0a19 	add.w	sl, r4, #25
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	6832      	ldr	r2, [r6, #0]
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	42ab      	cmp	r3, r5
 8006362:	dc26      	bgt.n	80063b2 <_printf_common+0x96>
 8006364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	3b00      	subs	r3, #0
 800636c:	bf18      	it	ne
 800636e:	2301      	movne	r3, #1
 8006370:	0692      	lsls	r2, r2, #26
 8006372:	d42b      	bmi.n	80063cc <_printf_common+0xb0>
 8006374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006378:	4641      	mov	r1, r8
 800637a:	4638      	mov	r0, r7
 800637c:	47c8      	blx	r9
 800637e:	3001      	adds	r0, #1
 8006380:	d01e      	beq.n	80063c0 <_printf_common+0xa4>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	f003 0306 	and.w	r3, r3, #6
 800638a:	2b04      	cmp	r3, #4
 800638c:	bf02      	ittt	eq
 800638e:	68e5      	ldreq	r5, [r4, #12]
 8006390:	6833      	ldreq	r3, [r6, #0]
 8006392:	1aed      	subeq	r5, r5, r3
 8006394:	68a3      	ldr	r3, [r4, #8]
 8006396:	bf0c      	ite	eq
 8006398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800639c:	2500      	movne	r5, #0
 800639e:	4293      	cmp	r3, r2
 80063a0:	bfc4      	itt	gt
 80063a2:	1a9b      	subgt	r3, r3, r2
 80063a4:	18ed      	addgt	r5, r5, r3
 80063a6:	2600      	movs	r6, #0
 80063a8:	341a      	adds	r4, #26
 80063aa:	42b5      	cmp	r5, r6
 80063ac:	d11a      	bne.n	80063e4 <_printf_common+0xc8>
 80063ae:	2000      	movs	r0, #0
 80063b0:	e008      	b.n	80063c4 <_printf_common+0xa8>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4652      	mov	r2, sl
 80063b6:	4641      	mov	r1, r8
 80063b8:	4638      	mov	r0, r7
 80063ba:	47c8      	blx	r9
 80063bc:	3001      	adds	r0, #1
 80063be:	d103      	bne.n	80063c8 <_printf_common+0xac>
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c8:	3501      	adds	r5, #1
 80063ca:	e7c6      	b.n	800635a <_printf_common+0x3e>
 80063cc:	18e1      	adds	r1, r4, r3
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	2030      	movs	r0, #48	@ 0x30
 80063d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063d6:	4422      	add	r2, r4
 80063d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063e0:	3302      	adds	r3, #2
 80063e2:	e7c7      	b.n	8006374 <_printf_common+0x58>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4622      	mov	r2, r4
 80063e8:	4641      	mov	r1, r8
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c8      	blx	r9
 80063ee:	3001      	adds	r0, #1
 80063f0:	d0e6      	beq.n	80063c0 <_printf_common+0xa4>
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7d9      	b.n	80063aa <_printf_common+0x8e>
	...

080063f8 <_printf_i>:
 80063f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	7e0f      	ldrb	r7, [r1, #24]
 80063fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006400:	2f78      	cmp	r7, #120	@ 0x78
 8006402:	4691      	mov	r9, r2
 8006404:	4680      	mov	r8, r0
 8006406:	460c      	mov	r4, r1
 8006408:	469a      	mov	sl, r3
 800640a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800640e:	d807      	bhi.n	8006420 <_printf_i+0x28>
 8006410:	2f62      	cmp	r7, #98	@ 0x62
 8006412:	d80a      	bhi.n	800642a <_printf_i+0x32>
 8006414:	2f00      	cmp	r7, #0
 8006416:	f000 80d2 	beq.w	80065be <_printf_i+0x1c6>
 800641a:	2f58      	cmp	r7, #88	@ 0x58
 800641c:	f000 80b9 	beq.w	8006592 <_printf_i+0x19a>
 8006420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006428:	e03a      	b.n	80064a0 <_printf_i+0xa8>
 800642a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800642e:	2b15      	cmp	r3, #21
 8006430:	d8f6      	bhi.n	8006420 <_printf_i+0x28>
 8006432:	a101      	add	r1, pc, #4	@ (adr r1, 8006438 <_printf_i+0x40>)
 8006434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006438:	08006491 	.word	0x08006491
 800643c:	080064a5 	.word	0x080064a5
 8006440:	08006421 	.word	0x08006421
 8006444:	08006421 	.word	0x08006421
 8006448:	08006421 	.word	0x08006421
 800644c:	08006421 	.word	0x08006421
 8006450:	080064a5 	.word	0x080064a5
 8006454:	08006421 	.word	0x08006421
 8006458:	08006421 	.word	0x08006421
 800645c:	08006421 	.word	0x08006421
 8006460:	08006421 	.word	0x08006421
 8006464:	080065a5 	.word	0x080065a5
 8006468:	080064cf 	.word	0x080064cf
 800646c:	0800655f 	.word	0x0800655f
 8006470:	08006421 	.word	0x08006421
 8006474:	08006421 	.word	0x08006421
 8006478:	080065c7 	.word	0x080065c7
 800647c:	08006421 	.word	0x08006421
 8006480:	080064cf 	.word	0x080064cf
 8006484:	08006421 	.word	0x08006421
 8006488:	08006421 	.word	0x08006421
 800648c:	08006567 	.word	0x08006567
 8006490:	6833      	ldr	r3, [r6, #0]
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6032      	str	r2, [r6, #0]
 8006498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800649c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064a0:	2301      	movs	r3, #1
 80064a2:	e09d      	b.n	80065e0 <_printf_i+0x1e8>
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	1d19      	adds	r1, r3, #4
 80064aa:	6031      	str	r1, [r6, #0]
 80064ac:	0606      	lsls	r6, r0, #24
 80064ae:	d501      	bpl.n	80064b4 <_printf_i+0xbc>
 80064b0:	681d      	ldr	r5, [r3, #0]
 80064b2:	e003      	b.n	80064bc <_printf_i+0xc4>
 80064b4:	0645      	lsls	r5, r0, #25
 80064b6:	d5fb      	bpl.n	80064b0 <_printf_i+0xb8>
 80064b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064bc:	2d00      	cmp	r5, #0
 80064be:	da03      	bge.n	80064c8 <_printf_i+0xd0>
 80064c0:	232d      	movs	r3, #45	@ 0x2d
 80064c2:	426d      	negs	r5, r5
 80064c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c8:	4859      	ldr	r0, [pc, #356]	@ (8006630 <_printf_i+0x238>)
 80064ca:	230a      	movs	r3, #10
 80064cc:	e011      	b.n	80064f2 <_printf_i+0xfa>
 80064ce:	6821      	ldr	r1, [r4, #0]
 80064d0:	6833      	ldr	r3, [r6, #0]
 80064d2:	0608      	lsls	r0, r1, #24
 80064d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80064d8:	d402      	bmi.n	80064e0 <_printf_i+0xe8>
 80064da:	0649      	lsls	r1, r1, #25
 80064dc:	bf48      	it	mi
 80064de:	b2ad      	uxthmi	r5, r5
 80064e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80064e2:	4853      	ldr	r0, [pc, #332]	@ (8006630 <_printf_i+0x238>)
 80064e4:	6033      	str	r3, [r6, #0]
 80064e6:	bf14      	ite	ne
 80064e8:	230a      	movne	r3, #10
 80064ea:	2308      	moveq	r3, #8
 80064ec:	2100      	movs	r1, #0
 80064ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064f2:	6866      	ldr	r6, [r4, #4]
 80064f4:	60a6      	str	r6, [r4, #8]
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	bfa2      	ittt	ge
 80064fa:	6821      	ldrge	r1, [r4, #0]
 80064fc:	f021 0104 	bicge.w	r1, r1, #4
 8006500:	6021      	strge	r1, [r4, #0]
 8006502:	b90d      	cbnz	r5, 8006508 <_printf_i+0x110>
 8006504:	2e00      	cmp	r6, #0
 8006506:	d04b      	beq.n	80065a0 <_printf_i+0x1a8>
 8006508:	4616      	mov	r6, r2
 800650a:	fbb5 f1f3 	udiv	r1, r5, r3
 800650e:	fb03 5711 	mls	r7, r3, r1, r5
 8006512:	5dc7      	ldrb	r7, [r0, r7]
 8006514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006518:	462f      	mov	r7, r5
 800651a:	42bb      	cmp	r3, r7
 800651c:	460d      	mov	r5, r1
 800651e:	d9f4      	bls.n	800650a <_printf_i+0x112>
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10b      	bne.n	800653c <_printf_i+0x144>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07df      	lsls	r7, r3, #31
 8006528:	d508      	bpl.n	800653c <_printf_i+0x144>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4299      	cmp	r1, r3
 8006530:	bfde      	ittt	le
 8006532:	2330      	movle	r3, #48	@ 0x30
 8006534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800653c:	1b92      	subs	r2, r2, r6
 800653e:	6122      	str	r2, [r4, #16]
 8006540:	f8cd a000 	str.w	sl, [sp]
 8006544:	464b      	mov	r3, r9
 8006546:	aa03      	add	r2, sp, #12
 8006548:	4621      	mov	r1, r4
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff fee6 	bl	800631c <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	d14a      	bne.n	80065ea <_printf_i+0x1f2>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	b004      	add	sp, #16
 800655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f043 0320 	orr.w	r3, r3, #32
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	4833      	ldr	r0, [pc, #204]	@ (8006634 <_printf_i+0x23c>)
 8006568:	2778      	movs	r7, #120	@ 0x78
 800656a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	6831      	ldr	r1, [r6, #0]
 8006572:	061f      	lsls	r7, r3, #24
 8006574:	f851 5b04 	ldr.w	r5, [r1], #4
 8006578:	d402      	bmi.n	8006580 <_printf_i+0x188>
 800657a:	065f      	lsls	r7, r3, #25
 800657c:	bf48      	it	mi
 800657e:	b2ad      	uxthmi	r5, r5
 8006580:	6031      	str	r1, [r6, #0]
 8006582:	07d9      	lsls	r1, r3, #31
 8006584:	bf44      	itt	mi
 8006586:	f043 0320 	orrmi.w	r3, r3, #32
 800658a:	6023      	strmi	r3, [r4, #0]
 800658c:	b11d      	cbz	r5, 8006596 <_printf_i+0x19e>
 800658e:	2310      	movs	r3, #16
 8006590:	e7ac      	b.n	80064ec <_printf_i+0xf4>
 8006592:	4827      	ldr	r0, [pc, #156]	@ (8006630 <_printf_i+0x238>)
 8006594:	e7e9      	b.n	800656a <_printf_i+0x172>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f023 0320 	bic.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	e7f6      	b.n	800658e <_printf_i+0x196>
 80065a0:	4616      	mov	r6, r2
 80065a2:	e7bd      	b.n	8006520 <_printf_i+0x128>
 80065a4:	6833      	ldr	r3, [r6, #0]
 80065a6:	6825      	ldr	r5, [r4, #0]
 80065a8:	6961      	ldr	r1, [r4, #20]
 80065aa:	1d18      	adds	r0, r3, #4
 80065ac:	6030      	str	r0, [r6, #0]
 80065ae:	062e      	lsls	r6, r5, #24
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0x1c0>
 80065b4:	6019      	str	r1, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0x1c6>
 80065b8:	0668      	lsls	r0, r5, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0x1bc>
 80065bc:	8019      	strh	r1, [r3, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	4616      	mov	r6, r2
 80065c4:	e7bc      	b.n	8006540 <_printf_i+0x148>
 80065c6:	6833      	ldr	r3, [r6, #0]
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	6032      	str	r2, [r6, #0]
 80065cc:	681e      	ldr	r6, [r3, #0]
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	2100      	movs	r1, #0
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7f9 fe04 	bl	80001e0 <memchr>
 80065d8:	b108      	cbz	r0, 80065de <_printf_i+0x1e6>
 80065da:	1b80      	subs	r0, r0, r6
 80065dc:	6060      	str	r0, [r4, #4]
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	2300      	movs	r3, #0
 80065e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065e8:	e7aa      	b.n	8006540 <_printf_i+0x148>
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	4632      	mov	r2, r6
 80065ee:	4649      	mov	r1, r9
 80065f0:	4640      	mov	r0, r8
 80065f2:	47d0      	blx	sl
 80065f4:	3001      	adds	r0, #1
 80065f6:	d0ad      	beq.n	8006554 <_printf_i+0x15c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	079b      	lsls	r3, r3, #30
 80065fc:	d413      	bmi.n	8006626 <_printf_i+0x22e>
 80065fe:	68e0      	ldr	r0, [r4, #12]
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	4298      	cmp	r0, r3
 8006604:	bfb8      	it	lt
 8006606:	4618      	movlt	r0, r3
 8006608:	e7a6      	b.n	8006558 <_printf_i+0x160>
 800660a:	2301      	movs	r3, #1
 800660c:	4632      	mov	r2, r6
 800660e:	4649      	mov	r1, r9
 8006610:	4640      	mov	r0, r8
 8006612:	47d0      	blx	sl
 8006614:	3001      	adds	r0, #1
 8006616:	d09d      	beq.n	8006554 <_printf_i+0x15c>
 8006618:	3501      	adds	r5, #1
 800661a:	68e3      	ldr	r3, [r4, #12]
 800661c:	9903      	ldr	r1, [sp, #12]
 800661e:	1a5b      	subs	r3, r3, r1
 8006620:	42ab      	cmp	r3, r5
 8006622:	dcf2      	bgt.n	800660a <_printf_i+0x212>
 8006624:	e7eb      	b.n	80065fe <_printf_i+0x206>
 8006626:	2500      	movs	r5, #0
 8006628:	f104 0619 	add.w	r6, r4, #25
 800662c:	e7f5      	b.n	800661a <_printf_i+0x222>
 800662e:	bf00      	nop
 8006630:	0800bd16 	.word	0x0800bd16
 8006634:	0800bd27 	.word	0x0800bd27

08006638 <std>:
 8006638:	2300      	movs	r3, #0
 800663a:	b510      	push	{r4, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	e9c0 3300 	strd	r3, r3, [r0]
 8006642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006646:	6083      	str	r3, [r0, #8]
 8006648:	8181      	strh	r1, [r0, #12]
 800664a:	6643      	str	r3, [r0, #100]	@ 0x64
 800664c:	81c2      	strh	r2, [r0, #14]
 800664e:	6183      	str	r3, [r0, #24]
 8006650:	4619      	mov	r1, r3
 8006652:	2208      	movs	r2, #8
 8006654:	305c      	adds	r0, #92	@ 0x5c
 8006656:	f000 fa07 	bl	8006a68 <memset>
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <std+0x58>)
 800665c:	6263      	str	r3, [r4, #36]	@ 0x24
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <std+0x5c>)
 8006660:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006662:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <std+0x60>)
 8006664:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <std+0x64>)
 8006668:	6323      	str	r3, [r4, #48]	@ 0x30
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <std+0x68>)
 800666c:	6224      	str	r4, [r4, #32]
 800666e:	429c      	cmp	r4, r3
 8006670:	d006      	beq.n	8006680 <std+0x48>
 8006672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006676:	4294      	cmp	r4, r2
 8006678:	d002      	beq.n	8006680 <std+0x48>
 800667a:	33d0      	adds	r3, #208	@ 0xd0
 800667c:	429c      	cmp	r4, r3
 800667e:	d105      	bne.n	800668c <std+0x54>
 8006680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006688:	f000 ba7c 	b.w	8006b84 <__retarget_lock_init_recursive>
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	080068b9 	.word	0x080068b9
 8006694:	080068db 	.word	0x080068db
 8006698:	08006913 	.word	0x08006913
 800669c:	08006937 	.word	0x08006937
 80066a0:	20000978 	.word	0x20000978

080066a4 <stdio_exit_handler>:
 80066a4:	4a02      	ldr	r2, [pc, #8]	@ (80066b0 <stdio_exit_handler+0xc>)
 80066a6:	4903      	ldr	r1, [pc, #12]	@ (80066b4 <stdio_exit_handler+0x10>)
 80066a8:	4803      	ldr	r0, [pc, #12]	@ (80066b8 <stdio_exit_handler+0x14>)
 80066aa:	f000 b869 	b.w	8006780 <_fwalk_sglue>
 80066ae:	bf00      	nop
 80066b0:	20000020 	.word	0x20000020
 80066b4:	080084fd 	.word	0x080084fd
 80066b8:	20000030 	.word	0x20000030

080066bc <cleanup_stdio>:
 80066bc:	6841      	ldr	r1, [r0, #4]
 80066be:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <cleanup_stdio+0x34>)
 80066c0:	4299      	cmp	r1, r3
 80066c2:	b510      	push	{r4, lr}
 80066c4:	4604      	mov	r4, r0
 80066c6:	d001      	beq.n	80066cc <cleanup_stdio+0x10>
 80066c8:	f001 ff18 	bl	80084fc <_fflush_r>
 80066cc:	68a1      	ldr	r1, [r4, #8]
 80066ce:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <cleanup_stdio+0x38>)
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d002      	beq.n	80066da <cleanup_stdio+0x1e>
 80066d4:	4620      	mov	r0, r4
 80066d6:	f001 ff11 	bl	80084fc <_fflush_r>
 80066da:	68e1      	ldr	r1, [r4, #12]
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <cleanup_stdio+0x3c>)
 80066de:	4299      	cmp	r1, r3
 80066e0:	d004      	beq.n	80066ec <cleanup_stdio+0x30>
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e8:	f001 bf08 	b.w	80084fc <_fflush_r>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	20000978 	.word	0x20000978
 80066f4:	200009e0 	.word	0x200009e0
 80066f8:	20000a48 	.word	0x20000a48

080066fc <global_stdio_init.part.0>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <global_stdio_init.part.0+0x30>)
 8006700:	4c0b      	ldr	r4, [pc, #44]	@ (8006730 <global_stdio_init.part.0+0x34>)
 8006702:	4a0c      	ldr	r2, [pc, #48]	@ (8006734 <global_stdio_init.part.0+0x38>)
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	4620      	mov	r0, r4
 8006708:	2200      	movs	r2, #0
 800670a:	2104      	movs	r1, #4
 800670c:	f7ff ff94 	bl	8006638 <std>
 8006710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006714:	2201      	movs	r2, #1
 8006716:	2109      	movs	r1, #9
 8006718:	f7ff ff8e 	bl	8006638 <std>
 800671c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006720:	2202      	movs	r2, #2
 8006722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006726:	2112      	movs	r1, #18
 8006728:	f7ff bf86 	b.w	8006638 <std>
 800672c:	20000ab0 	.word	0x20000ab0
 8006730:	20000978 	.word	0x20000978
 8006734:	080066a5 	.word	0x080066a5

08006738 <__sfp_lock_acquire>:
 8006738:	4801      	ldr	r0, [pc, #4]	@ (8006740 <__sfp_lock_acquire+0x8>)
 800673a:	f000 ba24 	b.w	8006b86 <__retarget_lock_acquire_recursive>
 800673e:	bf00      	nop
 8006740:	20000ab9 	.word	0x20000ab9

08006744 <__sfp_lock_release>:
 8006744:	4801      	ldr	r0, [pc, #4]	@ (800674c <__sfp_lock_release+0x8>)
 8006746:	f000 ba1f 	b.w	8006b88 <__retarget_lock_release_recursive>
 800674a:	bf00      	nop
 800674c:	20000ab9 	.word	0x20000ab9

08006750 <__sinit>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	f7ff fff0 	bl	8006738 <__sfp_lock_acquire>
 8006758:	6a23      	ldr	r3, [r4, #32]
 800675a:	b11b      	cbz	r3, 8006764 <__sinit+0x14>
 800675c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006760:	f7ff bff0 	b.w	8006744 <__sfp_lock_release>
 8006764:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <__sinit+0x28>)
 8006766:	6223      	str	r3, [r4, #32]
 8006768:	4b04      	ldr	r3, [pc, #16]	@ (800677c <__sinit+0x2c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f5      	bne.n	800675c <__sinit+0xc>
 8006770:	f7ff ffc4 	bl	80066fc <global_stdio_init.part.0>
 8006774:	e7f2      	b.n	800675c <__sinit+0xc>
 8006776:	bf00      	nop
 8006778:	080066bd 	.word	0x080066bd
 800677c:	20000ab0 	.word	0x20000ab0

08006780 <_fwalk_sglue>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4607      	mov	r7, r0
 8006786:	4688      	mov	r8, r1
 8006788:	4614      	mov	r4, r2
 800678a:	2600      	movs	r6, #0
 800678c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006790:	f1b9 0901 	subs.w	r9, r9, #1
 8006794:	d505      	bpl.n	80067a2 <_fwalk_sglue+0x22>
 8006796:	6824      	ldr	r4, [r4, #0]
 8006798:	2c00      	cmp	r4, #0
 800679a:	d1f7      	bne.n	800678c <_fwalk_sglue+0xc>
 800679c:	4630      	mov	r0, r6
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d907      	bls.n	80067b8 <_fwalk_sglue+0x38>
 80067a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ac:	3301      	adds	r3, #1
 80067ae:	d003      	beq.n	80067b8 <_fwalk_sglue+0x38>
 80067b0:	4629      	mov	r1, r5
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c0      	blx	r8
 80067b6:	4306      	orrs	r6, r0
 80067b8:	3568      	adds	r5, #104	@ 0x68
 80067ba:	e7e9      	b.n	8006790 <_fwalk_sglue+0x10>

080067bc <_puts_r>:
 80067bc:	6a03      	ldr	r3, [r0, #32]
 80067be:	b570      	push	{r4, r5, r6, lr}
 80067c0:	6884      	ldr	r4, [r0, #8]
 80067c2:	4605      	mov	r5, r0
 80067c4:	460e      	mov	r6, r1
 80067c6:	b90b      	cbnz	r3, 80067cc <_puts_r+0x10>
 80067c8:	f7ff ffc2 	bl	8006750 <__sinit>
 80067cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d405      	bmi.n	80067de <_puts_r+0x22>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	0598      	lsls	r0, r3, #22
 80067d6:	d402      	bmi.n	80067de <_puts_r+0x22>
 80067d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067da:	f000 f9d4 	bl	8006b86 <__retarget_lock_acquire_recursive>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	0719      	lsls	r1, r3, #28
 80067e2:	d502      	bpl.n	80067ea <_puts_r+0x2e>
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d135      	bne.n	8006856 <_puts_r+0x9a>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f8e5 	bl	80069bc <__swsetup_r>
 80067f2:	b380      	cbz	r0, 8006856 <_puts_r+0x9a>
 80067f4:	f04f 35ff 	mov.w	r5, #4294967295
 80067f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d405      	bmi.n	800680a <_puts_r+0x4e>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	059b      	lsls	r3, r3, #22
 8006802:	d402      	bmi.n	800680a <_puts_r+0x4e>
 8006804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006806:	f000 f9bf 	bl	8006b88 <__retarget_lock_release_recursive>
 800680a:	4628      	mov	r0, r5
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	2b00      	cmp	r3, #0
 8006810:	da04      	bge.n	800681c <_puts_r+0x60>
 8006812:	69a2      	ldr	r2, [r4, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	dc17      	bgt.n	8006848 <_puts_r+0x8c>
 8006818:	290a      	cmp	r1, #10
 800681a:	d015      	beq.n	8006848 <_puts_r+0x8c>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	7019      	strb	r1, [r3, #0]
 8006824:	68a3      	ldr	r3, [r4, #8]
 8006826:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800682a:	3b01      	subs	r3, #1
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	2900      	cmp	r1, #0
 8006830:	d1ed      	bne.n	800680e <_puts_r+0x52>
 8006832:	2b00      	cmp	r3, #0
 8006834:	da11      	bge.n	800685a <_puts_r+0x9e>
 8006836:	4622      	mov	r2, r4
 8006838:	210a      	movs	r1, #10
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f87f 	bl	800693e <__swbuf_r>
 8006840:	3001      	adds	r0, #1
 8006842:	d0d7      	beq.n	80067f4 <_puts_r+0x38>
 8006844:	250a      	movs	r5, #10
 8006846:	e7d7      	b.n	80067f8 <_puts_r+0x3c>
 8006848:	4622      	mov	r2, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f877 	bl	800693e <__swbuf_r>
 8006850:	3001      	adds	r0, #1
 8006852:	d1e7      	bne.n	8006824 <_puts_r+0x68>
 8006854:	e7ce      	b.n	80067f4 <_puts_r+0x38>
 8006856:	3e01      	subs	r6, #1
 8006858:	e7e4      	b.n	8006824 <_puts_r+0x68>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	220a      	movs	r2, #10
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e7ee      	b.n	8006844 <_puts_r+0x88>
	...

08006868 <puts>:
 8006868:	4b02      	ldr	r3, [pc, #8]	@ (8006874 <puts+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f7ff bfa5 	b.w	80067bc <_puts_r>
 8006872:	bf00      	nop
 8006874:	2000002c 	.word	0x2000002c

08006878 <siprintf>:
 8006878:	b40e      	push	{r1, r2, r3}
 800687a:	b500      	push	{lr}
 800687c:	b09c      	sub	sp, #112	@ 0x70
 800687e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006880:	9002      	str	r0, [sp, #8]
 8006882:	9006      	str	r0, [sp, #24]
 8006884:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006888:	4809      	ldr	r0, [pc, #36]	@ (80068b0 <siprintf+0x38>)
 800688a:	9107      	str	r1, [sp, #28]
 800688c:	9104      	str	r1, [sp, #16]
 800688e:	4909      	ldr	r1, [pc, #36]	@ (80068b4 <siprintf+0x3c>)
 8006890:	f853 2b04 	ldr.w	r2, [r3], #4
 8006894:	9105      	str	r1, [sp, #20]
 8006896:	6800      	ldr	r0, [r0, #0]
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	a902      	add	r1, sp, #8
 800689c:	f001 fcae 	bl	80081fc <_svfiprintf_r>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	b01c      	add	sp, #112	@ 0x70
 80068a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068ac:	b003      	add	sp, #12
 80068ae:	4770      	bx	lr
 80068b0:	2000002c 	.word	0x2000002c
 80068b4:	ffff0208 	.word	0xffff0208

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 f912 	bl	8006ae8 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	05db      	lsls	r3, r3, #23
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f0:	2302      	movs	r3, #2
 80068f2:	2200      	movs	r2, #0
 80068f4:	f000 f8e6 	bl	8006ac4 <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b8fd 	b.w	8006b0c <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f8d3 	bl	8006ac4 <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b8b3 	b.w	8006aa4 <_close_r>

0800693e <__swbuf_r>:
 800693e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006940:	460e      	mov	r6, r1
 8006942:	4614      	mov	r4, r2
 8006944:	4605      	mov	r5, r0
 8006946:	b118      	cbz	r0, 8006950 <__swbuf_r+0x12>
 8006948:	6a03      	ldr	r3, [r0, #32]
 800694a:	b90b      	cbnz	r3, 8006950 <__swbuf_r+0x12>
 800694c:	f7ff ff00 	bl	8006750 <__sinit>
 8006950:	69a3      	ldr	r3, [r4, #24]
 8006952:	60a3      	str	r3, [r4, #8]
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	071a      	lsls	r2, r3, #28
 8006958:	d501      	bpl.n	800695e <__swbuf_r+0x20>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	b943      	cbnz	r3, 8006970 <__swbuf_r+0x32>
 800695e:	4621      	mov	r1, r4
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f82b 	bl	80069bc <__swsetup_r>
 8006966:	b118      	cbz	r0, 8006970 <__swbuf_r+0x32>
 8006968:	f04f 37ff 	mov.w	r7, #4294967295
 800696c:	4638      	mov	r0, r7
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	1a98      	subs	r0, r3, r2
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	b2f6      	uxtb	r6, r6
 800697a:	4283      	cmp	r3, r0
 800697c:	4637      	mov	r7, r6
 800697e:	dc05      	bgt.n	800698c <__swbuf_r+0x4e>
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f001 fdba 	bl	80084fc <_fflush_r>
 8006988:	2800      	cmp	r0, #0
 800698a:	d1ed      	bne.n	8006968 <__swbuf_r+0x2a>
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	3b01      	subs	r3, #1
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	6022      	str	r2, [r4, #0]
 8006998:	701e      	strb	r6, [r3, #0]
 800699a:	6962      	ldr	r2, [r4, #20]
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	429a      	cmp	r2, r3
 80069a0:	d004      	beq.n	80069ac <__swbuf_r+0x6e>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	07db      	lsls	r3, r3, #31
 80069a6:	d5e1      	bpl.n	800696c <__swbuf_r+0x2e>
 80069a8:	2e0a      	cmp	r6, #10
 80069aa:	d1df      	bne.n	800696c <__swbuf_r+0x2e>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f001 fda4 	bl	80084fc <_fflush_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d0d9      	beq.n	800696c <__swbuf_r+0x2e>
 80069b8:	e7d6      	b.n	8006968 <__swbuf_r+0x2a>
	...

080069bc <__swsetup_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4b29      	ldr	r3, [pc, #164]	@ (8006a64 <__swsetup_r+0xa8>)
 80069c0:	4605      	mov	r5, r0
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	460c      	mov	r4, r1
 80069c6:	b118      	cbz	r0, 80069d0 <__swsetup_r+0x14>
 80069c8:	6a03      	ldr	r3, [r0, #32]
 80069ca:	b90b      	cbnz	r3, 80069d0 <__swsetup_r+0x14>
 80069cc:	f7ff fec0 	bl	8006750 <__sinit>
 80069d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d4:	0719      	lsls	r1, r3, #28
 80069d6:	d422      	bmi.n	8006a1e <__swsetup_r+0x62>
 80069d8:	06da      	lsls	r2, r3, #27
 80069da:	d407      	bmi.n	80069ec <__swsetup_r+0x30>
 80069dc:	2209      	movs	r2, #9
 80069de:	602a      	str	r2, [r5, #0]
 80069e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	e033      	b.n	8006a54 <__swsetup_r+0x98>
 80069ec:	0758      	lsls	r0, r3, #29
 80069ee:	d512      	bpl.n	8006a16 <__swsetup_r+0x5a>
 80069f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069f2:	b141      	cbz	r1, 8006a06 <__swsetup_r+0x4a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__swsetup_r+0x46>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 ff1f 	bl	8007840 <_free_r>
 8006a02:	2300      	movs	r3, #0
 8006a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	b94b      	cbnz	r3, 8006a36 <__swsetup_r+0x7a>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d003      	beq.n	8006a36 <__swsetup_r+0x7a>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f001 fdb1 	bl	8008598 <__smakebuf_r>
 8006a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3a:	f013 0201 	ands.w	r2, r3, #1
 8006a3e:	d00a      	beq.n	8006a56 <__swsetup_r+0x9a>
 8006a40:	2200      	movs	r2, #0
 8006a42:	60a2      	str	r2, [r4, #8]
 8006a44:	6962      	ldr	r2, [r4, #20]
 8006a46:	4252      	negs	r2, r2
 8006a48:	61a2      	str	r2, [r4, #24]
 8006a4a:	6922      	ldr	r2, [r4, #16]
 8006a4c:	b942      	cbnz	r2, 8006a60 <__swsetup_r+0xa4>
 8006a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a52:	d1c5      	bne.n	80069e0 <__swsetup_r+0x24>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	0799      	lsls	r1, r3, #30
 8006a58:	bf58      	it	pl
 8006a5a:	6962      	ldrpl	r2, [r4, #20]
 8006a5c:	60a2      	str	r2, [r4, #8]
 8006a5e:	e7f4      	b.n	8006a4a <__swsetup_r+0x8e>
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7f7      	b.n	8006a54 <__swsetup_r+0x98>
 8006a64:	2000002c 	.word	0x2000002c

08006a68 <memset>:
 8006a68:	4402      	add	r2, r0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <memset+0xa>
 8006a70:	4770      	bx	lr
 8006a72:	f803 1b01 	strb.w	r1, [r3], #1
 8006a76:	e7f9      	b.n	8006a6c <memset+0x4>

08006a78 <strncmp>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	b16a      	cbz	r2, 8006a98 <strncmp+0x20>
 8006a7c:	3901      	subs	r1, #1
 8006a7e:	1884      	adds	r4, r0, r2
 8006a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d103      	bne.n	8006a94 <strncmp+0x1c>
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d001      	beq.n	8006a94 <strncmp+0x1c>
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d1f5      	bne.n	8006a80 <strncmp+0x8>
 8006a94:	1ad0      	subs	r0, r2, r3
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	4610      	mov	r0, r2
 8006a9a:	e7fc      	b.n	8006a96 <strncmp+0x1e>

08006a9c <_localeconv_r>:
 8006a9c:	4800      	ldr	r0, [pc, #0]	@ (8006aa0 <_localeconv_r+0x4>)
 8006a9e:	4770      	bx	lr
 8006aa0:	2000016c 	.word	0x2000016c

08006aa4 <_close_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	@ (8006ac0 <_close_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fb fe16 	bl	80026e0 <_close>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_close_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_close_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000ab4 	.word	0x20000ab4

08006ac4 <_lseek_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	@ (8006ae4 <_lseek_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fb fe2b 	bl	800272e <_lseek>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_lseek_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_lseek_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000ab4 	.word	0x20000ab4

08006ae8 <_read_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_read_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fb fdd5 	bl	80026a6 <_read>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_read_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_read_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000ab4 	.word	0x20000ab4

08006b0c <_write_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d07      	ldr	r5, [pc, #28]	@ (8006b2c <_write_r+0x20>)
 8006b10:	4604      	mov	r4, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	602a      	str	r2, [r5, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f7fb fe5c 	bl	80027d8 <_write>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_write_r+0x1e>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_write_r+0x1e>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20000ab4 	.word	0x20000ab4

08006b30 <__errno>:
 8006b30:	4b01      	ldr	r3, [pc, #4]	@ (8006b38 <__errno+0x8>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	2000002c 	.word	0x2000002c

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	@ (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b80 <__libc_init_array+0x44>)
 8006b50:	f003 f856 	bl	8009c00 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	0800c258 	.word	0x0800c258
 8006b78:	0800c258 	.word	0x0800c258
 8006b7c:	0800c258 	.word	0x0800c258
 8006b80:	0800c25c 	.word	0x0800c25c

08006b84 <__retarget_lock_init_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <__retarget_lock_acquire_recursive>:
 8006b86:	4770      	bx	lr

08006b88 <__retarget_lock_release_recursive>:
 8006b88:	4770      	bx	lr

08006b8a <memcpy>:
 8006b8a:	440a      	add	r2, r1
 8006b8c:	4291      	cmp	r1, r2
 8006b8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b92:	d100      	bne.n	8006b96 <memcpy+0xc>
 8006b94:	4770      	bx	lr
 8006b96:	b510      	push	{r4, lr}
 8006b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba0:	4291      	cmp	r1, r2
 8006ba2:	d1f9      	bne.n	8006b98 <memcpy+0xe>
 8006ba4:	bd10      	pop	{r4, pc}

08006ba6 <quorem>:
 8006ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	6903      	ldr	r3, [r0, #16]
 8006bac:	690c      	ldr	r4, [r1, #16]
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	db7e      	blt.n	8006cb2 <quorem+0x10c>
 8006bb4:	3c01      	subs	r4, #1
 8006bb6:	f101 0814 	add.w	r8, r1, #20
 8006bba:	00a3      	lsls	r3, r4, #2
 8006bbc:	f100 0514 	add.w	r5, r0, #20
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bdc:	d32e      	bcc.n	8006c3c <quorem+0x96>
 8006bde:	f04f 0a00 	mov.w	sl, #0
 8006be2:	46c4      	mov	ip, r8
 8006be4:	46ae      	mov	lr, r5
 8006be6:	46d3      	mov	fp, sl
 8006be8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bec:	b298      	uxth	r0, r3
 8006bee:	fb06 a000 	mla	r0, r6, r0, sl
 8006bf2:	0c02      	lsrs	r2, r0, #16
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	fb06 2303 	mla	r3, r6, r3, r2
 8006bfa:	f8de 2000 	ldr.w	r2, [lr]
 8006bfe:	b280      	uxth	r0, r0
 8006c00:	b292      	uxth	r2, r2
 8006c02:	1a12      	subs	r2, r2, r0
 8006c04:	445a      	add	r2, fp
 8006c06:	f8de 0000 	ldr.w	r0, [lr]
 8006c0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c1e:	45e1      	cmp	r9, ip
 8006c20:	f84e 2b04 	str.w	r2, [lr], #4
 8006c24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c28:	d2de      	bcs.n	8006be8 <quorem+0x42>
 8006c2a:	9b00      	ldr	r3, [sp, #0]
 8006c2c:	58eb      	ldr	r3, [r5, r3]
 8006c2e:	b92b      	cbnz	r3, 8006c3c <quorem+0x96>
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	3b04      	subs	r3, #4
 8006c34:	429d      	cmp	r5, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	d32f      	bcc.n	8006c9a <quorem+0xf4>
 8006c3a:	613c      	str	r4, [r7, #16]
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f001 f979 	bl	8007f34 <__mcmp>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	db25      	blt.n	8006c92 <quorem+0xec>
 8006c46:	4629      	mov	r1, r5
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c4e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c52:	fa1f fe82 	uxth.w	lr, r2
 8006c56:	fa1f f38c 	uxth.w	r3, ip
 8006c5a:	eba3 030e 	sub.w	r3, r3, lr
 8006c5e:	4403      	add	r3, r0
 8006c60:	0c12      	lsrs	r2, r2, #16
 8006c62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c70:	45c1      	cmp	r9, r8
 8006c72:	f841 3b04 	str.w	r3, [r1], #4
 8006c76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c7a:	d2e6      	bcs.n	8006c4a <quorem+0xa4>
 8006c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c84:	b922      	cbnz	r2, 8006c90 <quorem+0xea>
 8006c86:	3b04      	subs	r3, #4
 8006c88:	429d      	cmp	r5, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	d30b      	bcc.n	8006ca6 <quorem+0x100>
 8006c8e:	613c      	str	r4, [r7, #16]
 8006c90:	3601      	adds	r6, #1
 8006c92:	4630      	mov	r0, r6
 8006c94:	b003      	add	sp, #12
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d1cb      	bne.n	8006c3a <quorem+0x94>
 8006ca2:	3c01      	subs	r4, #1
 8006ca4:	e7c6      	b.n	8006c34 <quorem+0x8e>
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	3b04      	subs	r3, #4
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d1ef      	bne.n	8006c8e <quorem+0xe8>
 8006cae:	3c01      	subs	r4, #1
 8006cb0:	e7ea      	b.n	8006c88 <quorem+0xe2>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	e7ee      	b.n	8006c94 <quorem+0xee>
	...

08006cb8 <_dtoa_r>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	69c7      	ldr	r7, [r0, #28]
 8006cbe:	b099      	sub	sp, #100	@ 0x64
 8006cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cc4:	ec55 4b10 	vmov	r4, r5, d0
 8006cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ccc:	4683      	mov	fp, r0
 8006cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cd2:	b97f      	cbnz	r7, 8006cf4 <_dtoa_r+0x3c>
 8006cd4:	2010      	movs	r0, #16
 8006cd6:	f000 fdfd 	bl	80078d4 <malloc>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ce0:	b920      	cbnz	r0, 8006cec <_dtoa_r+0x34>
 8006ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8006f80 <_dtoa_r+0x2c8>)
 8006ce4:	21ef      	movs	r1, #239	@ 0xef
 8006ce6:	48a7      	ldr	r0, [pc, #668]	@ (8006f84 <_dtoa_r+0x2cc>)
 8006ce8:	f001 fcde 	bl	80086a8 <__assert_func>
 8006cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cf0:	6007      	str	r7, [r0, #0]
 8006cf2:	60c7      	str	r7, [r0, #12]
 8006cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	b159      	cbz	r1, 8006d14 <_dtoa_r+0x5c>
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	604a      	str	r2, [r1, #4]
 8006d00:	2301      	movs	r3, #1
 8006d02:	4093      	lsls	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 feda 	bl	8007ac0 <_Bfree>
 8006d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	1e2b      	subs	r3, r5, #0
 8006d16:	bfb9      	ittee	lt
 8006d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d1c:	9303      	strlt	r3, [sp, #12]
 8006d1e:	2300      	movge	r3, #0
 8006d20:	6033      	strge	r3, [r6, #0]
 8006d22:	9f03      	ldr	r7, [sp, #12]
 8006d24:	4b98      	ldr	r3, [pc, #608]	@ (8006f88 <_dtoa_r+0x2d0>)
 8006d26:	bfbc      	itt	lt
 8006d28:	2201      	movlt	r2, #1
 8006d2a:	6032      	strlt	r2, [r6, #0]
 8006d2c:	43bb      	bics	r3, r7
 8006d2e:	d112      	bne.n	8006d56 <_dtoa_r+0x9e>
 8006d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d3c:	4323      	orrs	r3, r4
 8006d3e:	f000 854d 	beq.w	80077dc <_dtoa_r+0xb24>
 8006d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f9c <_dtoa_r+0x2e4>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 854f 	beq.w	80077ec <_dtoa_r+0xb34>
 8006d4e:	f10a 0303 	add.w	r3, sl, #3
 8006d52:	f000 bd49 	b.w	80077e8 <_dtoa_r+0xb30>
 8006d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	ec51 0b17 	vmov	r0, r1, d7
 8006d60:	2300      	movs	r3, #0
 8006d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d66:	f7f9 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	b158      	cbz	r0, 8006d86 <_dtoa_r+0xce>
 8006d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d70:	2301      	movs	r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d76:	b113      	cbz	r3, 8006d7e <_dtoa_r+0xc6>
 8006d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d7a:	4b84      	ldr	r3, [pc, #528]	@ (8006f8c <_dtoa_r+0x2d4>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fa0 <_dtoa_r+0x2e8>
 8006d82:	f000 bd33 	b.w	80077ec <_dtoa_r+0xb34>
 8006d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8006d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f001 f980 	bl	8008094 <__d2b>
 8006d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d98:	4681      	mov	r9, r0
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	d077      	beq.n	8006e8e <_dtoa_r+0x1d6>
 8006d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006db8:	4619      	mov	r1, r3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4b74      	ldr	r3, [pc, #464]	@ (8006f90 <_dtoa_r+0x2d8>)
 8006dbe:	f7f9 fa6b 	bl	8000298 <__aeabi_dsub>
 8006dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8006f68 <_dtoa_r+0x2b0>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fc1e 	bl	8000608 <__aeabi_dmul>
 8006dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8006f70 <_dtoa_r+0x2b8>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa63 	bl	800029c <__adddf3>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	460d      	mov	r5, r1
 8006ddc:	f7f9 fbaa 	bl	8000534 <__aeabi_i2d>
 8006de0:	a365      	add	r3, pc, #404	@ (adr r3, 8006f78 <_dtoa_r+0x2c0>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fc0f 	bl	8000608 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fa53 	bl	800029c <__adddf3>
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	f7f9 feb5 	bl	8000b68 <__aeabi_d2iz>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4607      	mov	r7, r0
 8006e02:	2300      	movs	r3, #0
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fe70 	bl	8000aec <__aeabi_dcmplt>
 8006e0c:	b140      	cbz	r0, 8006e20 <_dtoa_r+0x168>
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f7f9 fb90 	bl	8000534 <__aeabi_i2d>
 8006e14:	4622      	mov	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	f7f9 fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e1c:	b900      	cbnz	r0, 8006e20 <_dtoa_r+0x168>
 8006e1e:	3f01      	subs	r7, #1
 8006e20:	2f16      	cmp	r7, #22
 8006e22:	d851      	bhi.n	8006ec8 <_dtoa_r+0x210>
 8006e24:	4b5b      	ldr	r3, [pc, #364]	@ (8006f94 <_dtoa_r+0x2dc>)
 8006e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e32:	f7f9 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d048      	beq.n	8006ecc <_dtoa_r+0x214>
 8006e3a:	3f01      	subs	r7, #1
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e42:	1b9b      	subs	r3, r3, r6
 8006e44:	1e5a      	subs	r2, r3, #1
 8006e46:	bf44      	itt	mi
 8006e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e4c:	2300      	movmi	r3, #0
 8006e4e:	9208      	str	r2, [sp, #32]
 8006e50:	bf54      	ite	pl
 8006e52:	f04f 0800 	movpl.w	r8, #0
 8006e56:	9308      	strmi	r3, [sp, #32]
 8006e58:	2f00      	cmp	r7, #0
 8006e5a:	db39      	blt.n	8006ed0 <_dtoa_r+0x218>
 8006e5c:	9b08      	ldr	r3, [sp, #32]
 8006e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e60:	443b      	add	r3, r7
 8006e62:	9308      	str	r3, [sp, #32]
 8006e64:	2300      	movs	r3, #0
 8006e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d864      	bhi.n	8006f38 <_dtoa_r+0x280>
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	bfc4      	itt	gt
 8006e72:	3b04      	subgt	r3, #4
 8006e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	f1a3 0302 	sub.w	r3, r3, #2
 8006e7c:	bfcc      	ite	gt
 8006e7e:	2400      	movgt	r4, #0
 8006e80:	2401      	movle	r4, #1
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d863      	bhi.n	8006f4e <_dtoa_r+0x296>
 8006e86:	e8df f003 	tbb	[pc, r3]
 8006e8a:	372a      	.short	0x372a
 8006e8c:	5535      	.short	0x5535
 8006e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e92:	441e      	add	r6, r3
 8006e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	bfc1      	itttt	gt
 8006e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ea0:	409f      	lslgt	r7, r3
 8006ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eaa:	bfd6      	itet	le
 8006eac:	f1c3 0320 	rsble	r3, r3, #32
 8006eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8006eb8:	f7f9 fb2c 	bl	8000514 <__aeabi_ui2d>
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ec2:	3e01      	subs	r6, #1
 8006ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ec6:	e777      	b.n	8006db8 <_dtoa_r+0x100>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e7b8      	b.n	8006e3e <_dtoa_r+0x186>
 8006ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ece:	e7b7      	b.n	8006e40 <_dtoa_r+0x188>
 8006ed0:	427b      	negs	r3, r7
 8006ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	eba8 0807 	sub.w	r8, r8, r7
 8006eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006edc:	e7c4      	b.n	8006e68 <_dtoa_r+0x1b0>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dc35      	bgt.n	8006f54 <_dtoa_r+0x29c>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ef2:	e00b      	b.n	8006f0c <_dtoa_r+0x254>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e7f3      	b.n	8006ee0 <_dtoa_r+0x228>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	bfb8      	it	lt
 8006f0a:	2301      	movlt	r3, #1
 8006f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f10:	2100      	movs	r1, #0
 8006f12:	2204      	movs	r2, #4
 8006f14:	f102 0514 	add.w	r5, r2, #20
 8006f18:	429d      	cmp	r5, r3
 8006f1a:	d91f      	bls.n	8006f5c <_dtoa_r+0x2a4>
 8006f1c:	6041      	str	r1, [r0, #4]
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 fd8e 	bl	8007a40 <_Balloc>
 8006f24:	4682      	mov	sl, r0
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d13c      	bne.n	8006fa4 <_dtoa_r+0x2ec>
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <_dtoa_r+0x2e0>)
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f32:	e6d8      	b.n	8006ce6 <_dtoa_r+0x2e>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7e0      	b.n	8006efa <_dtoa_r+0x242>
 8006f38:	2401      	movs	r4, #1
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2312      	movs	r3, #18
 8006f4c:	e7d0      	b.n	8006ef0 <_dtoa_r+0x238>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f52:	e7f5      	b.n	8006f40 <_dtoa_r+0x288>
 8006f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	e7d7      	b.n	8006f0c <_dtoa_r+0x254>
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	0052      	lsls	r2, r2, #1
 8006f60:	e7d8      	b.n	8006f14 <_dtoa_r+0x25c>
 8006f62:	bf00      	nop
 8006f64:	f3af 8000 	nop.w
 8006f68:	636f4361 	.word	0x636f4361
 8006f6c:	3fd287a7 	.word	0x3fd287a7
 8006f70:	8b60c8b3 	.word	0x8b60c8b3
 8006f74:	3fc68a28 	.word	0x3fc68a28
 8006f78:	509f79fb 	.word	0x509f79fb
 8006f7c:	3fd34413 	.word	0x3fd34413
 8006f80:	0800bd45 	.word	0x0800bd45
 8006f84:	0800bd5c 	.word	0x0800bd5c
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	0800bd15 	.word	0x0800bd15
 8006f90:	3ff80000 	.word	0x3ff80000
 8006f94:	0800be58 	.word	0x0800be58
 8006f98:	0800bdb4 	.word	0x0800bdb4
 8006f9c:	0800bd41 	.word	0x0800bd41
 8006fa0:	0800bd14 	.word	0x0800bd14
 8006fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fa8:	6018      	str	r0, [r3, #0]
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	2b0e      	cmp	r3, #14
 8006fae:	f200 80a4 	bhi.w	80070fa <_dtoa_r+0x442>
 8006fb2:	2c00      	cmp	r4, #0
 8006fb4:	f000 80a1 	beq.w	80070fa <_dtoa_r+0x442>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	dd33      	ble.n	8007024 <_dtoa_r+0x36c>
 8006fbc:	4bad      	ldr	r3, [pc, #692]	@ (8007274 <_dtoa_r+0x5bc>)
 8006fbe:	f007 020f 	and.w	r2, r7, #15
 8006fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc6:	ed93 7b00 	vldr	d7, [r3]
 8006fca:	05f8      	lsls	r0, r7, #23
 8006fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fd4:	d516      	bpl.n	8007004 <_dtoa_r+0x34c>
 8006fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8007278 <_dtoa_r+0x5c0>)
 8006fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fe0:	f7f9 fc3c 	bl	800085c <__aeabi_ddiv>
 8006fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe8:	f004 040f 	and.w	r4, r4, #15
 8006fec:	2603      	movs	r6, #3
 8006fee:	4da2      	ldr	r5, [pc, #648]	@ (8007278 <_dtoa_r+0x5c0>)
 8006ff0:	b954      	cbnz	r4, 8007008 <_dtoa_r+0x350>
 8006ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffa:	f7f9 fc2f 	bl	800085c <__aeabi_ddiv>
 8006ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007002:	e028      	b.n	8007056 <_dtoa_r+0x39e>
 8007004:	2602      	movs	r6, #2
 8007006:	e7f2      	b.n	8006fee <_dtoa_r+0x336>
 8007008:	07e1      	lsls	r1, r4, #31
 800700a:	d508      	bpl.n	800701e <_dtoa_r+0x366>
 800700c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007014:	f7f9 faf8 	bl	8000608 <__aeabi_dmul>
 8007018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800701c:	3601      	adds	r6, #1
 800701e:	1064      	asrs	r4, r4, #1
 8007020:	3508      	adds	r5, #8
 8007022:	e7e5      	b.n	8006ff0 <_dtoa_r+0x338>
 8007024:	f000 80d2 	beq.w	80071cc <_dtoa_r+0x514>
 8007028:	427c      	negs	r4, r7
 800702a:	4b92      	ldr	r3, [pc, #584]	@ (8007274 <_dtoa_r+0x5bc>)
 800702c:	4d92      	ldr	r5, [pc, #584]	@ (8007278 <_dtoa_r+0x5c0>)
 800702e:	f004 020f 	and.w	r2, r4, #15
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703e:	f7f9 fae3 	bl	8000608 <__aeabi_dmul>
 8007042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007046:	1124      	asrs	r4, r4, #4
 8007048:	2300      	movs	r3, #0
 800704a:	2602      	movs	r6, #2
 800704c:	2c00      	cmp	r4, #0
 800704e:	f040 80b2 	bne.w	80071b6 <_dtoa_r+0x4fe>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d3      	bne.n	8006ffe <_dtoa_r+0x346>
 8007056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80b7 	beq.w	80071d0 <_dtoa_r+0x518>
 8007062:	4b86      	ldr	r3, [pc, #536]	@ (800727c <_dtoa_r+0x5c4>)
 8007064:	2200      	movs	r2, #0
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	f000 80ae 	beq.w	80071d0 <_dtoa_r+0x518>
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80aa 	beq.w	80071d0 <_dtoa_r+0x518>
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd37      	ble.n	80070f2 <_dtoa_r+0x43a>
 8007082:	1e7b      	subs	r3, r7, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	4620      	mov	r0, r4
 8007088:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <_dtoa_r+0x5c8>)
 800708a:	2200      	movs	r2, #0
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 fabb 	bl	8000608 <__aeabi_dmul>
 8007092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007096:	9c00      	ldr	r4, [sp, #0]
 8007098:	3601      	adds	r6, #1
 800709a:	4630      	mov	r0, r6
 800709c:	f7f9 fa4a 	bl	8000534 <__aeabi_i2d>
 80070a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070a4:	f7f9 fab0 	bl	8000608 <__aeabi_dmul>
 80070a8:	4b76      	ldr	r3, [pc, #472]	@ (8007284 <_dtoa_r+0x5cc>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7f9 f8f6 	bl	800029c <__adddf3>
 80070b0:	4605      	mov	r5, r0
 80070b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	f040 808d 	bne.w	80071d6 <_dtoa_r+0x51e>
 80070bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c0:	4b71      	ldr	r3, [pc, #452]	@ (8007288 <_dtoa_r+0x5d0>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 f8e8 	bl	8000298 <__aeabi_dsub>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4633      	mov	r3, r6
 80070d4:	f7f9 fd28 	bl	8000b28 <__aeabi_dcmpgt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f040 828b 	bne.w	80075f4 <_dtoa_r+0x93c>
 80070de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e2:	462a      	mov	r2, r5
 80070e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070e8:	f7f9 fd00 	bl	8000aec <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f040 8128 	bne.w	8007342 <_dtoa_r+0x68a>
 80070f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f2c0 815a 	blt.w	80073b6 <_dtoa_r+0x6fe>
 8007102:	2f0e      	cmp	r7, #14
 8007104:	f300 8157 	bgt.w	80073b6 <_dtoa_r+0x6fe>
 8007108:	4b5a      	ldr	r3, [pc, #360]	@ (8007274 <_dtoa_r+0x5bc>)
 800710a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800710e:	ed93 7b00 	vldr	d7, [r3]
 8007112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	ed8d 7b00 	vstr	d7, [sp]
 800711a:	da03      	bge.n	8007124 <_dtoa_r+0x46c>
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f340 8101 	ble.w	8007326 <_dtoa_r+0x66e>
 8007124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007128:	4656      	mov	r6, sl
 800712a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 fb93 	bl	800085c <__aeabi_ddiv>
 8007136:	f7f9 fd17 	bl	8000b68 <__aeabi_d2iz>
 800713a:	4680      	mov	r8, r0
 800713c:	f7f9 f9fa 	bl	8000534 <__aeabi_i2d>
 8007140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007144:	f7f9 fa60 	bl	8000608 <__aeabi_dmul>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007154:	f7f9 f8a0 	bl	8000298 <__aeabi_dsub>
 8007158:	f806 4b01 	strb.w	r4, [r6], #1
 800715c:	9d07      	ldr	r5, [sp, #28]
 800715e:	eba6 040a 	sub.w	r4, r6, sl
 8007162:	42a5      	cmp	r5, r4
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	f040 8117 	bne.w	800739a <_dtoa_r+0x6e2>
 800716c:	f7f9 f896 	bl	800029c <__adddf3>
 8007170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	f7f9 fcd6 	bl	8000b28 <__aeabi_dcmpgt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f040 80f9 	bne.w	8007374 <_dtoa_r+0x6bc>
 8007182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800718e:	b118      	cbz	r0, 8007198 <_dtoa_r+0x4e0>
 8007190:	f018 0f01 	tst.w	r8, #1
 8007194:	f040 80ee 	bne.w	8007374 <_dtoa_r+0x6bc>
 8007198:	4649      	mov	r1, r9
 800719a:	4658      	mov	r0, fp
 800719c:	f000 fc90 	bl	8007ac0 <_Bfree>
 80071a0:	2300      	movs	r3, #0
 80071a2:	7033      	strb	r3, [r6, #0]
 80071a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071a6:	3701      	adds	r7, #1
 80071a8:	601f      	str	r7, [r3, #0]
 80071aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 831d 	beq.w	80077ec <_dtoa_r+0xb34>
 80071b2:	601e      	str	r6, [r3, #0]
 80071b4:	e31a      	b.n	80077ec <_dtoa_r+0xb34>
 80071b6:	07e2      	lsls	r2, r4, #31
 80071b8:	d505      	bpl.n	80071c6 <_dtoa_r+0x50e>
 80071ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071be:	f7f9 fa23 	bl	8000608 <__aeabi_dmul>
 80071c2:	3601      	adds	r6, #1
 80071c4:	2301      	movs	r3, #1
 80071c6:	1064      	asrs	r4, r4, #1
 80071c8:	3508      	adds	r5, #8
 80071ca:	e73f      	b.n	800704c <_dtoa_r+0x394>
 80071cc:	2602      	movs	r6, #2
 80071ce:	e742      	b.n	8007056 <_dtoa_r+0x39e>
 80071d0:	9c07      	ldr	r4, [sp, #28]
 80071d2:	9704      	str	r7, [sp, #16]
 80071d4:	e761      	b.n	800709a <_dtoa_r+0x3e2>
 80071d6:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <_dtoa_r+0x5bc>)
 80071d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071e2:	4454      	add	r4, sl
 80071e4:	2900      	cmp	r1, #0
 80071e6:	d053      	beq.n	8007290 <_dtoa_r+0x5d8>
 80071e8:	4928      	ldr	r1, [pc, #160]	@ (800728c <_dtoa_r+0x5d4>)
 80071ea:	2000      	movs	r0, #0
 80071ec:	f7f9 fb36 	bl	800085c <__aeabi_ddiv>
 80071f0:	4633      	mov	r3, r6
 80071f2:	462a      	mov	r2, r5
 80071f4:	f7f9 f850 	bl	8000298 <__aeabi_dsub>
 80071f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071fc:	4656      	mov	r6, sl
 80071fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007202:	f7f9 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8007206:	4605      	mov	r5, r0
 8007208:	f7f9 f994 	bl	8000534 <__aeabi_i2d>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007214:	f7f9 f840 	bl	8000298 <__aeabi_dsub>
 8007218:	3530      	adds	r5, #48	@ 0x30
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007222:	f806 5b01 	strb.w	r5, [r6], #1
 8007226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800722a:	f7f9 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d171      	bne.n	8007316 <_dtoa_r+0x65e>
 8007232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007236:	4911      	ldr	r1, [pc, #68]	@ (800727c <_dtoa_r+0x5c4>)
 8007238:	2000      	movs	r0, #0
 800723a:	f7f9 f82d 	bl	8000298 <__aeabi_dsub>
 800723e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007242:	f7f9 fc53 	bl	8000aec <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f040 8095 	bne.w	8007376 <_dtoa_r+0x6be>
 800724c:	42a6      	cmp	r6, r4
 800724e:	f43f af50 	beq.w	80070f2 <_dtoa_r+0x43a>
 8007252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007256:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <_dtoa_r+0x5c8>)
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f9d5 	bl	8000608 <__aeabi_dmul>
 800725e:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <_dtoa_r+0x5c8>)
 8007260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007264:	2200      	movs	r2, #0
 8007266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726a:	f7f9 f9cd 	bl	8000608 <__aeabi_dmul>
 800726e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007272:	e7c4      	b.n	80071fe <_dtoa_r+0x546>
 8007274:	0800be58 	.word	0x0800be58
 8007278:	0800be30 	.word	0x0800be30
 800727c:	3ff00000 	.word	0x3ff00000
 8007280:	40240000 	.word	0x40240000
 8007284:	401c0000 	.word	0x401c0000
 8007288:	40140000 	.word	0x40140000
 800728c:	3fe00000 	.word	0x3fe00000
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	f7f9 f9b8 	bl	8000608 <__aeabi_dmul>
 8007298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800729c:	9415      	str	r4, [sp, #84]	@ 0x54
 800729e:	4656      	mov	r6, sl
 80072a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a4:	f7f9 fc60 	bl	8000b68 <__aeabi_d2iz>
 80072a8:	4605      	mov	r5, r0
 80072aa:	f7f9 f943 	bl	8000534 <__aeabi_i2d>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b6:	f7f8 ffef 	bl	8000298 <__aeabi_dsub>
 80072ba:	3530      	adds	r5, #48	@ 0x30
 80072bc:	f806 5b01 	strb.w	r5, [r6], #1
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	d124      	bne.n	800731a <_dtoa_r+0x662>
 80072d0:	4bac      	ldr	r3, [pc, #688]	@ (8007584 <_dtoa_r+0x8cc>)
 80072d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072d6:	f7f8 ffe1 	bl	800029c <__adddf3>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	f7f9 fc21 	bl	8000b28 <__aeabi_dcmpgt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d145      	bne.n	8007376 <_dtoa_r+0x6be>
 80072ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072ee:	49a5      	ldr	r1, [pc, #660]	@ (8007584 <_dtoa_r+0x8cc>)
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7f8 ffd1 	bl	8000298 <__aeabi_dsub>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fe:	f7f9 fbf5 	bl	8000aec <__aeabi_dcmplt>
 8007302:	2800      	cmp	r0, #0
 8007304:	f43f aef5 	beq.w	80070f2 <_dtoa_r+0x43a>
 8007308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800730a:	1e73      	subs	r3, r6, #1
 800730c:	9315      	str	r3, [sp, #84]	@ 0x54
 800730e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007312:	2b30      	cmp	r3, #48	@ 0x30
 8007314:	d0f8      	beq.n	8007308 <_dtoa_r+0x650>
 8007316:	9f04      	ldr	r7, [sp, #16]
 8007318:	e73e      	b.n	8007198 <_dtoa_r+0x4e0>
 800731a:	4b9b      	ldr	r3, [pc, #620]	@ (8007588 <_dtoa_r+0x8d0>)
 800731c:	f7f9 f974 	bl	8000608 <__aeabi_dmul>
 8007320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007324:	e7bc      	b.n	80072a0 <_dtoa_r+0x5e8>
 8007326:	d10c      	bne.n	8007342 <_dtoa_r+0x68a>
 8007328:	4b98      	ldr	r3, [pc, #608]	@ (800758c <_dtoa_r+0x8d4>)
 800732a:	2200      	movs	r2, #0
 800732c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007330:	f7f9 f96a 	bl	8000608 <__aeabi_dmul>
 8007334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007338:	f7f9 fbec 	bl	8000b14 <__aeabi_dcmpge>
 800733c:	2800      	cmp	r0, #0
 800733e:	f000 8157 	beq.w	80075f0 <_dtoa_r+0x938>
 8007342:	2400      	movs	r4, #0
 8007344:	4625      	mov	r5, r4
 8007346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007348:	43db      	mvns	r3, r3
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	4656      	mov	r6, sl
 800734e:	2700      	movs	r7, #0
 8007350:	4621      	mov	r1, r4
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fbb4 	bl	8007ac0 <_Bfree>
 8007358:	2d00      	cmp	r5, #0
 800735a:	d0dc      	beq.n	8007316 <_dtoa_r+0x65e>
 800735c:	b12f      	cbz	r7, 800736a <_dtoa_r+0x6b2>
 800735e:	42af      	cmp	r7, r5
 8007360:	d003      	beq.n	800736a <_dtoa_r+0x6b2>
 8007362:	4639      	mov	r1, r7
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fbab 	bl	8007ac0 <_Bfree>
 800736a:	4629      	mov	r1, r5
 800736c:	4658      	mov	r0, fp
 800736e:	f000 fba7 	bl	8007ac0 <_Bfree>
 8007372:	e7d0      	b.n	8007316 <_dtoa_r+0x65e>
 8007374:	9704      	str	r7, [sp, #16]
 8007376:	4633      	mov	r3, r6
 8007378:	461e      	mov	r6, r3
 800737a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800737e:	2a39      	cmp	r2, #57	@ 0x39
 8007380:	d107      	bne.n	8007392 <_dtoa_r+0x6da>
 8007382:	459a      	cmp	sl, r3
 8007384:	d1f8      	bne.n	8007378 <_dtoa_r+0x6c0>
 8007386:	9a04      	ldr	r2, [sp, #16]
 8007388:	3201      	adds	r2, #1
 800738a:	9204      	str	r2, [sp, #16]
 800738c:	2230      	movs	r2, #48	@ 0x30
 800738e:	f88a 2000 	strb.w	r2, [sl]
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e7bd      	b.n	8007316 <_dtoa_r+0x65e>
 800739a:	4b7b      	ldr	r3, [pc, #492]	@ (8007588 <_dtoa_r+0x8d0>)
 800739c:	2200      	movs	r2, #0
 800739e:	f7f9 f933 	bl	8000608 <__aeabi_dmul>
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	f7f9 fb95 	bl	8000ad8 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f aebb 	beq.w	800712a <_dtoa_r+0x472>
 80073b4:	e6f0      	b.n	8007198 <_dtoa_r+0x4e0>
 80073b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	f000 80db 	beq.w	8007574 <_dtoa_r+0x8bc>
 80073be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c0:	2a01      	cmp	r2, #1
 80073c2:	f300 80bf 	bgt.w	8007544 <_dtoa_r+0x88c>
 80073c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	f000 80b7 	beq.w	800753c <_dtoa_r+0x884>
 80073ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073d4:	4646      	mov	r6, r8
 80073d6:	9a08      	ldr	r2, [sp, #32]
 80073d8:	2101      	movs	r1, #1
 80073da:	441a      	add	r2, r3
 80073dc:	4658      	mov	r0, fp
 80073de:	4498      	add	r8, r3
 80073e0:	9208      	str	r2, [sp, #32]
 80073e2:	f000 fc21 	bl	8007c28 <__i2b>
 80073e6:	4605      	mov	r5, r0
 80073e8:	b15e      	cbz	r6, 8007402 <_dtoa_r+0x74a>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd08      	ble.n	8007402 <_dtoa_r+0x74a>
 80073f0:	42b3      	cmp	r3, r6
 80073f2:	9a08      	ldr	r2, [sp, #32]
 80073f4:	bfa8      	it	ge
 80073f6:	4633      	movge	r3, r6
 80073f8:	eba8 0803 	sub.w	r8, r8, r3
 80073fc:	1af6      	subs	r6, r6, r3
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007404:	b1f3      	cbz	r3, 8007444 <_dtoa_r+0x78c>
 8007406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80b7 	beq.w	800757c <_dtoa_r+0x8c4>
 800740e:	b18c      	cbz	r4, 8007434 <_dtoa_r+0x77c>
 8007410:	4629      	mov	r1, r5
 8007412:	4622      	mov	r2, r4
 8007414:	4658      	mov	r0, fp
 8007416:	f000 fcc7 	bl	8007da8 <__pow5mult>
 800741a:	464a      	mov	r2, r9
 800741c:	4601      	mov	r1, r0
 800741e:	4605      	mov	r5, r0
 8007420:	4658      	mov	r0, fp
 8007422:	f000 fc17 	bl	8007c54 <__multiply>
 8007426:	4649      	mov	r1, r9
 8007428:	9004      	str	r0, [sp, #16]
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fb48 	bl	8007ac0 <_Bfree>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	4699      	mov	r9, r3
 8007434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007436:	1b1a      	subs	r2, r3, r4
 8007438:	d004      	beq.n	8007444 <_dtoa_r+0x78c>
 800743a:	4649      	mov	r1, r9
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fcb3 	bl	8007da8 <__pow5mult>
 8007442:	4681      	mov	r9, r0
 8007444:	2101      	movs	r1, #1
 8007446:	4658      	mov	r0, fp
 8007448:	f000 fbee 	bl	8007c28 <__i2b>
 800744c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800744e:	4604      	mov	r4, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 81cf 	beq.w	80077f4 <_dtoa_r+0xb3c>
 8007456:	461a      	mov	r2, r3
 8007458:	4601      	mov	r1, r0
 800745a:	4658      	mov	r0, fp
 800745c:	f000 fca4 	bl	8007da8 <__pow5mult>
 8007460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007462:	2b01      	cmp	r3, #1
 8007464:	4604      	mov	r4, r0
 8007466:	f300 8095 	bgt.w	8007594 <_dtoa_r+0x8dc>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 8087 	bne.w	8007580 <_dtoa_r+0x8c8>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 8089 	bne.w	8007590 <_dtoa_r+0x8d8>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007484:	0d1b      	lsrs	r3, r3, #20
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	b12b      	cbz	r3, 8007496 <_dtoa_r+0x7de>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	3301      	adds	r3, #1
 800748e:	9308      	str	r3, [sp, #32]
 8007490:	f108 0801 	add.w	r8, r8, #1
 8007494:	2301      	movs	r3, #1
 8007496:	930a      	str	r3, [sp, #40]	@ 0x28
 8007498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 81b0 	beq.w	8007800 <_dtoa_r+0xb48>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074a6:	6918      	ldr	r0, [r3, #16]
 80074a8:	f000 fb72 	bl	8007b90 <__hi0bits>
 80074ac:	f1c0 0020 	rsb	r0, r0, #32
 80074b0:	9b08      	ldr	r3, [sp, #32]
 80074b2:	4418      	add	r0, r3
 80074b4:	f010 001f 	ands.w	r0, r0, #31
 80074b8:	d077      	beq.n	80075aa <_dtoa_r+0x8f2>
 80074ba:	f1c0 0320 	rsb	r3, r0, #32
 80074be:	2b04      	cmp	r3, #4
 80074c0:	dd6b      	ble.n	800759a <_dtoa_r+0x8e2>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	f1c0 001c 	rsb	r0, r0, #28
 80074c8:	4403      	add	r3, r0
 80074ca:	4480      	add	r8, r0
 80074cc:	4406      	add	r6, r0
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	dd05      	ble.n	80074e2 <_dtoa_r+0x82a>
 80074d6:	4649      	mov	r1, r9
 80074d8:	4642      	mov	r2, r8
 80074da:	4658      	mov	r0, fp
 80074dc:	f000 fcbe 	bl	8007e5c <__lshift>
 80074e0:	4681      	mov	r9, r0
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd05      	ble.n	80074f4 <_dtoa_r+0x83c>
 80074e8:	4621      	mov	r1, r4
 80074ea:	461a      	mov	r2, r3
 80074ec:	4658      	mov	r0, fp
 80074ee:	f000 fcb5 	bl	8007e5c <__lshift>
 80074f2:	4604      	mov	r4, r0
 80074f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d059      	beq.n	80075ae <_dtoa_r+0x8f6>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4648      	mov	r0, r9
 80074fe:	f000 fd19 	bl	8007f34 <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	da53      	bge.n	80075ae <_dtoa_r+0x8f6>
 8007506:	1e7b      	subs	r3, r7, #1
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	4649      	mov	r1, r9
 800750c:	2300      	movs	r3, #0
 800750e:	220a      	movs	r2, #10
 8007510:	4658      	mov	r0, fp
 8007512:	f000 faf7 	bl	8007b04 <__multadd>
 8007516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007518:	4681      	mov	r9, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8172 	beq.w	8007804 <_dtoa_r+0xb4c>
 8007520:	2300      	movs	r3, #0
 8007522:	4629      	mov	r1, r5
 8007524:	220a      	movs	r2, #10
 8007526:	4658      	mov	r0, fp
 8007528:	f000 faec 	bl	8007b04 <__multadd>
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	4605      	mov	r5, r0
 8007532:	dc67      	bgt.n	8007604 <_dtoa_r+0x94c>
 8007534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007536:	2b02      	cmp	r3, #2
 8007538:	dc41      	bgt.n	80075be <_dtoa_r+0x906>
 800753a:	e063      	b.n	8007604 <_dtoa_r+0x94c>
 800753c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800753e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007542:	e746      	b.n	80073d2 <_dtoa_r+0x71a>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	1e5c      	subs	r4, r3, #1
 8007548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800754a:	42a3      	cmp	r3, r4
 800754c:	bfbf      	itttt	lt
 800754e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007554:	1ae3      	sublt	r3, r4, r3
 8007556:	bfb4      	ite	lt
 8007558:	18d2      	addlt	r2, r2, r3
 800755a:	1b1c      	subge	r4, r3, r4
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	bfbc      	itt	lt
 8007560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007562:	2400      	movlt	r4, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	bfb5      	itete	lt
 8007568:	eba8 0603 	sublt.w	r6, r8, r3
 800756c:	9b07      	ldrge	r3, [sp, #28]
 800756e:	2300      	movlt	r3, #0
 8007570:	4646      	movge	r6, r8
 8007572:	e730      	b.n	80073d6 <_dtoa_r+0x71e>
 8007574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007578:	4646      	mov	r6, r8
 800757a:	e735      	b.n	80073e8 <_dtoa_r+0x730>
 800757c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800757e:	e75c      	b.n	800743a <_dtoa_r+0x782>
 8007580:	2300      	movs	r3, #0
 8007582:	e788      	b.n	8007496 <_dtoa_r+0x7de>
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	40240000 	.word	0x40240000
 800758c:	40140000 	.word	0x40140000
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	e780      	b.n	8007496 <_dtoa_r+0x7de>
 8007594:	2300      	movs	r3, #0
 8007596:	930a      	str	r3, [sp, #40]	@ 0x28
 8007598:	e782      	b.n	80074a0 <_dtoa_r+0x7e8>
 800759a:	d099      	beq.n	80074d0 <_dtoa_r+0x818>
 800759c:	9a08      	ldr	r2, [sp, #32]
 800759e:	331c      	adds	r3, #28
 80075a0:	441a      	add	r2, r3
 80075a2:	4498      	add	r8, r3
 80075a4:	441e      	add	r6, r3
 80075a6:	9208      	str	r2, [sp, #32]
 80075a8:	e792      	b.n	80074d0 <_dtoa_r+0x818>
 80075aa:	4603      	mov	r3, r0
 80075ac:	e7f6      	b.n	800759c <_dtoa_r+0x8e4>
 80075ae:	9b07      	ldr	r3, [sp, #28]
 80075b0:	9704      	str	r7, [sp, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc20      	bgt.n	80075f8 <_dtoa_r+0x940>
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	dd1e      	ble.n	80075fc <_dtoa_r+0x944>
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f47f aec0 	bne.w	8007346 <_dtoa_r+0x68e>
 80075c6:	4621      	mov	r1, r4
 80075c8:	2205      	movs	r2, #5
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 fa9a 	bl	8007b04 <__multadd>
 80075d0:	4601      	mov	r1, r0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4648      	mov	r0, r9
 80075d6:	f000 fcad 	bl	8007f34 <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	f77f aeb3 	ble.w	8007346 <_dtoa_r+0x68e>
 80075e0:	4656      	mov	r6, sl
 80075e2:	2331      	movs	r3, #49	@ 0x31
 80075e4:	f806 3b01 	strb.w	r3, [r6], #1
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	e6ae      	b.n	800734e <_dtoa_r+0x696>
 80075f0:	9c07      	ldr	r4, [sp, #28]
 80075f2:	9704      	str	r7, [sp, #16]
 80075f4:	4625      	mov	r5, r4
 80075f6:	e7f3      	b.n	80075e0 <_dtoa_r+0x928>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8104 	beq.w	800780c <_dtoa_r+0xb54>
 8007604:	2e00      	cmp	r6, #0
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x95c>
 8007608:	4629      	mov	r1, r5
 800760a:	4632      	mov	r2, r6
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fc25 	bl	8007e5c <__lshift>
 8007612:	4605      	mov	r5, r0
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05a      	beq.n	80076d0 <_dtoa_r+0xa18>
 800761a:	6869      	ldr	r1, [r5, #4]
 800761c:	4658      	mov	r0, fp
 800761e:	f000 fa0f 	bl	8007a40 <_Balloc>
 8007622:	4606      	mov	r6, r0
 8007624:	b928      	cbnz	r0, 8007632 <_dtoa_r+0x97a>
 8007626:	4b84      	ldr	r3, [pc, #528]	@ (8007838 <_dtoa_r+0xb80>)
 8007628:	4602      	mov	r2, r0
 800762a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800762e:	f7ff bb5a 	b.w	8006ce6 <_dtoa_r+0x2e>
 8007632:	692a      	ldr	r2, [r5, #16]
 8007634:	3202      	adds	r2, #2
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	f105 010c 	add.w	r1, r5, #12
 800763c:	300c      	adds	r0, #12
 800763e:	f7ff faa4 	bl	8006b8a <memcpy>
 8007642:	2201      	movs	r2, #1
 8007644:	4631      	mov	r1, r6
 8007646:	4658      	mov	r0, fp
 8007648:	f000 fc08 	bl	8007e5c <__lshift>
 800764c:	f10a 0301 	add.w	r3, sl, #1
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	4453      	add	r3, sl
 8007656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	462f      	mov	r7, r5
 8007660:	930a      	str	r3, [sp, #40]	@ 0x28
 8007662:	4605      	mov	r5, r0
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	4621      	mov	r1, r4
 8007668:	3b01      	subs	r3, #1
 800766a:	4648      	mov	r0, r9
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	f7ff fa9a 	bl	8006ba6 <quorem>
 8007672:	4639      	mov	r1, r7
 8007674:	9002      	str	r0, [sp, #8]
 8007676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800767a:	4648      	mov	r0, r9
 800767c:	f000 fc5a 	bl	8007f34 <__mcmp>
 8007680:	462a      	mov	r2, r5
 8007682:	9008      	str	r0, [sp, #32]
 8007684:	4621      	mov	r1, r4
 8007686:	4658      	mov	r0, fp
 8007688:	f000 fc70 	bl	8007f6c <__mdiff>
 800768c:	68c2      	ldr	r2, [r0, #12]
 800768e:	4606      	mov	r6, r0
 8007690:	bb02      	cbnz	r2, 80076d4 <_dtoa_r+0xa1c>
 8007692:	4601      	mov	r1, r0
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fc4d 	bl	8007f34 <__mcmp>
 800769a:	4602      	mov	r2, r0
 800769c:	4631      	mov	r1, r6
 800769e:	4658      	mov	r0, fp
 80076a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076a2:	f000 fa0d 	bl	8007ac0 <_Bfree>
 80076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076aa:	9e07      	ldr	r6, [sp, #28]
 80076ac:	ea43 0102 	orr.w	r1, r3, r2
 80076b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b2:	4319      	orrs	r1, r3
 80076b4:	d110      	bne.n	80076d8 <_dtoa_r+0xa20>
 80076b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ba:	d029      	beq.n	8007710 <_dtoa_r+0xa58>
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd02      	ble.n	80076c8 <_dtoa_r+0xa10>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	f883 8000 	strb.w	r8, [r3]
 80076ce:	e63f      	b.n	8007350 <_dtoa_r+0x698>
 80076d0:	4628      	mov	r0, r5
 80076d2:	e7bb      	b.n	800764c <_dtoa_r+0x994>
 80076d4:	2201      	movs	r2, #1
 80076d6:	e7e1      	b.n	800769c <_dtoa_r+0x9e4>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	db04      	blt.n	80076e8 <_dtoa_r+0xa30>
 80076de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076e0:	430b      	orrs	r3, r1
 80076e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076e4:	430b      	orrs	r3, r1
 80076e6:	d120      	bne.n	800772a <_dtoa_r+0xa72>
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	dded      	ble.n	80076c8 <_dtoa_r+0xa10>
 80076ec:	4649      	mov	r1, r9
 80076ee:	2201      	movs	r2, #1
 80076f0:	4658      	mov	r0, fp
 80076f2:	f000 fbb3 	bl	8007e5c <__lshift>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4681      	mov	r9, r0
 80076fa:	f000 fc1b 	bl	8007f34 <__mcmp>
 80076fe:	2800      	cmp	r0, #0
 8007700:	dc03      	bgt.n	800770a <_dtoa_r+0xa52>
 8007702:	d1e1      	bne.n	80076c8 <_dtoa_r+0xa10>
 8007704:	f018 0f01 	tst.w	r8, #1
 8007708:	d0de      	beq.n	80076c8 <_dtoa_r+0xa10>
 800770a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800770e:	d1d8      	bne.n	80076c2 <_dtoa_r+0xa0a>
 8007710:	9a00      	ldr	r2, [sp, #0]
 8007712:	2339      	movs	r3, #57	@ 0x39
 8007714:	7013      	strb	r3, [r2, #0]
 8007716:	4633      	mov	r3, r6
 8007718:	461e      	mov	r6, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007720:	2a39      	cmp	r2, #57	@ 0x39
 8007722:	d052      	beq.n	80077ca <_dtoa_r+0xb12>
 8007724:	3201      	adds	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e612      	b.n	8007350 <_dtoa_r+0x698>
 800772a:	2a00      	cmp	r2, #0
 800772c:	dd07      	ble.n	800773e <_dtoa_r+0xa86>
 800772e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007732:	d0ed      	beq.n	8007710 <_dtoa_r+0xa58>
 8007734:	9a00      	ldr	r2, [sp, #0]
 8007736:	f108 0301 	add.w	r3, r8, #1
 800773a:	7013      	strb	r3, [r2, #0]
 800773c:	e608      	b.n	8007350 <_dtoa_r+0x698>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	9a07      	ldr	r2, [sp, #28]
 8007742:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007748:	4293      	cmp	r3, r2
 800774a:	d028      	beq.n	800779e <_dtoa_r+0xae6>
 800774c:	4649      	mov	r1, r9
 800774e:	2300      	movs	r3, #0
 8007750:	220a      	movs	r2, #10
 8007752:	4658      	mov	r0, fp
 8007754:	f000 f9d6 	bl	8007b04 <__multadd>
 8007758:	42af      	cmp	r7, r5
 800775a:	4681      	mov	r9, r0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f04f 020a 	mov.w	r2, #10
 8007764:	4639      	mov	r1, r7
 8007766:	4658      	mov	r0, fp
 8007768:	d107      	bne.n	800777a <_dtoa_r+0xac2>
 800776a:	f000 f9cb 	bl	8007b04 <__multadd>
 800776e:	4607      	mov	r7, r0
 8007770:	4605      	mov	r5, r0
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	9307      	str	r3, [sp, #28]
 8007778:	e774      	b.n	8007664 <_dtoa_r+0x9ac>
 800777a:	f000 f9c3 	bl	8007b04 <__multadd>
 800777e:	4629      	mov	r1, r5
 8007780:	4607      	mov	r7, r0
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	4658      	mov	r0, fp
 8007788:	f000 f9bc 	bl	8007b04 <__multadd>
 800778c:	4605      	mov	r5, r0
 800778e:	e7f0      	b.n	8007772 <_dtoa_r+0xaba>
 8007790:	9b00      	ldr	r3, [sp, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfcc      	ite	gt
 8007796:	461e      	movgt	r6, r3
 8007798:	2601      	movle	r6, #1
 800779a:	4456      	add	r6, sl
 800779c:	2700      	movs	r7, #0
 800779e:	4649      	mov	r1, r9
 80077a0:	2201      	movs	r2, #1
 80077a2:	4658      	mov	r0, fp
 80077a4:	f000 fb5a 	bl	8007e5c <__lshift>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4681      	mov	r9, r0
 80077ac:	f000 fbc2 	bl	8007f34 <__mcmp>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dcb0      	bgt.n	8007716 <_dtoa_r+0xa5e>
 80077b4:	d102      	bne.n	80077bc <_dtoa_r+0xb04>
 80077b6:	f018 0f01 	tst.w	r8, #1
 80077ba:	d1ac      	bne.n	8007716 <_dtoa_r+0xa5e>
 80077bc:	4633      	mov	r3, r6
 80077be:	461e      	mov	r6, r3
 80077c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c4:	2a30      	cmp	r2, #48	@ 0x30
 80077c6:	d0fa      	beq.n	80077be <_dtoa_r+0xb06>
 80077c8:	e5c2      	b.n	8007350 <_dtoa_r+0x698>
 80077ca:	459a      	cmp	sl, r3
 80077cc:	d1a4      	bne.n	8007718 <_dtoa_r+0xa60>
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	3301      	adds	r3, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	2331      	movs	r3, #49	@ 0x31
 80077d6:	f88a 3000 	strb.w	r3, [sl]
 80077da:	e5b9      	b.n	8007350 <_dtoa_r+0x698>
 80077dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800783c <_dtoa_r+0xb84>
 80077e2:	b11b      	cbz	r3, 80077ec <_dtoa_r+0xb34>
 80077e4:	f10a 0308 	add.w	r3, sl, #8
 80077e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4650      	mov	r0, sl
 80077ee:	b019      	add	sp, #100	@ 0x64
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f77f ae37 	ble.w	800746a <_dtoa_r+0x7b2>
 80077fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007800:	2001      	movs	r0, #1
 8007802:	e655      	b.n	80074b0 <_dtoa_r+0x7f8>
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f77f aed6 	ble.w	80075b8 <_dtoa_r+0x900>
 800780c:	4656      	mov	r6, sl
 800780e:	4621      	mov	r1, r4
 8007810:	4648      	mov	r0, r9
 8007812:	f7ff f9c8 	bl	8006ba6 <quorem>
 8007816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800781a:	f806 8b01 	strb.w	r8, [r6], #1
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	eba6 020a 	sub.w	r2, r6, sl
 8007824:	4293      	cmp	r3, r2
 8007826:	ddb3      	ble.n	8007790 <_dtoa_r+0xad8>
 8007828:	4649      	mov	r1, r9
 800782a:	2300      	movs	r3, #0
 800782c:	220a      	movs	r2, #10
 800782e:	4658      	mov	r0, fp
 8007830:	f000 f968 	bl	8007b04 <__multadd>
 8007834:	4681      	mov	r9, r0
 8007836:	e7ea      	b.n	800780e <_dtoa_r+0xb56>
 8007838:	0800bdb4 	.word	0x0800bdb4
 800783c:	0800bd38 	.word	0x0800bd38

08007840 <_free_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4605      	mov	r5, r0
 8007844:	2900      	cmp	r1, #0
 8007846:	d041      	beq.n	80078cc <_free_r+0x8c>
 8007848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784c:	1f0c      	subs	r4, r1, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb8      	it	lt
 8007852:	18e4      	addlt	r4, r4, r3
 8007854:	f000 f8e8 	bl	8007a28 <__malloc_lock>
 8007858:	4a1d      	ldr	r2, [pc, #116]	@ (80078d0 <_free_r+0x90>)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	b933      	cbnz	r3, 800786c <_free_r+0x2c>
 800785e:	6063      	str	r3, [r4, #4]
 8007860:	6014      	str	r4, [r2, #0]
 8007862:	4628      	mov	r0, r5
 8007864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007868:	f000 b8e4 	b.w	8007a34 <__malloc_unlock>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d908      	bls.n	8007882 <_free_r+0x42>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	1821      	adds	r1, r4, r0
 8007874:	428b      	cmp	r3, r1
 8007876:	bf01      	itttt	eq
 8007878:	6819      	ldreq	r1, [r3, #0]
 800787a:	685b      	ldreq	r3, [r3, #4]
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	e7ed      	b.n	800785e <_free_r+0x1e>
 8007882:	461a      	mov	r2, r3
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b10b      	cbz	r3, 800788c <_free_r+0x4c>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d9fa      	bls.n	8007882 <_free_r+0x42>
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	1850      	adds	r0, r2, r1
 8007890:	42a0      	cmp	r0, r4
 8007892:	d10b      	bne.n	80078ac <_free_r+0x6c>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	4401      	add	r1, r0
 8007898:	1850      	adds	r0, r2, r1
 800789a:	4283      	cmp	r3, r0
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	d1e0      	bne.n	8007862 <_free_r+0x22>
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	6053      	str	r3, [r2, #4]
 80078a6:	4408      	add	r0, r1
 80078a8:	6010      	str	r0, [r2, #0]
 80078aa:	e7da      	b.n	8007862 <_free_r+0x22>
 80078ac:	d902      	bls.n	80078b4 <_free_r+0x74>
 80078ae:	230c      	movs	r3, #12
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	e7d6      	b.n	8007862 <_free_r+0x22>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	1821      	adds	r1, r4, r0
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf04      	itt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	bf04      	itt	eq
 80078c4:	1809      	addeq	r1, r1, r0
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	6054      	str	r4, [r2, #4]
 80078ca:	e7ca      	b.n	8007862 <_free_r+0x22>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	20000ac0 	.word	0x20000ac0

080078d4 <malloc>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	@ (80078e0 <malloc+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b825 	b.w	8007928 <_malloc_r>
 80078de:	bf00      	nop
 80078e0:	2000002c 	.word	0x2000002c

080078e4 <sbrk_aligned>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0f      	ldr	r6, [pc, #60]	@ (8007924 <sbrk_aligned+0x40>)
 80078e8:	460c      	mov	r4, r1
 80078ea:	6831      	ldr	r1, [r6, #0]
 80078ec:	4605      	mov	r5, r0
 80078ee:	b911      	cbnz	r1, 80078f6 <sbrk_aligned+0x12>
 80078f0:	f000 feca 	bl	8008688 <_sbrk_r>
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fec5 	bl	8008688 <_sbrk_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d103      	bne.n	800790a <sbrk_aligned+0x26>
 8007902:	f04f 34ff 	mov.w	r4, #4294967295
 8007906:	4620      	mov	r0, r4
 8007908:	bd70      	pop	{r4, r5, r6, pc}
 800790a:	1cc4      	adds	r4, r0, #3
 800790c:	f024 0403 	bic.w	r4, r4, #3
 8007910:	42a0      	cmp	r0, r4
 8007912:	d0f8      	beq.n	8007906 <sbrk_aligned+0x22>
 8007914:	1a21      	subs	r1, r4, r0
 8007916:	4628      	mov	r0, r5
 8007918:	f000 feb6 	bl	8008688 <_sbrk_r>
 800791c:	3001      	adds	r0, #1
 800791e:	d1f2      	bne.n	8007906 <sbrk_aligned+0x22>
 8007920:	e7ef      	b.n	8007902 <sbrk_aligned+0x1e>
 8007922:	bf00      	nop
 8007924:	20000abc 	.word	0x20000abc

08007928 <_malloc_r>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	1ccd      	adds	r5, r1, #3
 800792e:	f025 0503 	bic.w	r5, r5, #3
 8007932:	3508      	adds	r5, #8
 8007934:	2d0c      	cmp	r5, #12
 8007936:	bf38      	it	cc
 8007938:	250c      	movcc	r5, #12
 800793a:	2d00      	cmp	r5, #0
 800793c:	4606      	mov	r6, r0
 800793e:	db01      	blt.n	8007944 <_malloc_r+0x1c>
 8007940:	42a9      	cmp	r1, r5
 8007942:	d904      	bls.n	800794e <_malloc_r+0x26>
 8007944:	230c      	movs	r3, #12
 8007946:	6033      	str	r3, [r6, #0]
 8007948:	2000      	movs	r0, #0
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a24 <_malloc_r+0xfc>
 8007952:	f000 f869 	bl	8007a28 <__malloc_lock>
 8007956:	f8d8 3000 	ldr.w	r3, [r8]
 800795a:	461c      	mov	r4, r3
 800795c:	bb44      	cbnz	r4, 80079b0 <_malloc_r+0x88>
 800795e:	4629      	mov	r1, r5
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff ffbf 	bl	80078e4 <sbrk_aligned>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	4604      	mov	r4, r0
 800796a:	d158      	bne.n	8007a1e <_malloc_r+0xf6>
 800796c:	f8d8 4000 	ldr.w	r4, [r8]
 8007970:	4627      	mov	r7, r4
 8007972:	2f00      	cmp	r7, #0
 8007974:	d143      	bne.n	80079fe <_malloc_r+0xd6>
 8007976:	2c00      	cmp	r4, #0
 8007978:	d04b      	beq.n	8007a12 <_malloc_r+0xea>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	4639      	mov	r1, r7
 800797e:	4630      	mov	r0, r6
 8007980:	eb04 0903 	add.w	r9, r4, r3
 8007984:	f000 fe80 	bl	8008688 <_sbrk_r>
 8007988:	4581      	cmp	r9, r0
 800798a:	d142      	bne.n	8007a12 <_malloc_r+0xea>
 800798c:	6821      	ldr	r1, [r4, #0]
 800798e:	1a6d      	subs	r5, r5, r1
 8007990:	4629      	mov	r1, r5
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff ffa6 	bl	80078e4 <sbrk_aligned>
 8007998:	3001      	adds	r0, #1
 800799a:	d03a      	beq.n	8007a12 <_malloc_r+0xea>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	442b      	add	r3, r5
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	f8d8 3000 	ldr.w	r3, [r8]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	bb62      	cbnz	r2, 8007a04 <_malloc_r+0xdc>
 80079aa:	f8c8 7000 	str.w	r7, [r8]
 80079ae:	e00f      	b.n	80079d0 <_malloc_r+0xa8>
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	1b52      	subs	r2, r2, r5
 80079b4:	d420      	bmi.n	80079f8 <_malloc_r+0xd0>
 80079b6:	2a0b      	cmp	r2, #11
 80079b8:	d917      	bls.n	80079ea <_malloc_r+0xc2>
 80079ba:	1961      	adds	r1, r4, r5
 80079bc:	42a3      	cmp	r3, r4
 80079be:	6025      	str	r5, [r4, #0]
 80079c0:	bf18      	it	ne
 80079c2:	6059      	strne	r1, [r3, #4]
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	bf08      	it	eq
 80079c8:	f8c8 1000 	streq.w	r1, [r8]
 80079cc:	5162      	str	r2, [r4, r5]
 80079ce:	604b      	str	r3, [r1, #4]
 80079d0:	4630      	mov	r0, r6
 80079d2:	f000 f82f 	bl	8007a34 <__malloc_unlock>
 80079d6:	f104 000b 	add.w	r0, r4, #11
 80079da:	1d23      	adds	r3, r4, #4
 80079dc:	f020 0007 	bic.w	r0, r0, #7
 80079e0:	1ac2      	subs	r2, r0, r3
 80079e2:	bf1c      	itt	ne
 80079e4:	1a1b      	subne	r3, r3, r0
 80079e6:	50a3      	strne	r3, [r4, r2]
 80079e8:	e7af      	b.n	800794a <_malloc_r+0x22>
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	bf0c      	ite	eq
 80079f0:	f8c8 2000 	streq.w	r2, [r8]
 80079f4:	605a      	strne	r2, [r3, #4]
 80079f6:	e7eb      	b.n	80079d0 <_malloc_r+0xa8>
 80079f8:	4623      	mov	r3, r4
 80079fa:	6864      	ldr	r4, [r4, #4]
 80079fc:	e7ae      	b.n	800795c <_malloc_r+0x34>
 80079fe:	463c      	mov	r4, r7
 8007a00:	687f      	ldr	r7, [r7, #4]
 8007a02:	e7b6      	b.n	8007972 <_malloc_r+0x4a>
 8007a04:	461a      	mov	r2, r3
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d1fb      	bne.n	8007a04 <_malloc_r+0xdc>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e7de      	b.n	80079d0 <_malloc_r+0xa8>
 8007a12:	230c      	movs	r3, #12
 8007a14:	6033      	str	r3, [r6, #0]
 8007a16:	4630      	mov	r0, r6
 8007a18:	f000 f80c 	bl	8007a34 <__malloc_unlock>
 8007a1c:	e794      	b.n	8007948 <_malloc_r+0x20>
 8007a1e:	6005      	str	r5, [r0, #0]
 8007a20:	e7d6      	b.n	80079d0 <_malloc_r+0xa8>
 8007a22:	bf00      	nop
 8007a24:	20000ac0 	.word	0x20000ac0

08007a28 <__malloc_lock>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__malloc_lock+0x8>)
 8007a2a:	f7ff b8ac 	b.w	8006b86 <__retarget_lock_acquire_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20000ab8 	.word	0x20000ab8

08007a34 <__malloc_unlock>:
 8007a34:	4801      	ldr	r0, [pc, #4]	@ (8007a3c <__malloc_unlock+0x8>)
 8007a36:	f7ff b8a7 	b.w	8006b88 <__retarget_lock_release_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	20000ab8 	.word	0x20000ab8

08007a40 <_Balloc>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	69c6      	ldr	r6, [r0, #28]
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	b976      	cbnz	r6, 8007a68 <_Balloc+0x28>
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	f7ff ff42 	bl	80078d4 <malloc>
 8007a50:	4602      	mov	r2, r0
 8007a52:	61e0      	str	r0, [r4, #28]
 8007a54:	b920      	cbnz	r0, 8007a60 <_Balloc+0x20>
 8007a56:	4b18      	ldr	r3, [pc, #96]	@ (8007ab8 <_Balloc+0x78>)
 8007a58:	4818      	ldr	r0, [pc, #96]	@ (8007abc <_Balloc+0x7c>)
 8007a5a:	216b      	movs	r1, #107	@ 0x6b
 8007a5c:	f000 fe24 	bl	80086a8 <__assert_func>
 8007a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a64:	6006      	str	r6, [r0, #0]
 8007a66:	60c6      	str	r6, [r0, #12]
 8007a68:	69e6      	ldr	r6, [r4, #28]
 8007a6a:	68f3      	ldr	r3, [r6, #12]
 8007a6c:	b183      	cbz	r3, 8007a90 <_Balloc+0x50>
 8007a6e:	69e3      	ldr	r3, [r4, #28]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a76:	b9b8      	cbnz	r0, 8007aa8 <_Balloc+0x68>
 8007a78:	2101      	movs	r1, #1
 8007a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a7e:	1d72      	adds	r2, r6, #5
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 fe2e 	bl	80086e4 <_calloc_r>
 8007a88:	b160      	cbz	r0, 8007aa4 <_Balloc+0x64>
 8007a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a8e:	e00e      	b.n	8007aae <_Balloc+0x6e>
 8007a90:	2221      	movs	r2, #33	@ 0x21
 8007a92:	2104      	movs	r1, #4
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fe25 	bl	80086e4 <_calloc_r>
 8007a9a:	69e3      	ldr	r3, [r4, #28]
 8007a9c:	60f0      	str	r0, [r6, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e4      	bne.n	8007a6e <_Balloc+0x2e>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ab4:	e7f7      	b.n	8007aa6 <_Balloc+0x66>
 8007ab6:	bf00      	nop
 8007ab8:	0800bd45 	.word	0x0800bd45
 8007abc:	0800bdc5 	.word	0x0800bdc5

08007ac0 <_Bfree>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	69c6      	ldr	r6, [r0, #28]
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b976      	cbnz	r6, 8007ae8 <_Bfree+0x28>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f7ff ff02 	bl	80078d4 <malloc>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	61e8      	str	r0, [r5, #28]
 8007ad4:	b920      	cbnz	r0, 8007ae0 <_Bfree+0x20>
 8007ad6:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <_Bfree+0x3c>)
 8007ad8:	4809      	ldr	r0, [pc, #36]	@ (8007b00 <_Bfree+0x40>)
 8007ada:	218f      	movs	r1, #143	@ 0x8f
 8007adc:	f000 fde4 	bl	80086a8 <__assert_func>
 8007ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae4:	6006      	str	r6, [r0, #0]
 8007ae6:	60c6      	str	r6, [r0, #12]
 8007ae8:	b13c      	cbz	r4, 8007afa <_Bfree+0x3a>
 8007aea:	69eb      	ldr	r3, [r5, #28]
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af4:	6021      	str	r1, [r4, #0]
 8007af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	0800bd45 	.word	0x0800bd45
 8007b00:	0800bdc5 	.word	0x0800bdc5

08007b04 <__multadd>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	690d      	ldr	r5, [r1, #16]
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	461e      	mov	r6, r3
 8007b10:	f101 0c14 	add.w	ip, r1, #20
 8007b14:	2000      	movs	r0, #0
 8007b16:	f8dc 3000 	ldr.w	r3, [ip]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b20:	0c1e      	lsrs	r6, r3, #16
 8007b22:	0c0b      	lsrs	r3, r1, #16
 8007b24:	fb02 3306 	mla	r3, r2, r6, r3
 8007b28:	b289      	uxth	r1, r1
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b30:	4285      	cmp	r5, r0
 8007b32:	f84c 1b04 	str.w	r1, [ip], #4
 8007b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b3a:	dcec      	bgt.n	8007b16 <__multadd+0x12>
 8007b3c:	b30e      	cbz	r6, 8007b82 <__multadd+0x7e>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc19      	bgt.n	8007b78 <__multadd+0x74>
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4638      	mov	r0, r7
 8007b48:	3101      	adds	r1, #1
 8007b4a:	f7ff ff79 	bl	8007a40 <_Balloc>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <__multadd+0x5a>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0c      	ldr	r3, [pc, #48]	@ (8007b88 <__multadd+0x84>)
 8007b56:	480d      	ldr	r0, [pc, #52]	@ (8007b8c <__multadd+0x88>)
 8007b58:	21ba      	movs	r1, #186	@ 0xba
 8007b5a:	f000 fda5 	bl	80086a8 <__assert_func>
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	3202      	adds	r2, #2
 8007b62:	f104 010c 	add.w	r1, r4, #12
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	300c      	adds	r0, #12
 8007b6a:	f7ff f80e 	bl	8006b8a <memcpy>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ffa5 	bl	8007ac0 <_Bfree>
 8007b76:	4644      	mov	r4, r8
 8007b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	615e      	str	r6, [r3, #20]
 8007b80:	6125      	str	r5, [r4, #16]
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	0800bdb4 	.word	0x0800bdb4
 8007b8c:	0800bdc5 	.word	0x0800bdc5

08007b90 <__hi0bits>:
 8007b90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b94:	4603      	mov	r3, r0
 8007b96:	bf36      	itet	cc
 8007b98:	0403      	lslcc	r3, r0, #16
 8007b9a:	2000      	movcs	r0, #0
 8007b9c:	2010      	movcc	r0, #16
 8007b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba2:	bf3c      	itt	cc
 8007ba4:	021b      	lslcc	r3, r3, #8
 8007ba6:	3008      	addcc	r0, #8
 8007ba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bac:	bf3c      	itt	cc
 8007bae:	011b      	lslcc	r3, r3, #4
 8007bb0:	3004      	addcc	r0, #4
 8007bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb6:	bf3c      	itt	cc
 8007bb8:	009b      	lslcc	r3, r3, #2
 8007bba:	3002      	addcc	r0, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	db05      	blt.n	8007bcc <__hi0bits+0x3c>
 8007bc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bc4:	f100 0001 	add.w	r0, r0, #1
 8007bc8:	bf08      	it	eq
 8007bca:	2020      	moveq	r0, #32
 8007bcc:	4770      	bx	lr

08007bce <__lo0bits>:
 8007bce:	6803      	ldr	r3, [r0, #0]
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	f013 0007 	ands.w	r0, r3, #7
 8007bd6:	d00b      	beq.n	8007bf0 <__lo0bits+0x22>
 8007bd8:	07d9      	lsls	r1, r3, #31
 8007bda:	d421      	bmi.n	8007c20 <__lo0bits+0x52>
 8007bdc:	0798      	lsls	r0, r3, #30
 8007bde:	bf49      	itett	mi
 8007be0:	085b      	lsrmi	r3, r3, #1
 8007be2:	089b      	lsrpl	r3, r3, #2
 8007be4:	2001      	movmi	r0, #1
 8007be6:	6013      	strmi	r3, [r2, #0]
 8007be8:	bf5c      	itt	pl
 8007bea:	6013      	strpl	r3, [r2, #0]
 8007bec:	2002      	movpl	r0, #2
 8007bee:	4770      	bx	lr
 8007bf0:	b299      	uxth	r1, r3
 8007bf2:	b909      	cbnz	r1, 8007bf8 <__lo0bits+0x2a>
 8007bf4:	0c1b      	lsrs	r3, r3, #16
 8007bf6:	2010      	movs	r0, #16
 8007bf8:	b2d9      	uxtb	r1, r3
 8007bfa:	b909      	cbnz	r1, 8007c00 <__lo0bits+0x32>
 8007bfc:	3008      	adds	r0, #8
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	0719      	lsls	r1, r3, #28
 8007c02:	bf04      	itt	eq
 8007c04:	091b      	lsreq	r3, r3, #4
 8007c06:	3004      	addeq	r0, #4
 8007c08:	0799      	lsls	r1, r3, #30
 8007c0a:	bf04      	itt	eq
 8007c0c:	089b      	lsreq	r3, r3, #2
 8007c0e:	3002      	addeq	r0, #2
 8007c10:	07d9      	lsls	r1, r3, #31
 8007c12:	d403      	bmi.n	8007c1c <__lo0bits+0x4e>
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	f100 0001 	add.w	r0, r0, #1
 8007c1a:	d003      	beq.n	8007c24 <__lo0bits+0x56>
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	4770      	bx	lr
 8007c20:	2000      	movs	r0, #0
 8007c22:	4770      	bx	lr
 8007c24:	2020      	movs	r0, #32
 8007c26:	4770      	bx	lr

08007c28 <__i2b>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	f7ff ff07 	bl	8007a40 <_Balloc>
 8007c32:	4602      	mov	r2, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <__i2b+0x1a>
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <__i2b+0x24>)
 8007c38:	4805      	ldr	r0, [pc, #20]	@ (8007c50 <__i2b+0x28>)
 8007c3a:	f240 1145 	movw	r1, #325	@ 0x145
 8007c3e:	f000 fd33 	bl	80086a8 <__assert_func>
 8007c42:	2301      	movs	r3, #1
 8007c44:	6144      	str	r4, [r0, #20]
 8007c46:	6103      	str	r3, [r0, #16]
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	bf00      	nop
 8007c4c:	0800bdb4 	.word	0x0800bdb4
 8007c50:	0800bdc5 	.word	0x0800bdc5

08007c54 <__multiply>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	4614      	mov	r4, r2
 8007c5a:	690a      	ldr	r2, [r1, #16]
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	bfa8      	it	ge
 8007c62:	4623      	movge	r3, r4
 8007c64:	460f      	mov	r7, r1
 8007c66:	bfa4      	itt	ge
 8007c68:	460c      	movge	r4, r1
 8007c6a:	461f      	movge	r7, r3
 8007c6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c74:	68a3      	ldr	r3, [r4, #8]
 8007c76:	6861      	ldr	r1, [r4, #4]
 8007c78:	eb0a 0609 	add.w	r6, sl, r9
 8007c7c:	42b3      	cmp	r3, r6
 8007c7e:	b085      	sub	sp, #20
 8007c80:	bfb8      	it	lt
 8007c82:	3101      	addlt	r1, #1
 8007c84:	f7ff fedc 	bl	8007a40 <_Balloc>
 8007c88:	b930      	cbnz	r0, 8007c98 <__multiply+0x44>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b44      	ldr	r3, [pc, #272]	@ (8007da0 <__multiply+0x14c>)
 8007c8e:	4845      	ldr	r0, [pc, #276]	@ (8007da4 <__multiply+0x150>)
 8007c90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c94:	f000 fd08 	bl	80086a8 <__assert_func>
 8007c98:	f100 0514 	add.w	r5, r0, #20
 8007c9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ca0:	462b      	mov	r3, r5
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	d321      	bcc.n	8007cec <__multiply+0x98>
 8007ca8:	f107 0114 	add.w	r1, r7, #20
 8007cac:	f104 0214 	add.w	r2, r4, #20
 8007cb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007cb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007cb8:	9302      	str	r3, [sp, #8]
 8007cba:	1b13      	subs	r3, r2, r4
 8007cbc:	3b15      	subs	r3, #21
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	f104 0715 	add.w	r7, r4, #21
 8007cc8:	42ba      	cmp	r2, r7
 8007cca:	bf38      	it	cc
 8007ccc:	2304      	movcc	r3, #4
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	9103      	str	r1, [sp, #12]
 8007cd4:	428b      	cmp	r3, r1
 8007cd6:	d80c      	bhi.n	8007cf2 <__multiply+0x9e>
 8007cd8:	2e00      	cmp	r6, #0
 8007cda:	dd03      	ble.n	8007ce4 <__multiply+0x90>
 8007cdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05b      	beq.n	8007d9c <__multiply+0x148>
 8007ce4:	6106      	str	r6, [r0, #16]
 8007ce6:	b005      	add	sp, #20
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	f843 2b04 	str.w	r2, [r3], #4
 8007cf0:	e7d8      	b.n	8007ca4 <__multiply+0x50>
 8007cf2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cf6:	f1ba 0f00 	cmp.w	sl, #0
 8007cfa:	d024      	beq.n	8007d46 <__multiply+0xf2>
 8007cfc:	f104 0e14 	add.w	lr, r4, #20
 8007d00:	46a9      	mov	r9, r5
 8007d02:	f04f 0c00 	mov.w	ip, #0
 8007d06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8007d0e:	fa1f fb87 	uxth.w	fp, r7
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d1c:	f8d9 7000 	ldr.w	r7, [r9]
 8007d20:	4463      	add	r3, ip
 8007d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d26:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d34:	4572      	cmp	r2, lr
 8007d36:	f849 3b04 	str.w	r3, [r9], #4
 8007d3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d3e:	d8e2      	bhi.n	8007d06 <__multiply+0xb2>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	f845 c003 	str.w	ip, [r5, r3]
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d4c:	3104      	adds	r1, #4
 8007d4e:	f1b9 0f00 	cmp.w	r9, #0
 8007d52:	d021      	beq.n	8007d98 <__multiply+0x144>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	f104 0c14 	add.w	ip, r4, #20
 8007d5a:	46ae      	mov	lr, r5
 8007d5c:	f04f 0a00 	mov.w	sl, #0
 8007d60:	f8bc b000 	ldrh.w	fp, [ip]
 8007d64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d68:	fb09 770b 	mla	r7, r9, fp, r7
 8007d6c:	4457      	add	r7, sl
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d74:	f84e 3b04 	str.w	r3, [lr], #4
 8007d78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d80:	f8be 3000 	ldrh.w	r3, [lr]
 8007d84:	fb09 330a 	mla	r3, r9, sl, r3
 8007d88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d8c:	4562      	cmp	r2, ip
 8007d8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d92:	d8e5      	bhi.n	8007d60 <__multiply+0x10c>
 8007d94:	9f01      	ldr	r7, [sp, #4]
 8007d96:	51eb      	str	r3, [r5, r7]
 8007d98:	3504      	adds	r5, #4
 8007d9a:	e799      	b.n	8007cd0 <__multiply+0x7c>
 8007d9c:	3e01      	subs	r6, #1
 8007d9e:	e79b      	b.n	8007cd8 <__multiply+0x84>
 8007da0:	0800bdb4 	.word	0x0800bdb4
 8007da4:	0800bdc5 	.word	0x0800bdc5

08007da8 <__pow5mult>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	4615      	mov	r5, r2
 8007dae:	f012 0203 	ands.w	r2, r2, #3
 8007db2:	4607      	mov	r7, r0
 8007db4:	460e      	mov	r6, r1
 8007db6:	d007      	beq.n	8007dc8 <__pow5mult+0x20>
 8007db8:	4c25      	ldr	r4, [pc, #148]	@ (8007e50 <__pow5mult+0xa8>)
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dc2:	f7ff fe9f 	bl	8007b04 <__multadd>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	10ad      	asrs	r5, r5, #2
 8007dca:	d03d      	beq.n	8007e48 <__pow5mult+0xa0>
 8007dcc:	69fc      	ldr	r4, [r7, #28]
 8007dce:	b97c      	cbnz	r4, 8007df0 <__pow5mult+0x48>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	f7ff fd7f 	bl	80078d4 <malloc>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	61f8      	str	r0, [r7, #28]
 8007dda:	b928      	cbnz	r0, 8007de8 <__pow5mult+0x40>
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8007e54 <__pow5mult+0xac>)
 8007dde:	481e      	ldr	r0, [pc, #120]	@ (8007e58 <__pow5mult+0xb0>)
 8007de0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007de4:	f000 fc60 	bl	80086a8 <__assert_func>
 8007de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dec:	6004      	str	r4, [r0, #0]
 8007dee:	60c4      	str	r4, [r0, #12]
 8007df0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007df8:	b94c      	cbnz	r4, 8007e0e <__pow5mult+0x66>
 8007dfa:	f240 2171 	movw	r1, #625	@ 0x271
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7ff ff12 	bl	8007c28 <__i2b>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	6003      	str	r3, [r0, #0]
 8007e0e:	f04f 0900 	mov.w	r9, #0
 8007e12:	07eb      	lsls	r3, r5, #31
 8007e14:	d50a      	bpl.n	8007e2c <__pow5mult+0x84>
 8007e16:	4631      	mov	r1, r6
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f7ff ff1a 	bl	8007c54 <__multiply>
 8007e20:	4631      	mov	r1, r6
 8007e22:	4680      	mov	r8, r0
 8007e24:	4638      	mov	r0, r7
 8007e26:	f7ff fe4b 	bl	8007ac0 <_Bfree>
 8007e2a:	4646      	mov	r6, r8
 8007e2c:	106d      	asrs	r5, r5, #1
 8007e2e:	d00b      	beq.n	8007e48 <__pow5mult+0xa0>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	b938      	cbnz	r0, 8007e44 <__pow5mult+0x9c>
 8007e34:	4622      	mov	r2, r4
 8007e36:	4621      	mov	r1, r4
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f7ff ff0b 	bl	8007c54 <__multiply>
 8007e3e:	6020      	str	r0, [r4, #0]
 8007e40:	f8c0 9000 	str.w	r9, [r0]
 8007e44:	4604      	mov	r4, r0
 8007e46:	e7e4      	b.n	8007e12 <__pow5mult+0x6a>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	bf00      	nop
 8007e50:	0800be20 	.word	0x0800be20
 8007e54:	0800bd45 	.word	0x0800bd45
 8007e58:	0800bdc5 	.word	0x0800bdc5

08007e5c <__lshift>:
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	460c      	mov	r4, r1
 8007e62:	6849      	ldr	r1, [r1, #4]
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	4691      	mov	r9, r2
 8007e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e74:	f108 0601 	add.w	r6, r8, #1
 8007e78:	42b3      	cmp	r3, r6
 8007e7a:	db0b      	blt.n	8007e94 <__lshift+0x38>
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f7ff fddf 	bl	8007a40 <_Balloc>
 8007e82:	4605      	mov	r5, r0
 8007e84:	b948      	cbnz	r0, 8007e9a <__lshift+0x3e>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b28      	ldr	r3, [pc, #160]	@ (8007f2c <__lshift+0xd0>)
 8007e8a:	4829      	ldr	r0, [pc, #164]	@ (8007f30 <__lshift+0xd4>)
 8007e8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e90:	f000 fc0a 	bl	80086a8 <__assert_func>
 8007e94:	3101      	adds	r1, #1
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	e7ee      	b.n	8007e78 <__lshift+0x1c>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f100 0114 	add.w	r1, r0, #20
 8007ea0:	f100 0210 	add.w	r2, r0, #16
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	4553      	cmp	r3, sl
 8007ea8:	db33      	blt.n	8007f12 <__lshift+0xb6>
 8007eaa:	6920      	ldr	r0, [r4, #16]
 8007eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eb0:	f104 0314 	add.w	r3, r4, #20
 8007eb4:	f019 091f 	ands.w	r9, r9, #31
 8007eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ec0:	d02b      	beq.n	8007f1a <__lshift+0xbe>
 8007ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ec6:	468a      	mov	sl, r1
 8007ec8:	2200      	movs	r2, #0
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ed0:	4310      	orrs	r0, r2
 8007ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eda:	459c      	cmp	ip, r3
 8007edc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ee0:	d8f3      	bhi.n	8007eca <__lshift+0x6e>
 8007ee2:	ebac 0304 	sub.w	r3, ip, r4
 8007ee6:	3b15      	subs	r3, #21
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	3304      	adds	r3, #4
 8007eee:	f104 0015 	add.w	r0, r4, #21
 8007ef2:	4584      	cmp	ip, r0
 8007ef4:	bf38      	it	cc
 8007ef6:	2304      	movcc	r3, #4
 8007ef8:	50ca      	str	r2, [r1, r3]
 8007efa:	b10a      	cbz	r2, 8007f00 <__lshift+0xa4>
 8007efc:	f108 0602 	add.w	r6, r8, #2
 8007f00:	3e01      	subs	r6, #1
 8007f02:	4638      	mov	r0, r7
 8007f04:	612e      	str	r6, [r5, #16]
 8007f06:	4621      	mov	r1, r4
 8007f08:	f7ff fdda 	bl	8007ac0 <_Bfree>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f16:	3301      	adds	r3, #1
 8007f18:	e7c5      	b.n	8007ea6 <__lshift+0x4a>
 8007f1a:	3904      	subs	r1, #4
 8007f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f24:	459c      	cmp	ip, r3
 8007f26:	d8f9      	bhi.n	8007f1c <__lshift+0xc0>
 8007f28:	e7ea      	b.n	8007f00 <__lshift+0xa4>
 8007f2a:	bf00      	nop
 8007f2c:	0800bdb4 	.word	0x0800bdb4
 8007f30:	0800bdc5 	.word	0x0800bdc5

08007f34 <__mcmp>:
 8007f34:	690a      	ldr	r2, [r1, #16]
 8007f36:	4603      	mov	r3, r0
 8007f38:	6900      	ldr	r0, [r0, #16]
 8007f3a:	1a80      	subs	r0, r0, r2
 8007f3c:	b530      	push	{r4, r5, lr}
 8007f3e:	d10e      	bne.n	8007f5e <__mcmp+0x2a>
 8007f40:	3314      	adds	r3, #20
 8007f42:	3114      	adds	r1, #20
 8007f44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f54:	4295      	cmp	r5, r2
 8007f56:	d003      	beq.n	8007f60 <__mcmp+0x2c>
 8007f58:	d205      	bcs.n	8007f66 <__mcmp+0x32>
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d3f3      	bcc.n	8007f4c <__mcmp+0x18>
 8007f64:	e7fb      	b.n	8007f5e <__mcmp+0x2a>
 8007f66:	2001      	movs	r0, #1
 8007f68:	e7f9      	b.n	8007f5e <__mcmp+0x2a>
	...

08007f6c <__mdiff>:
 8007f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	4689      	mov	r9, r1
 8007f72:	4606      	mov	r6, r0
 8007f74:	4611      	mov	r1, r2
 8007f76:	4648      	mov	r0, r9
 8007f78:	4614      	mov	r4, r2
 8007f7a:	f7ff ffdb 	bl	8007f34 <__mcmp>
 8007f7e:	1e05      	subs	r5, r0, #0
 8007f80:	d112      	bne.n	8007fa8 <__mdiff+0x3c>
 8007f82:	4629      	mov	r1, r5
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff fd5b 	bl	8007a40 <_Balloc>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	b928      	cbnz	r0, 8007f9a <__mdiff+0x2e>
 8007f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800808c <__mdiff+0x120>)
 8007f90:	f240 2137 	movw	r1, #567	@ 0x237
 8007f94:	483e      	ldr	r0, [pc, #248]	@ (8008090 <__mdiff+0x124>)
 8007f96:	f000 fb87 	bl	80086a8 <__assert_func>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	b003      	add	sp, #12
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	bfbc      	itt	lt
 8007faa:	464b      	movlt	r3, r9
 8007fac:	46a1      	movlt	r9, r4
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fb4:	bfba      	itte	lt
 8007fb6:	461c      	movlt	r4, r3
 8007fb8:	2501      	movlt	r5, #1
 8007fba:	2500      	movge	r5, #0
 8007fbc:	f7ff fd40 	bl	8007a40 <_Balloc>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	b918      	cbnz	r0, 8007fcc <__mdiff+0x60>
 8007fc4:	4b31      	ldr	r3, [pc, #196]	@ (800808c <__mdiff+0x120>)
 8007fc6:	f240 2145 	movw	r1, #581	@ 0x245
 8007fca:	e7e3      	b.n	8007f94 <__mdiff+0x28>
 8007fcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fd0:	6926      	ldr	r6, [r4, #16]
 8007fd2:	60c5      	str	r5, [r0, #12]
 8007fd4:	f109 0310 	add.w	r3, r9, #16
 8007fd8:	f109 0514 	add.w	r5, r9, #20
 8007fdc:	f104 0e14 	add.w	lr, r4, #20
 8007fe0:	f100 0b14 	add.w	fp, r0, #20
 8007fe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	46d9      	mov	r9, fp
 8007ff0:	f04f 0c00 	mov.w	ip, #0
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ffa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	fa1f f38a 	uxth.w	r3, sl
 8008004:	4619      	mov	r1, r3
 8008006:	b283      	uxth	r3, r0
 8008008:	1acb      	subs	r3, r1, r3
 800800a:	0c00      	lsrs	r0, r0, #16
 800800c:	4463      	add	r3, ip
 800800e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008016:	b29b      	uxth	r3, r3
 8008018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800801c:	4576      	cmp	r6, lr
 800801e:	f849 3b04 	str.w	r3, [r9], #4
 8008022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008026:	d8e5      	bhi.n	8007ff4 <__mdiff+0x88>
 8008028:	1b33      	subs	r3, r6, r4
 800802a:	3b15      	subs	r3, #21
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	3415      	adds	r4, #21
 8008032:	3304      	adds	r3, #4
 8008034:	42a6      	cmp	r6, r4
 8008036:	bf38      	it	cc
 8008038:	2304      	movcc	r3, #4
 800803a:	441d      	add	r5, r3
 800803c:	445b      	add	r3, fp
 800803e:	461e      	mov	r6, r3
 8008040:	462c      	mov	r4, r5
 8008042:	4544      	cmp	r4, r8
 8008044:	d30e      	bcc.n	8008064 <__mdiff+0xf8>
 8008046:	f108 0103 	add.w	r1, r8, #3
 800804a:	1b49      	subs	r1, r1, r5
 800804c:	f021 0103 	bic.w	r1, r1, #3
 8008050:	3d03      	subs	r5, #3
 8008052:	45a8      	cmp	r8, r5
 8008054:	bf38      	it	cc
 8008056:	2100      	movcc	r1, #0
 8008058:	440b      	add	r3, r1
 800805a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800805e:	b191      	cbz	r1, 8008086 <__mdiff+0x11a>
 8008060:	6117      	str	r7, [r2, #16]
 8008062:	e79d      	b.n	8007fa0 <__mdiff+0x34>
 8008064:	f854 1b04 	ldr.w	r1, [r4], #4
 8008068:	46e6      	mov	lr, ip
 800806a:	0c08      	lsrs	r0, r1, #16
 800806c:	fa1c fc81 	uxtah	ip, ip, r1
 8008070:	4471      	add	r1, lr
 8008072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008076:	b289      	uxth	r1, r1
 8008078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800807c:	f846 1b04 	str.w	r1, [r6], #4
 8008080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008084:	e7dd      	b.n	8008042 <__mdiff+0xd6>
 8008086:	3f01      	subs	r7, #1
 8008088:	e7e7      	b.n	800805a <__mdiff+0xee>
 800808a:	bf00      	nop
 800808c:	0800bdb4 	.word	0x0800bdb4
 8008090:	0800bdc5 	.word	0x0800bdc5

08008094 <__d2b>:
 8008094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008098:	460f      	mov	r7, r1
 800809a:	2101      	movs	r1, #1
 800809c:	ec59 8b10 	vmov	r8, r9, d0
 80080a0:	4616      	mov	r6, r2
 80080a2:	f7ff fccd 	bl	8007a40 <_Balloc>
 80080a6:	4604      	mov	r4, r0
 80080a8:	b930      	cbnz	r0, 80080b8 <__d2b+0x24>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b23      	ldr	r3, [pc, #140]	@ (800813c <__d2b+0xa8>)
 80080ae:	4824      	ldr	r0, [pc, #144]	@ (8008140 <__d2b+0xac>)
 80080b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80080b4:	f000 faf8 	bl	80086a8 <__assert_func>
 80080b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080c0:	b10d      	cbz	r5, 80080c6 <__d2b+0x32>
 80080c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	f1b8 0300 	subs.w	r3, r8, #0
 80080cc:	d023      	beq.n	8008116 <__d2b+0x82>
 80080ce:	4668      	mov	r0, sp
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	f7ff fd7c 	bl	8007bce <__lo0bits>
 80080d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080da:	b1d0      	cbz	r0, 8008112 <__d2b+0x7e>
 80080dc:	f1c0 0320 	rsb	r3, r0, #32
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	430b      	orrs	r3, r1
 80080e6:	40c2      	lsrs	r2, r0
 80080e8:	6163      	str	r3, [r4, #20]
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	61a3      	str	r3, [r4, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bf0c      	ite	eq
 80080f4:	2201      	moveq	r2, #1
 80080f6:	2202      	movne	r2, #2
 80080f8:	6122      	str	r2, [r4, #16]
 80080fa:	b1a5      	cbz	r5, 8008126 <__d2b+0x92>
 80080fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008100:	4405      	add	r5, r0
 8008102:	603d      	str	r5, [r7, #0]
 8008104:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008108:	6030      	str	r0, [r6, #0]
 800810a:	4620      	mov	r0, r4
 800810c:	b003      	add	sp, #12
 800810e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008112:	6161      	str	r1, [r4, #20]
 8008114:	e7ea      	b.n	80080ec <__d2b+0x58>
 8008116:	a801      	add	r0, sp, #4
 8008118:	f7ff fd59 	bl	8007bce <__lo0bits>
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	6163      	str	r3, [r4, #20]
 8008120:	3020      	adds	r0, #32
 8008122:	2201      	movs	r2, #1
 8008124:	e7e8      	b.n	80080f8 <__d2b+0x64>
 8008126:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800812a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800812e:	6038      	str	r0, [r7, #0]
 8008130:	6918      	ldr	r0, [r3, #16]
 8008132:	f7ff fd2d 	bl	8007b90 <__hi0bits>
 8008136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800813a:	e7e5      	b.n	8008108 <__d2b+0x74>
 800813c:	0800bdb4 	.word	0x0800bdb4
 8008140:	0800bdc5 	.word	0x0800bdc5

08008144 <__ssputs_r>:
 8008144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008148:	688e      	ldr	r6, [r1, #8]
 800814a:	461f      	mov	r7, r3
 800814c:	42be      	cmp	r6, r7
 800814e:	680b      	ldr	r3, [r1, #0]
 8008150:	4682      	mov	sl, r0
 8008152:	460c      	mov	r4, r1
 8008154:	4690      	mov	r8, r2
 8008156:	d82d      	bhi.n	80081b4 <__ssputs_r+0x70>
 8008158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800815c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008160:	d026      	beq.n	80081b0 <__ssputs_r+0x6c>
 8008162:	6965      	ldr	r5, [r4, #20]
 8008164:	6909      	ldr	r1, [r1, #16]
 8008166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800816a:	eba3 0901 	sub.w	r9, r3, r1
 800816e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008172:	1c7b      	adds	r3, r7, #1
 8008174:	444b      	add	r3, r9
 8008176:	106d      	asrs	r5, r5, #1
 8008178:	429d      	cmp	r5, r3
 800817a:	bf38      	it	cc
 800817c:	461d      	movcc	r5, r3
 800817e:	0553      	lsls	r3, r2, #21
 8008180:	d527      	bpl.n	80081d2 <__ssputs_r+0x8e>
 8008182:	4629      	mov	r1, r5
 8008184:	f7ff fbd0 	bl	8007928 <_malloc_r>
 8008188:	4606      	mov	r6, r0
 800818a:	b360      	cbz	r0, 80081e6 <__ssputs_r+0xa2>
 800818c:	6921      	ldr	r1, [r4, #16]
 800818e:	464a      	mov	r2, r9
 8008190:	f7fe fcfb 	bl	8006b8a <memcpy>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800819a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	6126      	str	r6, [r4, #16]
 80081a2:	6165      	str	r5, [r4, #20]
 80081a4:	444e      	add	r6, r9
 80081a6:	eba5 0509 	sub.w	r5, r5, r9
 80081aa:	6026      	str	r6, [r4, #0]
 80081ac:	60a5      	str	r5, [r4, #8]
 80081ae:	463e      	mov	r6, r7
 80081b0:	42be      	cmp	r6, r7
 80081b2:	d900      	bls.n	80081b6 <__ssputs_r+0x72>
 80081b4:	463e      	mov	r6, r7
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	4632      	mov	r2, r6
 80081ba:	4641      	mov	r1, r8
 80081bc:	f000 fa28 	bl	8008610 <memmove>
 80081c0:	68a3      	ldr	r3, [r4, #8]
 80081c2:	1b9b      	subs	r3, r3, r6
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	4433      	add	r3, r6
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	2000      	movs	r0, #0
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	462a      	mov	r2, r5
 80081d4:	f000 faac 	bl	8008730 <_realloc_r>
 80081d8:	4606      	mov	r6, r0
 80081da:	2800      	cmp	r0, #0
 80081dc:	d1e0      	bne.n	80081a0 <__ssputs_r+0x5c>
 80081de:	6921      	ldr	r1, [r4, #16]
 80081e0:	4650      	mov	r0, sl
 80081e2:	f7ff fb2d 	bl	8007840 <_free_r>
 80081e6:	230c      	movs	r3, #12
 80081e8:	f8ca 3000 	str.w	r3, [sl]
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e7e9      	b.n	80081ce <__ssputs_r+0x8a>
	...

080081fc <_svfiprintf_r>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	4698      	mov	r8, r3
 8008202:	898b      	ldrh	r3, [r1, #12]
 8008204:	061b      	lsls	r3, r3, #24
 8008206:	b09d      	sub	sp, #116	@ 0x74
 8008208:	4607      	mov	r7, r0
 800820a:	460d      	mov	r5, r1
 800820c:	4614      	mov	r4, r2
 800820e:	d510      	bpl.n	8008232 <_svfiprintf_r+0x36>
 8008210:	690b      	ldr	r3, [r1, #16]
 8008212:	b973      	cbnz	r3, 8008232 <_svfiprintf_r+0x36>
 8008214:	2140      	movs	r1, #64	@ 0x40
 8008216:	f7ff fb87 	bl	8007928 <_malloc_r>
 800821a:	6028      	str	r0, [r5, #0]
 800821c:	6128      	str	r0, [r5, #16]
 800821e:	b930      	cbnz	r0, 800822e <_svfiprintf_r+0x32>
 8008220:	230c      	movs	r3, #12
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	b01d      	add	sp, #116	@ 0x74
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	2340      	movs	r3, #64	@ 0x40
 8008230:	616b      	str	r3, [r5, #20]
 8008232:	2300      	movs	r3, #0
 8008234:	9309      	str	r3, [sp, #36]	@ 0x24
 8008236:	2320      	movs	r3, #32
 8008238:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800823c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008240:	2330      	movs	r3, #48	@ 0x30
 8008242:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083e0 <_svfiprintf_r+0x1e4>
 8008246:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800824a:	f04f 0901 	mov.w	r9, #1
 800824e:	4623      	mov	r3, r4
 8008250:	469a      	mov	sl, r3
 8008252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008256:	b10a      	cbz	r2, 800825c <_svfiprintf_r+0x60>
 8008258:	2a25      	cmp	r2, #37	@ 0x25
 800825a:	d1f9      	bne.n	8008250 <_svfiprintf_r+0x54>
 800825c:	ebba 0b04 	subs.w	fp, sl, r4
 8008260:	d00b      	beq.n	800827a <_svfiprintf_r+0x7e>
 8008262:	465b      	mov	r3, fp
 8008264:	4622      	mov	r2, r4
 8008266:	4629      	mov	r1, r5
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff ff6b 	bl	8008144 <__ssputs_r>
 800826e:	3001      	adds	r0, #1
 8008270:	f000 80a7 	beq.w	80083c2 <_svfiprintf_r+0x1c6>
 8008274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008276:	445a      	add	r2, fp
 8008278:	9209      	str	r2, [sp, #36]	@ 0x24
 800827a:	f89a 3000 	ldrb.w	r3, [sl]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 809f 	beq.w	80083c2 <_svfiprintf_r+0x1c6>
 8008284:	2300      	movs	r3, #0
 8008286:	f04f 32ff 	mov.w	r2, #4294967295
 800828a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800828e:	f10a 0a01 	add.w	sl, sl, #1
 8008292:	9304      	str	r3, [sp, #16]
 8008294:	9307      	str	r3, [sp, #28]
 8008296:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800829a:	931a      	str	r3, [sp, #104]	@ 0x68
 800829c:	4654      	mov	r4, sl
 800829e:	2205      	movs	r2, #5
 80082a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a4:	484e      	ldr	r0, [pc, #312]	@ (80083e0 <_svfiprintf_r+0x1e4>)
 80082a6:	f7f7 ff9b 	bl	80001e0 <memchr>
 80082aa:	9a04      	ldr	r2, [sp, #16]
 80082ac:	b9d8      	cbnz	r0, 80082e6 <_svfiprintf_r+0xea>
 80082ae:	06d0      	lsls	r0, r2, #27
 80082b0:	bf44      	itt	mi
 80082b2:	2320      	movmi	r3, #32
 80082b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b8:	0711      	lsls	r1, r2, #28
 80082ba:	bf44      	itt	mi
 80082bc:	232b      	movmi	r3, #43	@ 0x2b
 80082be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c2:	f89a 3000 	ldrb.w	r3, [sl]
 80082c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c8:	d015      	beq.n	80082f6 <_svfiprintf_r+0xfa>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	4654      	mov	r4, sl
 80082ce:	2000      	movs	r0, #0
 80082d0:	f04f 0c0a 	mov.w	ip, #10
 80082d4:	4621      	mov	r1, r4
 80082d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082da:	3b30      	subs	r3, #48	@ 0x30
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d94b      	bls.n	8008378 <_svfiprintf_r+0x17c>
 80082e0:	b1b0      	cbz	r0, 8008310 <_svfiprintf_r+0x114>
 80082e2:	9207      	str	r2, [sp, #28]
 80082e4:	e014      	b.n	8008310 <_svfiprintf_r+0x114>
 80082e6:	eba0 0308 	sub.w	r3, r0, r8
 80082ea:	fa09 f303 	lsl.w	r3, r9, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	46a2      	mov	sl, r4
 80082f4:	e7d2      	b.n	800829c <_svfiprintf_r+0xa0>
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	1d19      	adds	r1, r3, #4
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	9103      	str	r1, [sp, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfbb      	ittet	lt
 8008302:	425b      	neglt	r3, r3
 8008304:	f042 0202 	orrlt.w	r2, r2, #2
 8008308:	9307      	strge	r3, [sp, #28]
 800830a:	9307      	strlt	r3, [sp, #28]
 800830c:	bfb8      	it	lt
 800830e:	9204      	strlt	r2, [sp, #16]
 8008310:	7823      	ldrb	r3, [r4, #0]
 8008312:	2b2e      	cmp	r3, #46	@ 0x2e
 8008314:	d10a      	bne.n	800832c <_svfiprintf_r+0x130>
 8008316:	7863      	ldrb	r3, [r4, #1]
 8008318:	2b2a      	cmp	r3, #42	@ 0x2a
 800831a:	d132      	bne.n	8008382 <_svfiprintf_r+0x186>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	1d1a      	adds	r2, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	9203      	str	r2, [sp, #12]
 8008324:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008328:	3402      	adds	r4, #2
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083f0 <_svfiprintf_r+0x1f4>
 8008330:	7821      	ldrb	r1, [r4, #0]
 8008332:	2203      	movs	r2, #3
 8008334:	4650      	mov	r0, sl
 8008336:	f7f7 ff53 	bl	80001e0 <memchr>
 800833a:	b138      	cbz	r0, 800834c <_svfiprintf_r+0x150>
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	eba0 000a 	sub.w	r0, r0, sl
 8008342:	2240      	movs	r2, #64	@ 0x40
 8008344:	4082      	lsls	r2, r0
 8008346:	4313      	orrs	r3, r2
 8008348:	3401      	adds	r4, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008350:	4824      	ldr	r0, [pc, #144]	@ (80083e4 <_svfiprintf_r+0x1e8>)
 8008352:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008356:	2206      	movs	r2, #6
 8008358:	f7f7 ff42 	bl	80001e0 <memchr>
 800835c:	2800      	cmp	r0, #0
 800835e:	d036      	beq.n	80083ce <_svfiprintf_r+0x1d2>
 8008360:	4b21      	ldr	r3, [pc, #132]	@ (80083e8 <_svfiprintf_r+0x1ec>)
 8008362:	bb1b      	cbnz	r3, 80083ac <_svfiprintf_r+0x1b0>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	3307      	adds	r3, #7
 8008368:	f023 0307 	bic.w	r3, r3, #7
 800836c:	3308      	adds	r3, #8
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008372:	4433      	add	r3, r6
 8008374:	9309      	str	r3, [sp, #36]	@ 0x24
 8008376:	e76a      	b.n	800824e <_svfiprintf_r+0x52>
 8008378:	fb0c 3202 	mla	r2, ip, r2, r3
 800837c:	460c      	mov	r4, r1
 800837e:	2001      	movs	r0, #1
 8008380:	e7a8      	b.n	80082d4 <_svfiprintf_r+0xd8>
 8008382:	2300      	movs	r3, #0
 8008384:	3401      	adds	r4, #1
 8008386:	9305      	str	r3, [sp, #20]
 8008388:	4619      	mov	r1, r3
 800838a:	f04f 0c0a 	mov.w	ip, #10
 800838e:	4620      	mov	r0, r4
 8008390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008394:	3a30      	subs	r2, #48	@ 0x30
 8008396:	2a09      	cmp	r2, #9
 8008398:	d903      	bls.n	80083a2 <_svfiprintf_r+0x1a6>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c6      	beq.n	800832c <_svfiprintf_r+0x130>
 800839e:	9105      	str	r1, [sp, #20]
 80083a0:	e7c4      	b.n	800832c <_svfiprintf_r+0x130>
 80083a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a6:	4604      	mov	r4, r0
 80083a8:	2301      	movs	r3, #1
 80083aa:	e7f0      	b.n	800838e <_svfiprintf_r+0x192>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	462a      	mov	r2, r5
 80083b2:	4b0e      	ldr	r3, [pc, #56]	@ (80083ec <_svfiprintf_r+0x1f0>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4638      	mov	r0, r7
 80083b8:	f7fd fd86 	bl	8005ec8 <_printf_float>
 80083bc:	1c42      	adds	r2, r0, #1
 80083be:	4606      	mov	r6, r0
 80083c0:	d1d6      	bne.n	8008370 <_svfiprintf_r+0x174>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	065b      	lsls	r3, r3, #25
 80083c6:	f53f af2d 	bmi.w	8008224 <_svfiprintf_r+0x28>
 80083ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083cc:	e72c      	b.n	8008228 <_svfiprintf_r+0x2c>
 80083ce:	ab03      	add	r3, sp, #12
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	462a      	mov	r2, r5
 80083d4:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <_svfiprintf_r+0x1f0>)
 80083d6:	a904      	add	r1, sp, #16
 80083d8:	4638      	mov	r0, r7
 80083da:	f7fe f80d 	bl	80063f8 <_printf_i>
 80083de:	e7ed      	b.n	80083bc <_svfiprintf_r+0x1c0>
 80083e0:	0800bf20 	.word	0x0800bf20
 80083e4:	0800bf2a 	.word	0x0800bf2a
 80083e8:	08005ec9 	.word	0x08005ec9
 80083ec:	08008145 	.word	0x08008145
 80083f0:	0800bf26 	.word	0x0800bf26

080083f4 <__sflush_r>:
 80083f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	0716      	lsls	r6, r2, #28
 80083fe:	4605      	mov	r5, r0
 8008400:	460c      	mov	r4, r1
 8008402:	d454      	bmi.n	80084ae <__sflush_r+0xba>
 8008404:	684b      	ldr	r3, [r1, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	dc02      	bgt.n	8008410 <__sflush_r+0x1c>
 800840a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	dd48      	ble.n	80084a2 <__sflush_r+0xae>
 8008410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008412:	2e00      	cmp	r6, #0
 8008414:	d045      	beq.n	80084a2 <__sflush_r+0xae>
 8008416:	2300      	movs	r3, #0
 8008418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800841c:	682f      	ldr	r7, [r5, #0]
 800841e:	6a21      	ldr	r1, [r4, #32]
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	d030      	beq.n	8008486 <__sflush_r+0x92>
 8008424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	0759      	lsls	r1, r3, #29
 800842a:	d505      	bpl.n	8008438 <__sflush_r+0x44>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008432:	b10b      	cbz	r3, 8008438 <__sflush_r+0x44>
 8008434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800843c:	6a21      	ldr	r1, [r4, #32]
 800843e:	4628      	mov	r0, r5
 8008440:	47b0      	blx	r6
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	d106      	bne.n	8008456 <__sflush_r+0x62>
 8008448:	6829      	ldr	r1, [r5, #0]
 800844a:	291d      	cmp	r1, #29
 800844c:	d82b      	bhi.n	80084a6 <__sflush_r+0xb2>
 800844e:	4a2a      	ldr	r2, [pc, #168]	@ (80084f8 <__sflush_r+0x104>)
 8008450:	410a      	asrs	r2, r1
 8008452:	07d6      	lsls	r6, r2, #31
 8008454:	d427      	bmi.n	80084a6 <__sflush_r+0xb2>
 8008456:	2200      	movs	r2, #0
 8008458:	6062      	str	r2, [r4, #4]
 800845a:	04d9      	lsls	r1, r3, #19
 800845c:	6922      	ldr	r2, [r4, #16]
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	d504      	bpl.n	800846c <__sflush_r+0x78>
 8008462:	1c42      	adds	r2, r0, #1
 8008464:	d101      	bne.n	800846a <__sflush_r+0x76>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	b903      	cbnz	r3, 800846c <__sflush_r+0x78>
 800846a:	6560      	str	r0, [r4, #84]	@ 0x54
 800846c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800846e:	602f      	str	r7, [r5, #0]
 8008470:	b1b9      	cbz	r1, 80084a2 <__sflush_r+0xae>
 8008472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008476:	4299      	cmp	r1, r3
 8008478:	d002      	beq.n	8008480 <__sflush_r+0x8c>
 800847a:	4628      	mov	r0, r5
 800847c:	f7ff f9e0 	bl	8007840 <_free_r>
 8008480:	2300      	movs	r3, #0
 8008482:	6363      	str	r3, [r4, #52]	@ 0x34
 8008484:	e00d      	b.n	80084a2 <__sflush_r+0xae>
 8008486:	2301      	movs	r3, #1
 8008488:	4628      	mov	r0, r5
 800848a:	47b0      	blx	r6
 800848c:	4602      	mov	r2, r0
 800848e:	1c50      	adds	r0, r2, #1
 8008490:	d1c9      	bne.n	8008426 <__sflush_r+0x32>
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0c6      	beq.n	8008426 <__sflush_r+0x32>
 8008498:	2b1d      	cmp	r3, #29
 800849a:	d001      	beq.n	80084a0 <__sflush_r+0xac>
 800849c:	2b16      	cmp	r3, #22
 800849e:	d11e      	bne.n	80084de <__sflush_r+0xea>
 80084a0:	602f      	str	r7, [r5, #0]
 80084a2:	2000      	movs	r0, #0
 80084a4:	e022      	b.n	80084ec <__sflush_r+0xf8>
 80084a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084aa:	b21b      	sxth	r3, r3
 80084ac:	e01b      	b.n	80084e6 <__sflush_r+0xf2>
 80084ae:	690f      	ldr	r7, [r1, #16]
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	d0f6      	beq.n	80084a2 <__sflush_r+0xae>
 80084b4:	0793      	lsls	r3, r2, #30
 80084b6:	680e      	ldr	r6, [r1, #0]
 80084b8:	bf08      	it	eq
 80084ba:	694b      	ldreq	r3, [r1, #20]
 80084bc:	600f      	str	r7, [r1, #0]
 80084be:	bf18      	it	ne
 80084c0:	2300      	movne	r3, #0
 80084c2:	eba6 0807 	sub.w	r8, r6, r7
 80084c6:	608b      	str	r3, [r1, #8]
 80084c8:	f1b8 0f00 	cmp.w	r8, #0
 80084cc:	dde9      	ble.n	80084a2 <__sflush_r+0xae>
 80084ce:	6a21      	ldr	r1, [r4, #32]
 80084d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084d2:	4643      	mov	r3, r8
 80084d4:	463a      	mov	r2, r7
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b0      	blx	r6
 80084da:	2800      	cmp	r0, #0
 80084dc:	dc08      	bgt.n	80084f0 <__sflush_r+0xfc>
 80084de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	4407      	add	r7, r0
 80084f2:	eba8 0800 	sub.w	r8, r8, r0
 80084f6:	e7e7      	b.n	80084c8 <__sflush_r+0xd4>
 80084f8:	dfbffffe 	.word	0xdfbffffe

080084fc <_fflush_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	4605      	mov	r5, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b913      	cbnz	r3, 800850c <_fflush_r+0x10>
 8008506:	2500      	movs	r5, #0
 8008508:	4628      	mov	r0, r5
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	b118      	cbz	r0, 8008516 <_fflush_r+0x1a>
 800850e:	6a03      	ldr	r3, [r0, #32]
 8008510:	b90b      	cbnz	r3, 8008516 <_fflush_r+0x1a>
 8008512:	f7fe f91d 	bl	8006750 <__sinit>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f3      	beq.n	8008506 <_fflush_r+0xa>
 800851e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008520:	07d0      	lsls	r0, r2, #31
 8008522:	d404      	bmi.n	800852e <_fflush_r+0x32>
 8008524:	0599      	lsls	r1, r3, #22
 8008526:	d402      	bmi.n	800852e <_fflush_r+0x32>
 8008528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852a:	f7fe fb2c 	bl	8006b86 <__retarget_lock_acquire_recursive>
 800852e:	4628      	mov	r0, r5
 8008530:	4621      	mov	r1, r4
 8008532:	f7ff ff5f 	bl	80083f4 <__sflush_r>
 8008536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008538:	07da      	lsls	r2, r3, #31
 800853a:	4605      	mov	r5, r0
 800853c:	d4e4      	bmi.n	8008508 <_fflush_r+0xc>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	059b      	lsls	r3, r3, #22
 8008542:	d4e1      	bmi.n	8008508 <_fflush_r+0xc>
 8008544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008546:	f7fe fb1f 	bl	8006b88 <__retarget_lock_release_recursive>
 800854a:	e7dd      	b.n	8008508 <_fflush_r+0xc>

0800854c <__swhatbuf_r>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	2900      	cmp	r1, #0
 8008556:	b096      	sub	sp, #88	@ 0x58
 8008558:	4615      	mov	r5, r2
 800855a:	461e      	mov	r6, r3
 800855c:	da0d      	bge.n	800857a <__swhatbuf_r+0x2e>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008564:	f04f 0100 	mov.w	r1, #0
 8008568:	bf14      	ite	ne
 800856a:	2340      	movne	r3, #64	@ 0x40
 800856c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008570:	2000      	movs	r0, #0
 8008572:	6031      	str	r1, [r6, #0]
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	b016      	add	sp, #88	@ 0x58
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	466a      	mov	r2, sp
 800857c:	f000 f862 	bl	8008644 <_fstat_r>
 8008580:	2800      	cmp	r0, #0
 8008582:	dbec      	blt.n	800855e <__swhatbuf_r+0x12>
 8008584:	9901      	ldr	r1, [sp, #4]
 8008586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800858a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800858e:	4259      	negs	r1, r3
 8008590:	4159      	adcs	r1, r3
 8008592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008596:	e7eb      	b.n	8008570 <__swhatbuf_r+0x24>

08008598 <__smakebuf_r>:
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859c:	079d      	lsls	r5, r3, #30
 800859e:	4606      	mov	r6, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	d507      	bpl.n	80085b4 <__smakebuf_r+0x1c>
 80085a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	2301      	movs	r3, #1
 80085ae:	6163      	str	r3, [r4, #20]
 80085b0:	b003      	add	sp, #12
 80085b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b4:	ab01      	add	r3, sp, #4
 80085b6:	466a      	mov	r2, sp
 80085b8:	f7ff ffc8 	bl	800854c <__swhatbuf_r>
 80085bc:	9f00      	ldr	r7, [sp, #0]
 80085be:	4605      	mov	r5, r0
 80085c0:	4639      	mov	r1, r7
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7ff f9b0 	bl	8007928 <_malloc_r>
 80085c8:	b948      	cbnz	r0, 80085de <__smakebuf_r+0x46>
 80085ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ce:	059a      	lsls	r2, r3, #22
 80085d0:	d4ee      	bmi.n	80085b0 <__smakebuf_r+0x18>
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	f043 0302 	orr.w	r3, r3, #2
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	e7e2      	b.n	80085a4 <__smakebuf_r+0xc>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	6020      	str	r0, [r4, #0]
 80085e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085ee:	b15b      	cbz	r3, 8008608 <__smakebuf_r+0x70>
 80085f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f4:	4630      	mov	r0, r6
 80085f6:	f000 f837 	bl	8008668 <_isatty_r>
 80085fa:	b128      	cbz	r0, 8008608 <__smakebuf_r+0x70>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f023 0303 	bic.w	r3, r3, #3
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	431d      	orrs	r5, r3
 800860c:	81a5      	strh	r5, [r4, #12]
 800860e:	e7cf      	b.n	80085b0 <__smakebuf_r+0x18>

08008610 <memmove>:
 8008610:	4288      	cmp	r0, r1
 8008612:	b510      	push	{r4, lr}
 8008614:	eb01 0402 	add.w	r4, r1, r2
 8008618:	d902      	bls.n	8008620 <memmove+0x10>
 800861a:	4284      	cmp	r4, r0
 800861c:	4623      	mov	r3, r4
 800861e:	d807      	bhi.n	8008630 <memmove+0x20>
 8008620:	1e43      	subs	r3, r0, #1
 8008622:	42a1      	cmp	r1, r4
 8008624:	d008      	beq.n	8008638 <memmove+0x28>
 8008626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800862e:	e7f8      	b.n	8008622 <memmove+0x12>
 8008630:	4402      	add	r2, r0
 8008632:	4601      	mov	r1, r0
 8008634:	428a      	cmp	r2, r1
 8008636:	d100      	bne.n	800863a <memmove+0x2a>
 8008638:	bd10      	pop	{r4, pc}
 800863a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800863e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008642:	e7f7      	b.n	8008634 <memmove+0x24>

08008644 <_fstat_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d07      	ldr	r5, [pc, #28]	@ (8008664 <_fstat_r+0x20>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f7fa f851 	bl	80026f8 <_fstat>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d102      	bne.n	8008660 <_fstat_r+0x1c>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	b103      	cbz	r3, 8008660 <_fstat_r+0x1c>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	20000ab4 	.word	0x20000ab4

08008668 <_isatty_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	@ (8008684 <_isatty_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7fa f850 	bl	8002718 <_isatty>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_isatty_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_isatty_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20000ab4 	.word	0x20000ab4

08008688 <_sbrk_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d06      	ldr	r5, [pc, #24]	@ (80086a4 <_sbrk_r+0x1c>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7fa f858 	bl	8002748 <_sbrk>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_sbrk_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_sbrk_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20000ab4 	.word	0x20000ab4

080086a8 <__assert_func>:
 80086a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086aa:	4614      	mov	r4, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <__assert_func+0x2c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4605      	mov	r5, r0
 80086b4:	68d8      	ldr	r0, [r3, #12]
 80086b6:	b954      	cbnz	r4, 80086ce <__assert_func+0x26>
 80086b8:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <__assert_func+0x30>)
 80086ba:	461c      	mov	r4, r3
 80086bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c0:	9100      	str	r1, [sp, #0]
 80086c2:	462b      	mov	r3, r5
 80086c4:	4905      	ldr	r1, [pc, #20]	@ (80086dc <__assert_func+0x34>)
 80086c6:	f000 f86f 	bl	80087a8 <fiprintf>
 80086ca:	f000 f87f 	bl	80087cc <abort>
 80086ce:	4b04      	ldr	r3, [pc, #16]	@ (80086e0 <__assert_func+0x38>)
 80086d0:	e7f4      	b.n	80086bc <__assert_func+0x14>
 80086d2:	bf00      	nop
 80086d4:	2000002c 	.word	0x2000002c
 80086d8:	0800bf76 	.word	0x0800bf76
 80086dc:	0800bf48 	.word	0x0800bf48
 80086e0:	0800bf3b 	.word	0x0800bf3b

080086e4 <_calloc_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	fba1 5402 	umull	r5, r4, r1, r2
 80086ea:	b93c      	cbnz	r4, 80086fc <_calloc_r+0x18>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7ff f91b 	bl	8007928 <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b928      	cbnz	r0, 8008702 <_calloc_r+0x1e>
 80086f6:	2600      	movs	r6, #0
 80086f8:	4630      	mov	r0, r6
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	220c      	movs	r2, #12
 80086fe:	6002      	str	r2, [r0, #0]
 8008700:	e7f9      	b.n	80086f6 <_calloc_r+0x12>
 8008702:	462a      	mov	r2, r5
 8008704:	4621      	mov	r1, r4
 8008706:	f7fe f9af 	bl	8006a68 <memset>
 800870a:	e7f5      	b.n	80086f8 <_calloc_r+0x14>

0800870c <__ascii_mbtowc>:
 800870c:	b082      	sub	sp, #8
 800870e:	b901      	cbnz	r1, 8008712 <__ascii_mbtowc+0x6>
 8008710:	a901      	add	r1, sp, #4
 8008712:	b142      	cbz	r2, 8008726 <__ascii_mbtowc+0x1a>
 8008714:	b14b      	cbz	r3, 800872a <__ascii_mbtowc+0x1e>
 8008716:	7813      	ldrb	r3, [r2, #0]
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	7812      	ldrb	r2, [r2, #0]
 800871c:	1e10      	subs	r0, r2, #0
 800871e:	bf18      	it	ne
 8008720:	2001      	movne	r0, #1
 8008722:	b002      	add	sp, #8
 8008724:	4770      	bx	lr
 8008726:	4610      	mov	r0, r2
 8008728:	e7fb      	b.n	8008722 <__ascii_mbtowc+0x16>
 800872a:	f06f 0001 	mvn.w	r0, #1
 800872e:	e7f8      	b.n	8008722 <__ascii_mbtowc+0x16>

08008730 <_realloc_r>:
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	4680      	mov	r8, r0
 8008736:	4615      	mov	r5, r2
 8008738:	460c      	mov	r4, r1
 800873a:	b921      	cbnz	r1, 8008746 <_realloc_r+0x16>
 800873c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4611      	mov	r1, r2
 8008742:	f7ff b8f1 	b.w	8007928 <_malloc_r>
 8008746:	b92a      	cbnz	r2, 8008754 <_realloc_r+0x24>
 8008748:	f7ff f87a 	bl	8007840 <_free_r>
 800874c:	2400      	movs	r4, #0
 800874e:	4620      	mov	r0, r4
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	f000 f841 	bl	80087da <_malloc_usable_size_r>
 8008758:	4285      	cmp	r5, r0
 800875a:	4606      	mov	r6, r0
 800875c:	d802      	bhi.n	8008764 <_realloc_r+0x34>
 800875e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008762:	d8f4      	bhi.n	800874e <_realloc_r+0x1e>
 8008764:	4629      	mov	r1, r5
 8008766:	4640      	mov	r0, r8
 8008768:	f7ff f8de 	bl	8007928 <_malloc_r>
 800876c:	4607      	mov	r7, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d0ec      	beq.n	800874c <_realloc_r+0x1c>
 8008772:	42b5      	cmp	r5, r6
 8008774:	462a      	mov	r2, r5
 8008776:	4621      	mov	r1, r4
 8008778:	bf28      	it	cs
 800877a:	4632      	movcs	r2, r6
 800877c:	f7fe fa05 	bl	8006b8a <memcpy>
 8008780:	4621      	mov	r1, r4
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff f85c 	bl	8007840 <_free_r>
 8008788:	463c      	mov	r4, r7
 800878a:	e7e0      	b.n	800874e <_realloc_r+0x1e>

0800878c <__ascii_wctomb>:
 800878c:	4603      	mov	r3, r0
 800878e:	4608      	mov	r0, r1
 8008790:	b141      	cbz	r1, 80087a4 <__ascii_wctomb+0x18>
 8008792:	2aff      	cmp	r2, #255	@ 0xff
 8008794:	d904      	bls.n	80087a0 <__ascii_wctomb+0x14>
 8008796:	228a      	movs	r2, #138	@ 0x8a
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	4770      	bx	lr
 80087a0:	700a      	strb	r2, [r1, #0]
 80087a2:	2001      	movs	r0, #1
 80087a4:	4770      	bx	lr
	...

080087a8 <fiprintf>:
 80087a8:	b40e      	push	{r1, r2, r3}
 80087aa:	b503      	push	{r0, r1, lr}
 80087ac:	4601      	mov	r1, r0
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	4805      	ldr	r0, [pc, #20]	@ (80087c8 <fiprintf+0x20>)
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	6800      	ldr	r0, [r0, #0]
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f000 f83f 	bl	800883c <_vfiprintf_r>
 80087be:	b002      	add	sp, #8
 80087c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c4:	b003      	add	sp, #12
 80087c6:	4770      	bx	lr
 80087c8:	2000002c 	.word	0x2000002c

080087cc <abort>:
 80087cc:	b508      	push	{r3, lr}
 80087ce:	2006      	movs	r0, #6
 80087d0:	f000 f974 	bl	8008abc <raise>
 80087d4:	2001      	movs	r0, #1
 80087d6:	f7f9 ff5b 	bl	8002690 <_exit>

080087da <_malloc_usable_size_r>:
 80087da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087de:	1f18      	subs	r0, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfbc      	itt	lt
 80087e4:	580b      	ldrlt	r3, [r1, r0]
 80087e6:	18c0      	addlt	r0, r0, r3
 80087e8:	4770      	bx	lr

080087ea <__sfputc_r>:
 80087ea:	6893      	ldr	r3, [r2, #8]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	b410      	push	{r4}
 80087f2:	6093      	str	r3, [r2, #8]
 80087f4:	da08      	bge.n	8008808 <__sfputc_r+0x1e>
 80087f6:	6994      	ldr	r4, [r2, #24]
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	db01      	blt.n	8008800 <__sfputc_r+0x16>
 80087fc:	290a      	cmp	r1, #10
 80087fe:	d103      	bne.n	8008808 <__sfputc_r+0x1e>
 8008800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008804:	f7fe b89b 	b.w	800693e <__swbuf_r>
 8008808:	6813      	ldr	r3, [r2, #0]
 800880a:	1c58      	adds	r0, r3, #1
 800880c:	6010      	str	r0, [r2, #0]
 800880e:	7019      	strb	r1, [r3, #0]
 8008810:	4608      	mov	r0, r1
 8008812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008816:	4770      	bx	lr

08008818 <__sfputs_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	4614      	mov	r4, r2
 8008820:	18d5      	adds	r5, r2, r3
 8008822:	42ac      	cmp	r4, r5
 8008824:	d101      	bne.n	800882a <__sfputs_r+0x12>
 8008826:	2000      	movs	r0, #0
 8008828:	e007      	b.n	800883a <__sfputs_r+0x22>
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	463a      	mov	r2, r7
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ffda 	bl	80087ea <__sfputc_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d1f3      	bne.n	8008822 <__sfputs_r+0xa>
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800883c <_vfiprintf_r>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	460d      	mov	r5, r1
 8008842:	b09d      	sub	sp, #116	@ 0x74
 8008844:	4614      	mov	r4, r2
 8008846:	4698      	mov	r8, r3
 8008848:	4606      	mov	r6, r0
 800884a:	b118      	cbz	r0, 8008854 <_vfiprintf_r+0x18>
 800884c:	6a03      	ldr	r3, [r0, #32]
 800884e:	b90b      	cbnz	r3, 8008854 <_vfiprintf_r+0x18>
 8008850:	f7fd ff7e 	bl	8006750 <__sinit>
 8008854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008856:	07d9      	lsls	r1, r3, #31
 8008858:	d405      	bmi.n	8008866 <_vfiprintf_r+0x2a>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	059a      	lsls	r2, r3, #22
 800885e:	d402      	bmi.n	8008866 <_vfiprintf_r+0x2a>
 8008860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008862:	f7fe f990 	bl	8006b86 <__retarget_lock_acquire_recursive>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	071b      	lsls	r3, r3, #28
 800886a:	d501      	bpl.n	8008870 <_vfiprintf_r+0x34>
 800886c:	692b      	ldr	r3, [r5, #16]
 800886e:	b99b      	cbnz	r3, 8008898 <_vfiprintf_r+0x5c>
 8008870:	4629      	mov	r1, r5
 8008872:	4630      	mov	r0, r6
 8008874:	f7fe f8a2 	bl	80069bc <__swsetup_r>
 8008878:	b170      	cbz	r0, 8008898 <_vfiprintf_r+0x5c>
 800887a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800887c:	07dc      	lsls	r4, r3, #31
 800887e:	d504      	bpl.n	800888a <_vfiprintf_r+0x4e>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b01d      	add	sp, #116	@ 0x74
 8008886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	0598      	lsls	r0, r3, #22
 800888e:	d4f7      	bmi.n	8008880 <_vfiprintf_r+0x44>
 8008890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008892:	f7fe f979 	bl	8006b88 <__retarget_lock_release_recursive>
 8008896:	e7f3      	b.n	8008880 <_vfiprintf_r+0x44>
 8008898:	2300      	movs	r3, #0
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	2320      	movs	r3, #32
 800889e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a6:	2330      	movs	r3, #48	@ 0x30
 80088a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a58 <_vfiprintf_r+0x21c>
 80088ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088b0:	f04f 0901 	mov.w	r9, #1
 80088b4:	4623      	mov	r3, r4
 80088b6:	469a      	mov	sl, r3
 80088b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088bc:	b10a      	cbz	r2, 80088c2 <_vfiprintf_r+0x86>
 80088be:	2a25      	cmp	r2, #37	@ 0x25
 80088c0:	d1f9      	bne.n	80088b6 <_vfiprintf_r+0x7a>
 80088c2:	ebba 0b04 	subs.w	fp, sl, r4
 80088c6:	d00b      	beq.n	80088e0 <_vfiprintf_r+0xa4>
 80088c8:	465b      	mov	r3, fp
 80088ca:	4622      	mov	r2, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ffa2 	bl	8008818 <__sfputs_r>
 80088d4:	3001      	adds	r0, #1
 80088d6:	f000 80a7 	beq.w	8008a28 <_vfiprintf_r+0x1ec>
 80088da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088dc:	445a      	add	r2, fp
 80088de:	9209      	str	r2, [sp, #36]	@ 0x24
 80088e0:	f89a 3000 	ldrb.w	r3, [sl]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 809f 	beq.w	8008a28 <_vfiprintf_r+0x1ec>
 80088ea:	2300      	movs	r3, #0
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f4:	f10a 0a01 	add.w	sl, sl, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008900:	931a      	str	r3, [sp, #104]	@ 0x68
 8008902:	4654      	mov	r4, sl
 8008904:	2205      	movs	r2, #5
 8008906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890a:	4853      	ldr	r0, [pc, #332]	@ (8008a58 <_vfiprintf_r+0x21c>)
 800890c:	f7f7 fc68 	bl	80001e0 <memchr>
 8008910:	9a04      	ldr	r2, [sp, #16]
 8008912:	b9d8      	cbnz	r0, 800894c <_vfiprintf_r+0x110>
 8008914:	06d1      	lsls	r1, r2, #27
 8008916:	bf44      	itt	mi
 8008918:	2320      	movmi	r3, #32
 800891a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800891e:	0713      	lsls	r3, r2, #28
 8008920:	bf44      	itt	mi
 8008922:	232b      	movmi	r3, #43	@ 0x2b
 8008924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008928:	f89a 3000 	ldrb.w	r3, [sl]
 800892c:	2b2a      	cmp	r3, #42	@ 0x2a
 800892e:	d015      	beq.n	800895c <_vfiprintf_r+0x120>
 8008930:	9a07      	ldr	r2, [sp, #28]
 8008932:	4654      	mov	r4, sl
 8008934:	2000      	movs	r0, #0
 8008936:	f04f 0c0a 	mov.w	ip, #10
 800893a:	4621      	mov	r1, r4
 800893c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008940:	3b30      	subs	r3, #48	@ 0x30
 8008942:	2b09      	cmp	r3, #9
 8008944:	d94b      	bls.n	80089de <_vfiprintf_r+0x1a2>
 8008946:	b1b0      	cbz	r0, 8008976 <_vfiprintf_r+0x13a>
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	e014      	b.n	8008976 <_vfiprintf_r+0x13a>
 800894c:	eba0 0308 	sub.w	r3, r0, r8
 8008950:	fa09 f303 	lsl.w	r3, r9, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	46a2      	mov	sl, r4
 800895a:	e7d2      	b.n	8008902 <_vfiprintf_r+0xc6>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	1d19      	adds	r1, r3, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	9103      	str	r1, [sp, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	bfbb      	ittet	lt
 8008968:	425b      	neglt	r3, r3
 800896a:	f042 0202 	orrlt.w	r2, r2, #2
 800896e:	9307      	strge	r3, [sp, #28]
 8008970:	9307      	strlt	r3, [sp, #28]
 8008972:	bfb8      	it	lt
 8008974:	9204      	strlt	r2, [sp, #16]
 8008976:	7823      	ldrb	r3, [r4, #0]
 8008978:	2b2e      	cmp	r3, #46	@ 0x2e
 800897a:	d10a      	bne.n	8008992 <_vfiprintf_r+0x156>
 800897c:	7863      	ldrb	r3, [r4, #1]
 800897e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008980:	d132      	bne.n	80089e8 <_vfiprintf_r+0x1ac>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	9203      	str	r2, [sp, #12]
 800898a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800898e:	3402      	adds	r4, #2
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a68 <_vfiprintf_r+0x22c>
 8008996:	7821      	ldrb	r1, [r4, #0]
 8008998:	2203      	movs	r2, #3
 800899a:	4650      	mov	r0, sl
 800899c:	f7f7 fc20 	bl	80001e0 <memchr>
 80089a0:	b138      	cbz	r0, 80089b2 <_vfiprintf_r+0x176>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	eba0 000a 	sub.w	r0, r0, sl
 80089a8:	2240      	movs	r2, #64	@ 0x40
 80089aa:	4082      	lsls	r2, r0
 80089ac:	4313      	orrs	r3, r2
 80089ae:	3401      	adds	r4, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b6:	4829      	ldr	r0, [pc, #164]	@ (8008a5c <_vfiprintf_r+0x220>)
 80089b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089bc:	2206      	movs	r2, #6
 80089be:	f7f7 fc0f 	bl	80001e0 <memchr>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d03f      	beq.n	8008a46 <_vfiprintf_r+0x20a>
 80089c6:	4b26      	ldr	r3, [pc, #152]	@ (8008a60 <_vfiprintf_r+0x224>)
 80089c8:	bb1b      	cbnz	r3, 8008a12 <_vfiprintf_r+0x1d6>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	3307      	adds	r3, #7
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	3308      	adds	r3, #8
 80089d4:	9303      	str	r3, [sp, #12]
 80089d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d8:	443b      	add	r3, r7
 80089da:	9309      	str	r3, [sp, #36]	@ 0x24
 80089dc:	e76a      	b.n	80088b4 <_vfiprintf_r+0x78>
 80089de:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e2:	460c      	mov	r4, r1
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7a8      	b.n	800893a <_vfiprintf_r+0xfe>
 80089e8:	2300      	movs	r3, #0
 80089ea:	3401      	adds	r4, #1
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	4619      	mov	r1, r3
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fa:	3a30      	subs	r2, #48	@ 0x30
 80089fc:	2a09      	cmp	r2, #9
 80089fe:	d903      	bls.n	8008a08 <_vfiprintf_r+0x1cc>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0c6      	beq.n	8008992 <_vfiprintf_r+0x156>
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	e7c4      	b.n	8008992 <_vfiprintf_r+0x156>
 8008a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7f0      	b.n	80089f4 <_vfiprintf_r+0x1b8>
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	462a      	mov	r2, r5
 8008a18:	4b12      	ldr	r3, [pc, #72]	@ (8008a64 <_vfiprintf_r+0x228>)
 8008a1a:	a904      	add	r1, sp, #16
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7fd fa53 	bl	8005ec8 <_printf_float>
 8008a22:	4607      	mov	r7, r0
 8008a24:	1c78      	adds	r0, r7, #1
 8008a26:	d1d6      	bne.n	80089d6 <_vfiprintf_r+0x19a>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x1fe>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x1fe>
 8008a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a36:	f7fe f8a7 	bl	8006b88 <__retarget_lock_release_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af1f 	bmi.w	8008880 <_vfiprintf_r+0x44>
 8008a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a44:	e71e      	b.n	8008884 <_vfiprintf_r+0x48>
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <_vfiprintf_r+0x228>)
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7fd fcd1 	bl	80063f8 <_printf_i>
 8008a56:	e7e4      	b.n	8008a22 <_vfiprintf_r+0x1e6>
 8008a58:	0800bf20 	.word	0x0800bf20
 8008a5c:	0800bf2a 	.word	0x0800bf2a
 8008a60:	08005ec9 	.word	0x08005ec9
 8008a64:	08008819 	.word	0x08008819
 8008a68:	0800bf26 	.word	0x0800bf26

08008a6c <_raise_r>:
 8008a6c:	291f      	cmp	r1, #31
 8008a6e:	b538      	push	{r3, r4, r5, lr}
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	d904      	bls.n	8008a80 <_raise_r+0x14>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a82:	b112      	cbz	r2, 8008a8a <_raise_r+0x1e>
 8008a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a88:	b94b      	cbnz	r3, 8008a9e <_raise_r+0x32>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f830 	bl	8008af0 <_getpid_r>
 8008a90:	4622      	mov	r2, r4
 8008a92:	4601      	mov	r1, r0
 8008a94:	4628      	mov	r0, r5
 8008a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9a:	f000 b817 	b.w	8008acc <_kill_r>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00a      	beq.n	8008ab8 <_raise_r+0x4c>
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	d103      	bne.n	8008aae <_raise_r+0x42>
 8008aa6:	2316      	movs	r3, #22
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7e7      	b.n	8008a7e <_raise_r+0x12>
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4798      	blx	r3
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7e0      	b.n	8008a7e <_raise_r+0x12>

08008abc <raise>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <raise+0xc>)
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f7ff bfd3 	b.w	8008a6c <_raise_r>
 8008ac6:	bf00      	nop
 8008ac8:	2000002c 	.word	0x2000002c

08008acc <_kill_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_kill_r+0x20>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f9 fdc9 	bl	8002670 <_kill>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_kill_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_kill_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	20000ab4 	.word	0x20000ab4

08008af0 <_getpid_r>:
 8008af0:	f7f9 bdb6 	b.w	8002660 <_getpid>
 8008af4:	0000      	movs	r0, r0
	...

08008af8 <cos>:
 8008af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afa:	ec53 2b10 	vmov	r2, r3, d0
 8008afe:	4826      	ldr	r0, [pc, #152]	@ (8008b98 <cos+0xa0>)
 8008b00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b04:	4281      	cmp	r1, r0
 8008b06:	d806      	bhi.n	8008b16 <cos+0x1e>
 8008b08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008b90 <cos+0x98>
 8008b0c:	b005      	add	sp, #20
 8008b0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b12:	f000 b899 	b.w	8008c48 <__kernel_cos>
 8008b16:	4821      	ldr	r0, [pc, #132]	@ (8008b9c <cos+0xa4>)
 8008b18:	4281      	cmp	r1, r0
 8008b1a:	d908      	bls.n	8008b2e <cos+0x36>
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f7f7 fbba 	bl	8000298 <__aeabi_dsub>
 8008b24:	ec41 0b10 	vmov	d0, r0, r1
 8008b28:	b005      	add	sp, #20
 8008b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b2e:	4668      	mov	r0, sp
 8008b30:	f000 fa0e 	bl	8008f50 <__ieee754_rem_pio2>
 8008b34:	f000 0003 	and.w	r0, r0, #3
 8008b38:	2801      	cmp	r0, #1
 8008b3a:	d00b      	beq.n	8008b54 <cos+0x5c>
 8008b3c:	2802      	cmp	r0, #2
 8008b3e:	d015      	beq.n	8008b6c <cos+0x74>
 8008b40:	b9d8      	cbnz	r0, 8008b7a <cos+0x82>
 8008b42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b46:	ed9d 0b00 	vldr	d0, [sp]
 8008b4a:	f000 f87d 	bl	8008c48 <__kernel_cos>
 8008b4e:	ec51 0b10 	vmov	r0, r1, d0
 8008b52:	e7e7      	b.n	8008b24 <cos+0x2c>
 8008b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b58:	ed9d 0b00 	vldr	d0, [sp]
 8008b5c:	f000 f93c 	bl	8008dd8 <__kernel_sin>
 8008b60:	ec53 2b10 	vmov	r2, r3, d0
 8008b64:	4610      	mov	r0, r2
 8008b66:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008b6a:	e7db      	b.n	8008b24 <cos+0x2c>
 8008b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b70:	ed9d 0b00 	vldr	d0, [sp]
 8008b74:	f000 f868 	bl	8008c48 <__kernel_cos>
 8008b78:	e7f2      	b.n	8008b60 <cos+0x68>
 8008b7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b7e:	ed9d 0b00 	vldr	d0, [sp]
 8008b82:	2001      	movs	r0, #1
 8008b84:	f000 f928 	bl	8008dd8 <__kernel_sin>
 8008b88:	e7e1      	b.n	8008b4e <cos+0x56>
 8008b8a:	bf00      	nop
 8008b8c:	f3af 8000 	nop.w
	...
 8008b98:	3fe921fb 	.word	0x3fe921fb
 8008b9c:	7fefffff 	.word	0x7fefffff

08008ba0 <sin>:
 8008ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ba2:	ec53 2b10 	vmov	r2, r3, d0
 8008ba6:	4826      	ldr	r0, [pc, #152]	@ (8008c40 <sin+0xa0>)
 8008ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008bac:	4281      	cmp	r1, r0
 8008bae:	d807      	bhi.n	8008bc0 <sin+0x20>
 8008bb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008c38 <sin+0x98>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	b005      	add	sp, #20
 8008bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bbc:	f000 b90c 	b.w	8008dd8 <__kernel_sin>
 8008bc0:	4820      	ldr	r0, [pc, #128]	@ (8008c44 <sin+0xa4>)
 8008bc2:	4281      	cmp	r1, r0
 8008bc4:	d908      	bls.n	8008bd8 <sin+0x38>
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7f7 fb65 	bl	8000298 <__aeabi_dsub>
 8008bce:	ec41 0b10 	vmov	d0, r0, r1
 8008bd2:	b005      	add	sp, #20
 8008bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bd8:	4668      	mov	r0, sp
 8008bda:	f000 f9b9 	bl	8008f50 <__ieee754_rem_pio2>
 8008bde:	f000 0003 	and.w	r0, r0, #3
 8008be2:	2801      	cmp	r0, #1
 8008be4:	d00c      	beq.n	8008c00 <sin+0x60>
 8008be6:	2802      	cmp	r0, #2
 8008be8:	d011      	beq.n	8008c0e <sin+0x6e>
 8008bea:	b9e8      	cbnz	r0, 8008c28 <sin+0x88>
 8008bec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bf0:	ed9d 0b00 	vldr	d0, [sp]
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	f000 f8ef 	bl	8008dd8 <__kernel_sin>
 8008bfa:	ec51 0b10 	vmov	r0, r1, d0
 8008bfe:	e7e6      	b.n	8008bce <sin+0x2e>
 8008c00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c04:	ed9d 0b00 	vldr	d0, [sp]
 8008c08:	f000 f81e 	bl	8008c48 <__kernel_cos>
 8008c0c:	e7f5      	b.n	8008bfa <sin+0x5a>
 8008c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c12:	ed9d 0b00 	vldr	d0, [sp]
 8008c16:	2001      	movs	r0, #1
 8008c18:	f000 f8de 	bl	8008dd8 <__kernel_sin>
 8008c1c:	ec53 2b10 	vmov	r2, r3, d0
 8008c20:	4610      	mov	r0, r2
 8008c22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c26:	e7d2      	b.n	8008bce <sin+0x2e>
 8008c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c2c:	ed9d 0b00 	vldr	d0, [sp]
 8008c30:	f000 f80a 	bl	8008c48 <__kernel_cos>
 8008c34:	e7f2      	b.n	8008c1c <sin+0x7c>
 8008c36:	bf00      	nop
	...
 8008c40:	3fe921fb 	.word	0x3fe921fb
 8008c44:	7fefffff 	.word	0x7fefffff

08008c48 <__kernel_cos>:
 8008c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	ec57 6b10 	vmov	r6, r7, d0
 8008c50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008c54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008c58:	ed8d 1b00 	vstr	d1, [sp]
 8008c5c:	d206      	bcs.n	8008c6c <__kernel_cos+0x24>
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 ff81 	bl	8000b68 <__aeabi_d2iz>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f000 8088 	beq.w	8008d7c <__kernel_cos+0x134>
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	463b      	mov	r3, r7
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	4b51      	ldr	r3, [pc, #324]	@ (8008dc0 <__kernel_cos+0x178>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	f7f7 fcc2 	bl	8000608 <__aeabi_dmul>
 8008c84:	a340      	add	r3, pc, #256	@ (adr r3, 8008d88 <__kernel_cos+0x140>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	4682      	mov	sl, r0
 8008c8c:	468b      	mov	fp, r1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 fcb9 	bl	8000608 <__aeabi_dmul>
 8008c96:	a33e      	add	r3, pc, #248	@ (adr r3, 8008d90 <__kernel_cos+0x148>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 fafe 	bl	800029c <__adddf3>
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	a33b      	add	r3, pc, #236	@ (adr r3, 8008d98 <__kernel_cos+0x150>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 faf3 	bl	8000298 <__aeabi_dsub>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	f7f7 fca7 	bl	8000608 <__aeabi_dmul>
 8008cba:	a339      	add	r3, pc, #228	@ (adr r3, 8008da0 <__kernel_cos+0x158>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 faec 	bl	800029c <__adddf3>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	a336      	add	r3, pc, #216	@ (adr r3, 8008da8 <__kernel_cos+0x160>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fae1 	bl	8000298 <__aeabi_dsub>
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	462b      	mov	r3, r5
 8008cda:	f7f7 fc95 	bl	8000608 <__aeabi_dmul>
 8008cde:	a334      	add	r3, pc, #208	@ (adr r3, 8008db0 <__kernel_cos+0x168>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fada 	bl	800029c <__adddf3>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	462b      	mov	r3, r5
 8008cec:	f7f7 fc8c 	bl	8000608 <__aeabi_dmul>
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	462b      	mov	r3, r5
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fc80 	bl	8000608 <__aeabi_dmul>
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7f7 fac2 	bl	8000298 <__aeabi_dsub>
 8008d14:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc4 <__kernel_cos+0x17c>)
 8008d16:	4598      	cmp	r8, r3
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	d810      	bhi.n	8008d40 <__kernel_cos+0xf8>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fab7 	bl	8000298 <__aeabi_dsub>
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4926      	ldr	r1, [pc, #152]	@ (8008dc8 <__kernel_cos+0x180>)
 8008d2e:	4602      	mov	r2, r0
 8008d30:	2000      	movs	r0, #0
 8008d32:	f7f7 fab1 	bl	8000298 <__aeabi_dsub>
 8008d36:	ec41 0b10 	vmov	d0, r0, r1
 8008d3a:	b003      	add	sp, #12
 8008d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d40:	4b22      	ldr	r3, [pc, #136]	@ (8008dcc <__kernel_cos+0x184>)
 8008d42:	4921      	ldr	r1, [pc, #132]	@ (8008dc8 <__kernel_cos+0x180>)
 8008d44:	4598      	cmp	r8, r3
 8008d46:	bf8c      	ite	hi
 8008d48:	4d21      	ldrhi	r5, [pc, #132]	@ (8008dd0 <__kernel_cos+0x188>)
 8008d4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008d4e:	2400      	movs	r4, #0
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7f7 fa9f 	bl	8000298 <__aeabi_dsub>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	462b      	mov	r3, r5
 8008d62:	4650      	mov	r0, sl
 8008d64:	4659      	mov	r1, fp
 8008d66:	f7f7 fa97 	bl	8000298 <__aeabi_dsub>
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	e7da      	b.n	8008d32 <__kernel_cos+0xea>
 8008d7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008db8 <__kernel_cos+0x170>
 8008d80:	e7db      	b.n	8008d3a <__kernel_cos+0xf2>
 8008d82:	bf00      	nop
 8008d84:	f3af 8000 	nop.w
 8008d88:	be8838d4 	.word	0xbe8838d4
 8008d8c:	bda8fae9 	.word	0xbda8fae9
 8008d90:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d94:	3e21ee9e 	.word	0x3e21ee9e
 8008d98:	809c52ad 	.word	0x809c52ad
 8008d9c:	3e927e4f 	.word	0x3e927e4f
 8008da0:	19cb1590 	.word	0x19cb1590
 8008da4:	3efa01a0 	.word	0x3efa01a0
 8008da8:	16c15177 	.word	0x16c15177
 8008dac:	3f56c16c 	.word	0x3f56c16c
 8008db0:	5555554c 	.word	0x5555554c
 8008db4:	3fa55555 	.word	0x3fa55555
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	3fe00000 	.word	0x3fe00000
 8008dc4:	3fd33332 	.word	0x3fd33332
 8008dc8:	3ff00000 	.word	0x3ff00000
 8008dcc:	3fe90000 	.word	0x3fe90000
 8008dd0:	3fd20000 	.word	0x3fd20000
 8008dd4:	00000000 	.word	0x00000000

08008dd8 <__kernel_sin>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ec55 4b10 	vmov	r4, r5, d0
 8008de0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008de4:	b085      	sub	sp, #20
 8008de6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008dea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008dee:	4680      	mov	r8, r0
 8008df0:	d205      	bcs.n	8008dfe <__kernel_sin+0x26>
 8008df2:	4620      	mov	r0, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7f7 feb7 	bl	8000b68 <__aeabi_d2iz>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d052      	beq.n	8008ea4 <__kernel_sin+0xcc>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7f7 fbff 	bl	8000608 <__aeabi_dmul>
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fbf7 	bl	8000608 <__aeabi_dmul>
 8008e1a:	a342      	add	r3, pc, #264	@ (adr r3, 8008f24 <__kernel_sin+0x14c>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	e9cd 0100 	strd	r0, r1, [sp]
 8008e24:	4650      	mov	r0, sl
 8008e26:	4659      	mov	r1, fp
 8008e28:	f7f7 fbee 	bl	8000608 <__aeabi_dmul>
 8008e2c:	a33f      	add	r3, pc, #252	@ (adr r3, 8008f2c <__kernel_sin+0x154>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 fa31 	bl	8000298 <__aeabi_dsub>
 8008e36:	4652      	mov	r2, sl
 8008e38:	465b      	mov	r3, fp
 8008e3a:	f7f7 fbe5 	bl	8000608 <__aeabi_dmul>
 8008e3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008f34 <__kernel_sin+0x15c>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 fa2a 	bl	800029c <__adddf3>
 8008e48:	4652      	mov	r2, sl
 8008e4a:	465b      	mov	r3, fp
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_dmul>
 8008e50:	a33a      	add	r3, pc, #232	@ (adr r3, 8008f3c <__kernel_sin+0x164>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fa1f 	bl	8000298 <__aeabi_dsub>
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	f7f7 fbd3 	bl	8000608 <__aeabi_dmul>
 8008e62:	a338      	add	r3, pc, #224	@ (adr r3, 8008f44 <__kernel_sin+0x16c>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 fa18 	bl	800029c <__adddf3>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	f1b8 0f00 	cmp.w	r8, #0
 8008e74:	d11b      	bne.n	8008eae <__kernel_sin+0xd6>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f7f7 fbc3 	bl	8000608 <__aeabi_dmul>
 8008e82:	a325      	add	r3, pc, #148	@ (adr r3, 8008f18 <__kernel_sin+0x140>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fa06 	bl	8000298 <__aeabi_dsub>
 8008e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 f9fe 	bl	800029c <__adddf3>
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	ec45 4b10 	vmov	d0, r4, r5
 8008ea8:	b005      	add	sp, #20
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f20 <__kernel_sin+0x148>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f7f7 fba7 	bl	8000608 <__aeabi_dmul>
 8008eba:	4632      	mov	r2, r6
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec6:	f7f7 fb9f 	bl	8000608 <__aeabi_dmul>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4640      	mov	r0, r8
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	f7f7 f9e1 	bl	8000298 <__aeabi_dsub>
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	465b      	mov	r3, fp
 8008eda:	f7f7 fb95 	bl	8000608 <__aeabi_dmul>
 8008ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ee2:	f7f7 f9d9 	bl	8000298 <__aeabi_dsub>
 8008ee6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008f18 <__kernel_sin+0x140>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ef4:	f7f7 fb88 	bl	8000608 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4630      	mov	r0, r6
 8008efe:	4639      	mov	r1, r7
 8008f00:	f7f7 f9cc 	bl	800029c <__adddf3>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4620      	mov	r0, r4
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f7f7 f9c4 	bl	8000298 <__aeabi_dsub>
 8008f10:	e7c6      	b.n	8008ea0 <__kernel_sin+0xc8>
 8008f12:	bf00      	nop
 8008f14:	f3af 8000 	nop.w
 8008f18:	55555549 	.word	0x55555549
 8008f1c:	3fc55555 	.word	0x3fc55555
 8008f20:	3fe00000 	.word	0x3fe00000
 8008f24:	5acfd57c 	.word	0x5acfd57c
 8008f28:	3de5d93a 	.word	0x3de5d93a
 8008f2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f30:	3e5ae5e6 	.word	0x3e5ae5e6
 8008f34:	57b1fe7d 	.word	0x57b1fe7d
 8008f38:	3ec71de3 	.word	0x3ec71de3
 8008f3c:	19c161d5 	.word	0x19c161d5
 8008f40:	3f2a01a0 	.word	0x3f2a01a0
 8008f44:	1110f8a6 	.word	0x1110f8a6
 8008f48:	3f811111 	.word	0x3f811111
 8008f4c:	00000000 	.word	0x00000000

08008f50 <__ieee754_rem_pio2>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	ec57 6b10 	vmov	r6, r7, d0
 8008f58:	4bc5      	ldr	r3, [pc, #788]	@ (8009270 <__ieee754_rem_pio2+0x320>)
 8008f5a:	b08d      	sub	sp, #52	@ 0x34
 8008f5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f60:	4598      	cmp	r8, r3
 8008f62:	4604      	mov	r4, r0
 8008f64:	9704      	str	r7, [sp, #16]
 8008f66:	d807      	bhi.n	8008f78 <__ieee754_rem_pio2+0x28>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	ed80 0b00 	vstr	d0, [r0]
 8008f70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f74:	2500      	movs	r5, #0
 8008f76:	e028      	b.n	8008fca <__ieee754_rem_pio2+0x7a>
 8008f78:	4bbe      	ldr	r3, [pc, #760]	@ (8009274 <__ieee754_rem_pio2+0x324>)
 8008f7a:	4598      	cmp	r8, r3
 8008f7c:	d878      	bhi.n	8009070 <__ieee754_rem_pio2+0x120>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	4dbd      	ldr	r5, [pc, #756]	@ (8009278 <__ieee754_rem_pio2+0x328>)
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	4630      	mov	r0, r6
 8008f86:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009238 <__ieee754_rem_pio2+0x2e8>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	dd38      	ble.n	8009002 <__ieee754_rem_pio2+0xb2>
 8008f90:	f7f7 f982 	bl	8000298 <__aeabi_dsub>
 8008f94:	45a8      	cmp	r8, r5
 8008f96:	4606      	mov	r6, r0
 8008f98:	460f      	mov	r7, r1
 8008f9a:	d01a      	beq.n	8008fd2 <__ieee754_rem_pio2+0x82>
 8008f9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009240 <__ieee754_rem_pio2+0x2f0>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f979 	bl	8000298 <__aeabi_dsub>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 f971 	bl	8000298 <__aeabi_dsub>
 8008fb6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009240 <__ieee754_rem_pio2+0x2f0>)
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 f96c 	bl	8000298 <__aeabi_dsub>
 8008fc0:	e9c4 8900 	strd	r8, r9, [r4]
 8008fc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fc8:	2501      	movs	r5, #1
 8008fca:	4628      	mov	r0, r5
 8008fcc:	b00d      	add	sp, #52	@ 0x34
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	a39d      	add	r3, pc, #628	@ (adr r3, 8009248 <__ieee754_rem_pio2+0x2f8>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 f95e 	bl	8000298 <__aeabi_dsub>
 8008fdc:	a39c      	add	r3, pc, #624	@ (adr r3, 8009250 <__ieee754_rem_pio2+0x300>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	f7f7 f957 	bl	8000298 <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4680      	mov	r8, r0
 8008ff0:	4689      	mov	r9, r1
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	f7f7 f94f 	bl	8000298 <__aeabi_dsub>
 8008ffa:	a395      	add	r3, pc, #596	@ (adr r3, 8009250 <__ieee754_rem_pio2+0x300>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	e7dc      	b.n	8008fbc <__ieee754_rem_pio2+0x6c>
 8009002:	f7f7 f94b 	bl	800029c <__adddf3>
 8009006:	45a8      	cmp	r8, r5
 8009008:	4606      	mov	r6, r0
 800900a:	460f      	mov	r7, r1
 800900c:	d018      	beq.n	8009040 <__ieee754_rem_pio2+0xf0>
 800900e:	a38c      	add	r3, pc, #560	@ (adr r3, 8009240 <__ieee754_rem_pio2+0x2f0>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 f942 	bl	800029c <__adddf3>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 f938 	bl	8000298 <__aeabi_dsub>
 8009028:	a385      	add	r3, pc, #532	@ (adr r3, 8009240 <__ieee754_rem_pio2+0x2f0>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f935 	bl	800029c <__adddf3>
 8009032:	f04f 35ff 	mov.w	r5, #4294967295
 8009036:	e9c4 8900 	strd	r8, r9, [r4]
 800903a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800903e:	e7c4      	b.n	8008fca <__ieee754_rem_pio2+0x7a>
 8009040:	a381      	add	r3, pc, #516	@ (adr r3, 8009248 <__ieee754_rem_pio2+0x2f8>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 f929 	bl	800029c <__adddf3>
 800904a:	a381      	add	r3, pc, #516	@ (adr r3, 8009250 <__ieee754_rem_pio2+0x300>)
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	f7f7 f922 	bl	800029c <__adddf3>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4680      	mov	r8, r0
 800905e:	4689      	mov	r9, r1
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 f918 	bl	8000298 <__aeabi_dsub>
 8009068:	a379      	add	r3, pc, #484	@ (adr r3, 8009250 <__ieee754_rem_pio2+0x300>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	e7de      	b.n	800902e <__ieee754_rem_pio2+0xde>
 8009070:	4b82      	ldr	r3, [pc, #520]	@ (800927c <__ieee754_rem_pio2+0x32c>)
 8009072:	4598      	cmp	r8, r3
 8009074:	f200 80d1 	bhi.w	800921a <__ieee754_rem_pio2+0x2ca>
 8009078:	f000 f966 	bl	8009348 <fabs>
 800907c:	ec57 6b10 	vmov	r6, r7, d0
 8009080:	a375      	add	r3, pc, #468	@ (adr r3, 8009258 <__ieee754_rem_pio2+0x308>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fabd 	bl	8000608 <__aeabi_dmul>
 800908e:	4b7c      	ldr	r3, [pc, #496]	@ (8009280 <__ieee754_rem_pio2+0x330>)
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 f903 	bl	800029c <__adddf3>
 8009096:	f7f7 fd67 	bl	8000b68 <__aeabi_d2iz>
 800909a:	4605      	mov	r5, r0
 800909c:	f7f7 fa4a 	bl	8000534 <__aeabi_i2d>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090a8:	a363      	add	r3, pc, #396	@ (adr r3, 8009238 <__ieee754_rem_pio2+0x2e8>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7f7 faab 	bl	8000608 <__aeabi_dmul>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 f8ed 	bl	8000298 <__aeabi_dsub>
 80090be:	a360      	add	r3, pc, #384	@ (adr r3, 8009240 <__ieee754_rem_pio2+0x2f0>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090cc:	f7f7 fa9c 	bl	8000608 <__aeabi_dmul>
 80090d0:	2d1f      	cmp	r5, #31
 80090d2:	4606      	mov	r6, r0
 80090d4:	460f      	mov	r7, r1
 80090d6:	dc0c      	bgt.n	80090f2 <__ieee754_rem_pio2+0x1a2>
 80090d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009284 <__ieee754_rem_pio2+0x334>)
 80090da:	1e6a      	subs	r2, r5, #1
 80090dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e0:	4543      	cmp	r3, r8
 80090e2:	d006      	beq.n	80090f2 <__ieee754_rem_pio2+0x1a2>
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	f7f7 f8d4 	bl	8000298 <__aeabi_dsub>
 80090f0:	e00e      	b.n	8009110 <__ieee754_rem_pio2+0x1c0>
 80090f2:	463b      	mov	r3, r7
 80090f4:	4632      	mov	r2, r6
 80090f6:	4650      	mov	r0, sl
 80090f8:	4659      	mov	r1, fp
 80090fa:	f7f7 f8cd 	bl	8000298 <__aeabi_dsub>
 80090fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009108:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800910c:	2b10      	cmp	r3, #16
 800910e:	dc02      	bgt.n	8009116 <__ieee754_rem_pio2+0x1c6>
 8009110:	e9c4 0100 	strd	r0, r1, [r4]
 8009114:	e039      	b.n	800918a <__ieee754_rem_pio2+0x23a>
 8009116:	a34c      	add	r3, pc, #304	@ (adr r3, 8009248 <__ieee754_rem_pio2+0x2f8>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009120:	f7f7 fa72 	bl	8000608 <__aeabi_dmul>
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4650      	mov	r0, sl
 800912e:	4659      	mov	r1, fp
 8009130:	f7f7 f8b2 	bl	8000298 <__aeabi_dsub>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	4650      	mov	r0, sl
 800913e:	4659      	mov	r1, fp
 8009140:	f7f7 f8aa 	bl	8000298 <__aeabi_dsub>
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	f7f7 f8a6 	bl	8000298 <__aeabi_dsub>
 800914c:	a340      	add	r3, pc, #256	@ (adr r3, 8009250 <__ieee754_rem_pio2+0x300>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	f7f7 fa55 	bl	8000608 <__aeabi_dmul>
 800915e:	4632      	mov	r2, r6
 8009160:	463b      	mov	r3, r7
 8009162:	f7f7 f899 	bl	8000298 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 f891 	bl	8000298 <__aeabi_dsub>
 8009176:	9a05      	ldr	r2, [sp, #20]
 8009178:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b31      	cmp	r3, #49	@ 0x31
 8009180:	dc20      	bgt.n	80091c4 <__ieee754_rem_pio2+0x274>
 8009182:	e9c4 0100 	strd	r0, r1, [r4]
 8009186:	46c2      	mov	sl, r8
 8009188:	46cb      	mov	fp, r9
 800918a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800918e:	4650      	mov	r0, sl
 8009190:	4642      	mov	r2, r8
 8009192:	464b      	mov	r3, r9
 8009194:	4659      	mov	r1, fp
 8009196:	f7f7 f87f 	bl	8000298 <__aeabi_dsub>
 800919a:	463b      	mov	r3, r7
 800919c:	4632      	mov	r2, r6
 800919e:	f7f7 f87b 	bl	8000298 <__aeabi_dsub>
 80091a2:	9b04      	ldr	r3, [sp, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091aa:	f6bf af0e 	bge.w	8008fca <__ieee754_rem_pio2+0x7a>
 80091ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80091b2:	6063      	str	r3, [r4, #4]
 80091b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091b8:	f8c4 8000 	str.w	r8, [r4]
 80091bc:	60a0      	str	r0, [r4, #8]
 80091be:	60e3      	str	r3, [r4, #12]
 80091c0:	426d      	negs	r5, r5
 80091c2:	e702      	b.n	8008fca <__ieee754_rem_pio2+0x7a>
 80091c4:	a326      	add	r3, pc, #152	@ (adr r3, 8009260 <__ieee754_rem_pio2+0x310>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ce:	f7f7 fa1b 	bl	8000608 <__aeabi_dmul>
 80091d2:	4606      	mov	r6, r0
 80091d4:	460f      	mov	r7, r1
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f7 f85b 	bl	8000298 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4682      	mov	sl, r0
 80091e8:	468b      	mov	fp, r1
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 f853 	bl	8000298 <__aeabi_dsub>
 80091f2:	4632      	mov	r2, r6
 80091f4:	463b      	mov	r3, r7
 80091f6:	f7f7 f84f 	bl	8000298 <__aeabi_dsub>
 80091fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8009268 <__ieee754_rem_pio2+0x318>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	4606      	mov	r6, r0
 8009202:	460f      	mov	r7, r1
 8009204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009208:	f7f7 f9fe 	bl	8000608 <__aeabi_dmul>
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	f7f7 f842 	bl	8000298 <__aeabi_dsub>
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	e764      	b.n	80090e4 <__ieee754_rem_pio2+0x194>
 800921a:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <__ieee754_rem_pio2+0x338>)
 800921c:	4598      	cmp	r8, r3
 800921e:	d935      	bls.n	800928c <__ieee754_rem_pio2+0x33c>
 8009220:	4632      	mov	r2, r6
 8009222:	463b      	mov	r3, r7
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 f836 	bl	8000298 <__aeabi_dsub>
 800922c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009230:	e9c4 0100 	strd	r0, r1, [r4]
 8009234:	e69e      	b.n	8008f74 <__ieee754_rem_pio2+0x24>
 8009236:	bf00      	nop
 8009238:	54400000 	.word	0x54400000
 800923c:	3ff921fb 	.word	0x3ff921fb
 8009240:	1a626331 	.word	0x1a626331
 8009244:	3dd0b461 	.word	0x3dd0b461
 8009248:	1a600000 	.word	0x1a600000
 800924c:	3dd0b461 	.word	0x3dd0b461
 8009250:	2e037073 	.word	0x2e037073
 8009254:	3ba3198a 	.word	0x3ba3198a
 8009258:	6dc9c883 	.word	0x6dc9c883
 800925c:	3fe45f30 	.word	0x3fe45f30
 8009260:	2e000000 	.word	0x2e000000
 8009264:	3ba3198a 	.word	0x3ba3198a
 8009268:	252049c1 	.word	0x252049c1
 800926c:	397b839a 	.word	0x397b839a
 8009270:	3fe921fb 	.word	0x3fe921fb
 8009274:	4002d97b 	.word	0x4002d97b
 8009278:	3ff921fb 	.word	0x3ff921fb
 800927c:	413921fb 	.word	0x413921fb
 8009280:	3fe00000 	.word	0x3fe00000
 8009284:	0800c078 	.word	0x0800c078
 8009288:	7fefffff 	.word	0x7fefffff
 800928c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009290:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009294:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009298:	4630      	mov	r0, r6
 800929a:	460f      	mov	r7, r1
 800929c:	f7f7 fc64 	bl	8000b68 <__aeabi_d2iz>
 80092a0:	f7f7 f948 	bl	8000534 <__aeabi_i2d>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80092b0:	f7f6 fff2 	bl	8000298 <__aeabi_dsub>
 80092b4:	4b22      	ldr	r3, [pc, #136]	@ (8009340 <__ieee754_rem_pio2+0x3f0>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	f7f7 f9a6 	bl	8000608 <__aeabi_dmul>
 80092bc:	460f      	mov	r7, r1
 80092be:	4606      	mov	r6, r0
 80092c0:	f7f7 fc52 	bl	8000b68 <__aeabi_d2iz>
 80092c4:	f7f7 f936 	bl	8000534 <__aeabi_i2d>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	4b19      	ldr	r3, [pc, #100]	@ (8009340 <__ieee754_rem_pio2+0x3f0>)
 80092da:	2200      	movs	r2, #0
 80092dc:	f7f7 f994 	bl	8000608 <__aeabi_dmul>
 80092e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80092e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80092e8:	f04f 0803 	mov.w	r8, #3
 80092ec:	2600      	movs	r6, #0
 80092ee:	2700      	movs	r7, #0
 80092f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80092f4:	4632      	mov	r2, r6
 80092f6:	463b      	mov	r3, r7
 80092f8:	46c2      	mov	sl, r8
 80092fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80092fe:	f7f7 fbeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009302:	2800      	cmp	r0, #0
 8009304:	d1f4      	bne.n	80092f0 <__ieee754_rem_pio2+0x3a0>
 8009306:	4b0f      	ldr	r3, [pc, #60]	@ (8009344 <__ieee754_rem_pio2+0x3f4>)
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	2302      	movs	r3, #2
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	462a      	mov	r2, r5
 8009310:	4653      	mov	r3, sl
 8009312:	4621      	mov	r1, r4
 8009314:	a806      	add	r0, sp, #24
 8009316:	f000 f81f 	bl	8009358 <__kernel_rem_pio2>
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	4605      	mov	r5, r0
 8009320:	f6bf ae53 	bge.w	8008fca <__ieee754_rem_pio2+0x7a>
 8009324:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800932c:	e9c4 2300 	strd	r2, r3, [r4]
 8009330:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009338:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800933c:	e740      	b.n	80091c0 <__ieee754_rem_pio2+0x270>
 800933e:	bf00      	nop
 8009340:	41700000 	.word	0x41700000
 8009344:	0800c0f8 	.word	0x0800c0f8

08009348 <fabs>:
 8009348:	ec51 0b10 	vmov	r0, r1, d0
 800934c:	4602      	mov	r2, r0
 800934e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009352:	ec43 2b10 	vmov	d0, r2, r3
 8009356:	4770      	bx	lr

08009358 <__kernel_rem_pio2>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	ed2d 8b02 	vpush	{d8}
 8009360:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009364:	f112 0f14 	cmn.w	r2, #20
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	9104      	str	r1, [sp, #16]
 800936c:	4bbe      	ldr	r3, [pc, #760]	@ (8009668 <__kernel_rem_pio2+0x310>)
 800936e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009370:	9008      	str	r0, [sp, #32]
 8009372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	9b06      	ldr	r3, [sp, #24]
 800937a:	f103 33ff 	add.w	r3, r3, #4294967295
 800937e:	bfa8      	it	ge
 8009380:	1ed4      	subge	r4, r2, #3
 8009382:	9305      	str	r3, [sp, #20]
 8009384:	bfb2      	itee	lt
 8009386:	2400      	movlt	r4, #0
 8009388:	2318      	movge	r3, #24
 800938a:	fb94 f4f3 	sdivge	r4, r4, r3
 800938e:	f06f 0317 	mvn.w	r3, #23
 8009392:	fb04 3303 	mla	r3, r4, r3, r3
 8009396:	eb03 0b02 	add.w	fp, r3, r2
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009658 <__kernel_rem_pio2+0x300>
 80093a2:	eb03 0802 	add.w	r8, r3, r2
 80093a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80093a8:	1aa7      	subs	r7, r4, r2
 80093aa:	ae20      	add	r6, sp, #128	@ 0x80
 80093ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80093b0:	2500      	movs	r5, #0
 80093b2:	4545      	cmp	r5, r8
 80093b4:	dd13      	ble.n	80093de <__kernel_rem_pio2+0x86>
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	aa20      	add	r2, sp, #128	@ 0x80
 80093ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80093be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80093c2:	f04f 0800 	mov.w	r8, #0
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	4598      	cmp	r8, r3
 80093ca:	dc31      	bgt.n	8009430 <__kernel_rem_pio2+0xd8>
 80093cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009658 <__kernel_rem_pio2+0x300>
 80093d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093d8:	462f      	mov	r7, r5
 80093da:	2600      	movs	r6, #0
 80093dc:	e01b      	b.n	8009416 <__kernel_rem_pio2+0xbe>
 80093de:	42ef      	cmn	r7, r5
 80093e0:	d407      	bmi.n	80093f2 <__kernel_rem_pio2+0x9a>
 80093e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093e6:	f7f7 f8a5 	bl	8000534 <__aeabi_i2d>
 80093ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093ee:	3501      	adds	r5, #1
 80093f0:	e7df      	b.n	80093b2 <__kernel_rem_pio2+0x5a>
 80093f2:	ec51 0b18 	vmov	r0, r1, d8
 80093f6:	e7f8      	b.n	80093ea <__kernel_rem_pio2+0x92>
 80093f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009400:	f7f7 f902 	bl	8000608 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940c:	f7f6 ff46 	bl	800029c <__adddf3>
 8009410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009414:	3601      	adds	r6, #1
 8009416:	9b05      	ldr	r3, [sp, #20]
 8009418:	429e      	cmp	r6, r3
 800941a:	f1a7 0708 	sub.w	r7, r7, #8
 800941e:	ddeb      	ble.n	80093f8 <__kernel_rem_pio2+0xa0>
 8009420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	ecaa 7b02 	vstmia	sl!, {d7}
 800942c:	3508      	adds	r5, #8
 800942e:	e7ca      	b.n	80093c6 <__kernel_rem_pio2+0x6e>
 8009430:	9b00      	ldr	r3, [sp, #0]
 8009432:	f8dd 8000 	ldr.w	r8, [sp]
 8009436:	aa0c      	add	r2, sp, #48	@ 0x30
 8009438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800943c:	930a      	str	r3, [sp, #40]	@ 0x28
 800943e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009440:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009444:	9309      	str	r3, [sp, #36]	@ 0x24
 8009446:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800944a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800944c:	ab98      	add	r3, sp, #608	@ 0x260
 800944e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009452:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009456:	ed8d 7b02 	vstr	d7, [sp, #8]
 800945a:	ac0c      	add	r4, sp, #48	@ 0x30
 800945c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800945e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009462:	46a1      	mov	r9, r4
 8009464:	46c2      	mov	sl, r8
 8009466:	f1ba 0f00 	cmp.w	sl, #0
 800946a:	f1a5 0508 	sub.w	r5, r5, #8
 800946e:	dc77      	bgt.n	8009560 <__kernel_rem_pio2+0x208>
 8009470:	4658      	mov	r0, fp
 8009472:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009476:	f000 fac7 	bl	8009a08 <scalbn>
 800947a:	ec57 6b10 	vmov	r6, r7, d0
 800947e:	2200      	movs	r2, #0
 8009480:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f7 f8be 	bl	8000608 <__aeabi_dmul>
 800948c:	ec41 0b10 	vmov	d0, r0, r1
 8009490:	f000 fb3a 	bl	8009b08 <floor>
 8009494:	4b75      	ldr	r3, [pc, #468]	@ (800966c <__kernel_rem_pio2+0x314>)
 8009496:	ec51 0b10 	vmov	r0, r1, d0
 800949a:	2200      	movs	r2, #0
 800949c:	f7f7 f8b4 	bl	8000608 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f6 fef6 	bl	8000298 <__aeabi_dsub>
 80094ac:	460f      	mov	r7, r1
 80094ae:	4606      	mov	r6, r0
 80094b0:	f7f7 fb5a 	bl	8000b68 <__aeabi_d2iz>
 80094b4:	9002      	str	r0, [sp, #8]
 80094b6:	f7f7 f83d 	bl	8000534 <__aeabi_i2d>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	f1bb 0f00 	cmp.w	fp, #0
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	dd6c      	ble.n	80095aa <__kernel_rem_pio2+0x252>
 80094d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80094d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80094d6:	9d02      	ldr	r5, [sp, #8]
 80094d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094dc:	f1cb 0018 	rsb	r0, fp, #24
 80094e0:	fa43 f200 	asr.w	r2, r3, r0
 80094e4:	4415      	add	r5, r2
 80094e6:	4082      	lsls	r2, r0
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80094ec:	9502      	str	r5, [sp, #8]
 80094ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094f2:	f1cb 0217 	rsb	r2, fp, #23
 80094f6:	fa43 f902 	asr.w	r9, r3, r2
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	dd64      	ble.n	80095ca <__kernel_rem_pio2+0x272>
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	3301      	adds	r3, #1
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	4615      	mov	r5, r2
 800950a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800950e:	4590      	cmp	r8, r2
 8009510:	f300 80b8 	bgt.w	8009684 <__kernel_rem_pio2+0x32c>
 8009514:	f1bb 0f00 	cmp.w	fp, #0
 8009518:	dd07      	ble.n	800952a <__kernel_rem_pio2+0x1d2>
 800951a:	f1bb 0f01 	cmp.w	fp, #1
 800951e:	f000 80bf 	beq.w	80096a0 <__kernel_rem_pio2+0x348>
 8009522:	f1bb 0f02 	cmp.w	fp, #2
 8009526:	f000 80c6 	beq.w	80096b6 <__kernel_rem_pio2+0x35e>
 800952a:	f1b9 0f02 	cmp.w	r9, #2
 800952e:	d14c      	bne.n	80095ca <__kernel_rem_pio2+0x272>
 8009530:	4632      	mov	r2, r6
 8009532:	463b      	mov	r3, r7
 8009534:	494e      	ldr	r1, [pc, #312]	@ (8009670 <__kernel_rem_pio2+0x318>)
 8009536:	2000      	movs	r0, #0
 8009538:	f7f6 feae 	bl	8000298 <__aeabi_dsub>
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	2d00      	cmp	r5, #0
 8009542:	d042      	beq.n	80095ca <__kernel_rem_pio2+0x272>
 8009544:	4658      	mov	r0, fp
 8009546:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009660 <__kernel_rem_pio2+0x308>
 800954a:	f000 fa5d 	bl	8009a08 <scalbn>
 800954e:	4630      	mov	r0, r6
 8009550:	4639      	mov	r1, r7
 8009552:	ec53 2b10 	vmov	r2, r3, d0
 8009556:	f7f6 fe9f 	bl	8000298 <__aeabi_dsub>
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	e034      	b.n	80095ca <__kernel_rem_pio2+0x272>
 8009560:	4b44      	ldr	r3, [pc, #272]	@ (8009674 <__kernel_rem_pio2+0x31c>)
 8009562:	2200      	movs	r2, #0
 8009564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009568:	f7f7 f84e 	bl	8000608 <__aeabi_dmul>
 800956c:	f7f7 fafc 	bl	8000b68 <__aeabi_d2iz>
 8009570:	f7f6 ffe0 	bl	8000534 <__aeabi_i2d>
 8009574:	4b40      	ldr	r3, [pc, #256]	@ (8009678 <__kernel_rem_pio2+0x320>)
 8009576:	2200      	movs	r2, #0
 8009578:	4606      	mov	r6, r0
 800957a:	460f      	mov	r7, r1
 800957c:	f7f7 f844 	bl	8000608 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009588:	f7f6 fe86 	bl	8000298 <__aeabi_dsub>
 800958c:	f7f7 faec 	bl	8000b68 <__aeabi_d2iz>
 8009590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009594:	f849 0b04 	str.w	r0, [r9], #4
 8009598:	4639      	mov	r1, r7
 800959a:	4630      	mov	r0, r6
 800959c:	f7f6 fe7e 	bl	800029c <__adddf3>
 80095a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a8:	e75d      	b.n	8009466 <__kernel_rem_pio2+0x10e>
 80095aa:	d107      	bne.n	80095bc <__kernel_rem_pio2+0x264>
 80095ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80095b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80095b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80095ba:	e79e      	b.n	80094fa <__kernel_rem_pio2+0x1a2>
 80095bc:	4b2f      	ldr	r3, [pc, #188]	@ (800967c <__kernel_rem_pio2+0x324>)
 80095be:	2200      	movs	r2, #0
 80095c0:	f7f7 faa8 	bl	8000b14 <__aeabi_dcmpge>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d143      	bne.n	8009650 <__kernel_rem_pio2+0x2f8>
 80095c8:	4681      	mov	r9, r0
 80095ca:	2200      	movs	r2, #0
 80095cc:	2300      	movs	r3, #0
 80095ce:	4630      	mov	r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	f7f7 fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f000 80bf 	beq.w	800975a <__kernel_rem_pio2+0x402>
 80095dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80095e0:	2200      	movs	r2, #0
 80095e2:	9900      	ldr	r1, [sp, #0]
 80095e4:	428b      	cmp	r3, r1
 80095e6:	da6e      	bge.n	80096c6 <__kernel_rem_pio2+0x36e>
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	f000 8089 	beq.w	8009700 <__kernel_rem_pio2+0x3a8>
 80095ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80095f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80095f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80095f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f6      	beq.n	80095ee <__kernel_rem_pio2+0x296>
 8009600:	4658      	mov	r0, fp
 8009602:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009660 <__kernel_rem_pio2+0x308>
 8009606:	f000 f9ff 	bl	8009a08 <scalbn>
 800960a:	f108 0301 	add.w	r3, r8, #1
 800960e:	00da      	lsls	r2, r3, #3
 8009610:	9205      	str	r2, [sp, #20]
 8009612:	ec55 4b10 	vmov	r4, r5, d0
 8009616:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009618:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009674 <__kernel_rem_pio2+0x31c>
 800961c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009620:	4646      	mov	r6, r8
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	2e00      	cmp	r6, #0
 8009628:	f280 80cf 	bge.w	80097ca <__kernel_rem_pio2+0x472>
 800962c:	4644      	mov	r4, r8
 800962e:	2c00      	cmp	r4, #0
 8009630:	f2c0 80fd 	blt.w	800982e <__kernel_rem_pio2+0x4d6>
 8009634:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <__kernel_rem_pio2+0x328>)
 8009636:	461f      	mov	r7, r3
 8009638:	ab70      	add	r3, sp, #448	@ 0x1c0
 800963a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800963e:	9306      	str	r3, [sp, #24]
 8009640:	f04f 0a00 	mov.w	sl, #0
 8009644:	f04f 0b00 	mov.w	fp, #0
 8009648:	2600      	movs	r6, #0
 800964a:	eba8 0504 	sub.w	r5, r8, r4
 800964e:	e0e2      	b.n	8009816 <__kernel_rem_pio2+0x4be>
 8009650:	f04f 0902 	mov.w	r9, #2
 8009654:	e754      	b.n	8009500 <__kernel_rem_pio2+0x1a8>
 8009656:	bf00      	nop
	...
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	0800c240 	.word	0x0800c240
 800966c:	40200000 	.word	0x40200000
 8009670:	3ff00000 	.word	0x3ff00000
 8009674:	3e700000 	.word	0x3e700000
 8009678:	41700000 	.word	0x41700000
 800967c:	3fe00000 	.word	0x3fe00000
 8009680:	0800c200 	.word	0x0800c200
 8009684:	f854 3b04 	ldr.w	r3, [r4], #4
 8009688:	b945      	cbnz	r5, 800969c <__kernel_rem_pio2+0x344>
 800968a:	b123      	cbz	r3, 8009696 <__kernel_rem_pio2+0x33e>
 800968c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009690:	f844 3c04 	str.w	r3, [r4, #-4]
 8009694:	2301      	movs	r3, #1
 8009696:	3201      	adds	r2, #1
 8009698:	461d      	mov	r5, r3
 800969a:	e738      	b.n	800950e <__kernel_rem_pio2+0x1b6>
 800969c:	1acb      	subs	r3, r1, r3
 800969e:	e7f7      	b.n	8009690 <__kernel_rem_pio2+0x338>
 80096a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80096a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80096a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80096ae:	a90c      	add	r1, sp, #48	@ 0x30
 80096b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80096b4:	e739      	b.n	800952a <__kernel_rem_pio2+0x1d2>
 80096b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80096ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80096c4:	e7f3      	b.n	80096ae <__kernel_rem_pio2+0x356>
 80096c6:	a90c      	add	r1, sp, #48	@ 0x30
 80096c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	430a      	orrs	r2, r1
 80096d0:	e787      	b.n	80095e2 <__kernel_rem_pio2+0x28a>
 80096d2:	3401      	adds	r4, #1
 80096d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d0fa      	beq.n	80096d2 <__kernel_rem_pio2+0x37a>
 80096dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096e2:	eb0d 0503 	add.w	r5, sp, r3
 80096e6:	9b06      	ldr	r3, [sp, #24]
 80096e8:	aa20      	add	r2, sp, #128	@ 0x80
 80096ea:	4443      	add	r3, r8
 80096ec:	f108 0701 	add.w	r7, r8, #1
 80096f0:	3d98      	subs	r5, #152	@ 0x98
 80096f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80096f6:	4444      	add	r4, r8
 80096f8:	42bc      	cmp	r4, r7
 80096fa:	da04      	bge.n	8009706 <__kernel_rem_pio2+0x3ae>
 80096fc:	46a0      	mov	r8, r4
 80096fe:	e6a2      	b.n	8009446 <__kernel_rem_pio2+0xee>
 8009700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009702:	2401      	movs	r4, #1
 8009704:	e7e6      	b.n	80096d4 <__kernel_rem_pio2+0x37c>
 8009706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009708:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800970c:	f7f6 ff12 	bl	8000534 <__aeabi_i2d>
 8009710:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80099d8 <__kernel_rem_pio2+0x680>
 8009714:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800971c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009720:	46b2      	mov	sl, r6
 8009722:	f04f 0800 	mov.w	r8, #0
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	4598      	cmp	r8, r3
 800972a:	dd05      	ble.n	8009738 <__kernel_rem_pio2+0x3e0>
 800972c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009730:	3701      	adds	r7, #1
 8009732:	eca5 7b02 	vstmia	r5!, {d7}
 8009736:	e7df      	b.n	80096f8 <__kernel_rem_pio2+0x3a0>
 8009738:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800973c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009740:	f7f6 ff62 	bl	8000608 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	f108 0801 	add.w	r8, r8, #1
 8009754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009758:	e7e5      	b.n	8009726 <__kernel_rem_pio2+0x3ce>
 800975a:	f1cb 0000 	rsb	r0, fp, #0
 800975e:	ec47 6b10 	vmov	d0, r6, r7
 8009762:	f000 f951 	bl	8009a08 <scalbn>
 8009766:	ec55 4b10 	vmov	r4, r5, d0
 800976a:	4b9d      	ldr	r3, [pc, #628]	@ (80099e0 <__kernel_rem_pio2+0x688>)
 800976c:	2200      	movs	r2, #0
 800976e:	4620      	mov	r0, r4
 8009770:	4629      	mov	r1, r5
 8009772:	f7f7 f9cf 	bl	8000b14 <__aeabi_dcmpge>
 8009776:	b300      	cbz	r0, 80097ba <__kernel_rem_pio2+0x462>
 8009778:	4b9a      	ldr	r3, [pc, #616]	@ (80099e4 <__kernel_rem_pio2+0x68c>)
 800977a:	2200      	movs	r2, #0
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 ff42 	bl	8000608 <__aeabi_dmul>
 8009784:	f7f7 f9f0 	bl	8000b68 <__aeabi_d2iz>
 8009788:	4606      	mov	r6, r0
 800978a:	f7f6 fed3 	bl	8000534 <__aeabi_i2d>
 800978e:	4b94      	ldr	r3, [pc, #592]	@ (80099e0 <__kernel_rem_pio2+0x688>)
 8009790:	2200      	movs	r2, #0
 8009792:	f7f6 ff39 	bl	8000608 <__aeabi_dmul>
 8009796:	460b      	mov	r3, r1
 8009798:	4602      	mov	r2, r0
 800979a:	4629      	mov	r1, r5
 800979c:	4620      	mov	r0, r4
 800979e:	f7f6 fd7b 	bl	8000298 <__aeabi_dsub>
 80097a2:	f7f7 f9e1 	bl	8000b68 <__aeabi_d2iz>
 80097a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80097a8:	f10b 0b18 	add.w	fp, fp, #24
 80097ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80097b0:	f108 0801 	add.w	r8, r8, #1
 80097b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80097b8:	e722      	b.n	8009600 <__kernel_rem_pio2+0x2a8>
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f7 f9d3 	bl	8000b68 <__aeabi_d2iz>
 80097c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80097c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80097c8:	e71a      	b.n	8009600 <__kernel_rem_pio2+0x2a8>
 80097ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80097cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80097d0:	f7f6 feb0 	bl	8000534 <__aeabi_i2d>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 ff16 	bl	8000608 <__aeabi_dmul>
 80097dc:	4652      	mov	r2, sl
 80097de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80097e2:	465b      	mov	r3, fp
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f6 ff0e 	bl	8000608 <__aeabi_dmul>
 80097ec:	3e01      	subs	r6, #1
 80097ee:	4604      	mov	r4, r0
 80097f0:	460d      	mov	r5, r1
 80097f2:	e718      	b.n	8009626 <__kernel_rem_pio2+0x2ce>
 80097f4:	9906      	ldr	r1, [sp, #24]
 80097f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80097fa:	9106      	str	r1, [sp, #24]
 80097fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009800:	f7f6 ff02 	bl	8000608 <__aeabi_dmul>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	f7f6 fd46 	bl	800029c <__adddf3>
 8009810:	3601      	adds	r6, #1
 8009812:	4682      	mov	sl, r0
 8009814:	468b      	mov	fp, r1
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	429e      	cmp	r6, r3
 800981a:	dc01      	bgt.n	8009820 <__kernel_rem_pio2+0x4c8>
 800981c:	42b5      	cmp	r5, r6
 800981e:	dae9      	bge.n	80097f4 <__kernel_rem_pio2+0x49c>
 8009820:	ab48      	add	r3, sp, #288	@ 0x120
 8009822:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009826:	e9c5 ab00 	strd	sl, fp, [r5]
 800982a:	3c01      	subs	r4, #1
 800982c:	e6ff      	b.n	800962e <__kernel_rem_pio2+0x2d6>
 800982e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009830:	2b02      	cmp	r3, #2
 8009832:	dc0b      	bgt.n	800984c <__kernel_rem_pio2+0x4f4>
 8009834:	2b00      	cmp	r3, #0
 8009836:	dc39      	bgt.n	80098ac <__kernel_rem_pio2+0x554>
 8009838:	d05d      	beq.n	80098f6 <__kernel_rem_pio2+0x59e>
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	f003 0007 	and.w	r0, r3, #7
 8009840:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009844:	ecbd 8b02 	vpop	{d8}
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800984e:	2b03      	cmp	r3, #3
 8009850:	d1f3      	bne.n	800983a <__kernel_rem_pio2+0x4e2>
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009858:	eb0d 0403 	add.w	r4, sp, r3
 800985c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009860:	4625      	mov	r5, r4
 8009862:	46c2      	mov	sl, r8
 8009864:	f1ba 0f00 	cmp.w	sl, #0
 8009868:	f1a5 0508 	sub.w	r5, r5, #8
 800986c:	dc6b      	bgt.n	8009946 <__kernel_rem_pio2+0x5ee>
 800986e:	4645      	mov	r5, r8
 8009870:	2d01      	cmp	r5, #1
 8009872:	f1a4 0408 	sub.w	r4, r4, #8
 8009876:	f300 8087 	bgt.w	8009988 <__kernel_rem_pio2+0x630>
 800987a:	9c05      	ldr	r4, [sp, #20]
 800987c:	ab48      	add	r3, sp, #288	@ 0x120
 800987e:	441c      	add	r4, r3
 8009880:	2000      	movs	r0, #0
 8009882:	2100      	movs	r1, #0
 8009884:	f1b8 0f01 	cmp.w	r8, #1
 8009888:	f300 809c 	bgt.w	80099c4 <__kernel_rem_pio2+0x66c>
 800988c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009890:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009894:	f1b9 0f00 	cmp.w	r9, #0
 8009898:	f040 80a6 	bne.w	80099e8 <__kernel_rem_pio2+0x690>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	e9c3 7800 	strd	r7, r8, [r3]
 80098a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80098a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80098aa:	e7c6      	b.n	800983a <__kernel_rem_pio2+0x4e2>
 80098ac:	9d05      	ldr	r5, [sp, #20]
 80098ae:	ab48      	add	r3, sp, #288	@ 0x120
 80098b0:	441d      	add	r5, r3
 80098b2:	4644      	mov	r4, r8
 80098b4:	2000      	movs	r0, #0
 80098b6:	2100      	movs	r1, #0
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	da35      	bge.n	8009928 <__kernel_rem_pio2+0x5d0>
 80098bc:	f1b9 0f00 	cmp.w	r9, #0
 80098c0:	d038      	beq.n	8009934 <__kernel_rem_pio2+0x5dc>
 80098c2:	4602      	mov	r2, r0
 80098c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098c8:	9c04      	ldr	r4, [sp, #16]
 80098ca:	e9c4 2300 	strd	r2, r3, [r4]
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80098d6:	f7f6 fcdf 	bl	8000298 <__aeabi_dsub>
 80098da:	ad4a      	add	r5, sp, #296	@ 0x128
 80098dc:	2401      	movs	r4, #1
 80098de:	45a0      	cmp	r8, r4
 80098e0:	da2b      	bge.n	800993a <__kernel_rem_pio2+0x5e2>
 80098e2:	f1b9 0f00 	cmp.w	r9, #0
 80098e6:	d002      	beq.n	80098ee <__kernel_rem_pio2+0x596>
 80098e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098ec:	4619      	mov	r1, r3
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098f4:	e7a1      	b.n	800983a <__kernel_rem_pio2+0x4e2>
 80098f6:	9c05      	ldr	r4, [sp, #20]
 80098f8:	ab48      	add	r3, sp, #288	@ 0x120
 80098fa:	441c      	add	r4, r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	2100      	movs	r1, #0
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	da09      	bge.n	800991a <__kernel_rem_pio2+0x5c2>
 8009906:	f1b9 0f00 	cmp.w	r9, #0
 800990a:	d002      	beq.n	8009912 <__kernel_rem_pio2+0x5ba>
 800990c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009910:	4619      	mov	r1, r3
 8009912:	9b04      	ldr	r3, [sp, #16]
 8009914:	e9c3 0100 	strd	r0, r1, [r3]
 8009918:	e78f      	b.n	800983a <__kernel_rem_pio2+0x4e2>
 800991a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800991e:	f7f6 fcbd 	bl	800029c <__adddf3>
 8009922:	f108 38ff 	add.w	r8, r8, #4294967295
 8009926:	e7eb      	b.n	8009900 <__kernel_rem_pio2+0x5a8>
 8009928:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800992c:	f7f6 fcb6 	bl	800029c <__adddf3>
 8009930:	3c01      	subs	r4, #1
 8009932:	e7c1      	b.n	80098b8 <__kernel_rem_pio2+0x560>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	e7c6      	b.n	80098c8 <__kernel_rem_pio2+0x570>
 800993a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800993e:	f7f6 fcad 	bl	800029c <__adddf3>
 8009942:	3401      	adds	r4, #1
 8009944:	e7cb      	b.n	80098de <__kernel_rem_pio2+0x586>
 8009946:	ed95 7b00 	vldr	d7, [r5]
 800994a:	ed8d 7b00 	vstr	d7, [sp]
 800994e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009956:	ec53 2b17 	vmov	r2, r3, d7
 800995a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800995e:	f7f6 fc9d 	bl	800029c <__adddf3>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800996e:	f7f6 fc93 	bl	8000298 <__aeabi_dsub>
 8009972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009976:	f7f6 fc91 	bl	800029c <__adddf3>
 800997a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009982:	e9c5 6700 	strd	r6, r7, [r5]
 8009986:	e76d      	b.n	8009864 <__kernel_rem_pio2+0x50c>
 8009988:	ed94 7b00 	vldr	d7, [r4]
 800998c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009990:	ec51 0b17 	vmov	r0, r1, d7
 8009994:	4652      	mov	r2, sl
 8009996:	465b      	mov	r3, fp
 8009998:	ed8d 7b00 	vstr	d7, [sp]
 800999c:	f7f6 fc7e 	bl	800029c <__adddf3>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ac:	f7f6 fc74 	bl	8000298 <__aeabi_dsub>
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	f7f6 fc72 	bl	800029c <__adddf3>
 80099b8:	3d01      	subs	r5, #1
 80099ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099be:	e9c4 6700 	strd	r6, r7, [r4]
 80099c2:	e755      	b.n	8009870 <__kernel_rem_pio2+0x518>
 80099c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80099c8:	f7f6 fc68 	bl	800029c <__adddf3>
 80099cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80099d0:	e758      	b.n	8009884 <__kernel_rem_pio2+0x52c>
 80099d2:	bf00      	nop
 80099d4:	f3af 8000 	nop.w
	...
 80099e0:	41700000 	.word	0x41700000
 80099e4:	3e700000 	.word	0x3e700000
 80099e8:	9b04      	ldr	r3, [sp, #16]
 80099ea:	9a04      	ldr	r2, [sp, #16]
 80099ec:	601f      	str	r7, [r3, #0]
 80099ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80099f2:	605c      	str	r4, [r3, #4]
 80099f4:	609d      	str	r5, [r3, #8]
 80099f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099fa:	60d3      	str	r3, [r2, #12]
 80099fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a00:	6110      	str	r0, [r2, #16]
 8009a02:	6153      	str	r3, [r2, #20]
 8009a04:	e719      	b.n	800983a <__kernel_rem_pio2+0x4e2>
 8009a06:	bf00      	nop

08009a08 <scalbn>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	ec55 4b10 	vmov	r4, r5, d0
 8009a0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009a12:	4606      	mov	r6, r0
 8009a14:	462b      	mov	r3, r5
 8009a16:	b991      	cbnz	r1, 8009a3e <scalbn+0x36>
 8009a18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009a1c:	4323      	orrs	r3, r4
 8009a1e:	d03d      	beq.n	8009a9c <scalbn+0x94>
 8009a20:	4b35      	ldr	r3, [pc, #212]	@ (8009af8 <scalbn+0xf0>)
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	2200      	movs	r2, #0
 8009a28:	f7f6 fdee 	bl	8000608 <__aeabi_dmul>
 8009a2c:	4b33      	ldr	r3, [pc, #204]	@ (8009afc <scalbn+0xf4>)
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
 8009a34:	da0f      	bge.n	8009a56 <scalbn+0x4e>
 8009a36:	a328      	add	r3, pc, #160	@ (adr r3, 8009ad8 <scalbn+0xd0>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	e01e      	b.n	8009a7c <scalbn+0x74>
 8009a3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009a42:	4291      	cmp	r1, r2
 8009a44:	d10b      	bne.n	8009a5e <scalbn+0x56>
 8009a46:	4622      	mov	r2, r4
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 fc26 	bl	800029c <__adddf3>
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	e022      	b.n	8009a9c <scalbn+0x94>
 8009a56:	460b      	mov	r3, r1
 8009a58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a5c:	3936      	subs	r1, #54	@ 0x36
 8009a5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009a62:	4296      	cmp	r6, r2
 8009a64:	dd0d      	ble.n	8009a82 <scalbn+0x7a>
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ae0 <scalbn+0xd8>)
 8009a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a6e:	da02      	bge.n	8009a76 <scalbn+0x6e>
 8009a70:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ae8 <scalbn+0xe0>)
 8009a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a76:	a31a      	add	r3, pc, #104	@ (adr r3, 8009ae0 <scalbn+0xd8>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	e7e6      	b.n	8009a50 <scalbn+0x48>
 8009a82:	1872      	adds	r2, r6, r1
 8009a84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009a88:	428a      	cmp	r2, r1
 8009a8a:	dcec      	bgt.n	8009a66 <scalbn+0x5e>
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	dd08      	ble.n	8009aa2 <scalbn+0x9a>
 8009a90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a9c:	ec45 4b10 	vmov	d0, r4, r5
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009aa6:	da08      	bge.n	8009aba <scalbn+0xb2>
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	a10b      	add	r1, pc, #44	@ (adr r1, 8009ad8 <scalbn+0xd0>)
 8009aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab0:	dac1      	bge.n	8009a36 <scalbn+0x2e>
 8009ab2:	a10f      	add	r1, pc, #60	@ (adr r1, 8009af0 <scalbn+0xe8>)
 8009ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab8:	e7bd      	b.n	8009a36 <scalbn+0x2e>
 8009aba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009abe:	3236      	adds	r2, #54	@ 0x36
 8009ac0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009ac4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <scalbn+0xf8>)
 8009acc:	4629      	mov	r1, r5
 8009ace:	2200      	movs	r2, #0
 8009ad0:	e7d4      	b.n	8009a7c <scalbn+0x74>
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
 8009ad8:	c2f8f359 	.word	0xc2f8f359
 8009adc:	01a56e1f 	.word	0x01a56e1f
 8009ae0:	8800759c 	.word	0x8800759c
 8009ae4:	7e37e43c 	.word	0x7e37e43c
 8009ae8:	8800759c 	.word	0x8800759c
 8009aec:	fe37e43c 	.word	0xfe37e43c
 8009af0:	c2f8f359 	.word	0xc2f8f359
 8009af4:	81a56e1f 	.word	0x81a56e1f
 8009af8:	43500000 	.word	0x43500000
 8009afc:	ffff3cb0 	.word	0xffff3cb0
 8009b00:	3c900000 	.word	0x3c900000
 8009b04:	00000000 	.word	0x00000000

08009b08 <floor>:
 8009b08:	ec51 0b10 	vmov	r0, r1, d0
 8009b0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009b18:	2e13      	cmp	r6, #19
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	4680      	mov	r8, r0
 8009b20:	dc34      	bgt.n	8009b8c <floor+0x84>
 8009b22:	2e00      	cmp	r6, #0
 8009b24:	da17      	bge.n	8009b56 <floor+0x4e>
 8009b26:	a332      	add	r3, pc, #200	@ (adr r3, 8009bf0 <floor+0xe8>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fbb6 	bl	800029c <__adddf3>
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	f7f6 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8009b38:	b150      	cbz	r0, 8009b50 <floor+0x48>
 8009b3a:	2c00      	cmp	r4, #0
 8009b3c:	da55      	bge.n	8009bea <floor+0xe2>
 8009b3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009b42:	432c      	orrs	r4, r5
 8009b44:	2500      	movs	r5, #0
 8009b46:	42ac      	cmp	r4, r5
 8009b48:	4c2b      	ldr	r4, [pc, #172]	@ (8009bf8 <floor+0xf0>)
 8009b4a:	bf08      	it	eq
 8009b4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	e023      	b.n	8009b9e <floor+0x96>
 8009b56:	4f29      	ldr	r7, [pc, #164]	@ (8009bfc <floor+0xf4>)
 8009b58:	4137      	asrs	r7, r6
 8009b5a:	ea01 0307 	and.w	r3, r1, r7
 8009b5e:	4303      	orrs	r3, r0
 8009b60:	d01d      	beq.n	8009b9e <floor+0x96>
 8009b62:	a323      	add	r3, pc, #140	@ (adr r3, 8009bf0 <floor+0xe8>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fb98 	bl	800029c <__adddf3>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f7f6 ffda 	bl	8000b28 <__aeabi_dcmpgt>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0eb      	beq.n	8009b50 <floor+0x48>
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	bfbe      	ittt	lt
 8009b7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009b80:	4133      	asrlt	r3, r6
 8009b82:	18e4      	addlt	r4, r4, r3
 8009b84:	ea24 0407 	bic.w	r4, r4, r7
 8009b88:	2500      	movs	r5, #0
 8009b8a:	e7e1      	b.n	8009b50 <floor+0x48>
 8009b8c:	2e33      	cmp	r6, #51	@ 0x33
 8009b8e:	dd0a      	ble.n	8009ba6 <floor+0x9e>
 8009b90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009b94:	d103      	bne.n	8009b9e <floor+0x96>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	f7f6 fb7f 	bl	800029c <__adddf3>
 8009b9e:	ec41 0b10 	vmov	d0, r0, r1
 8009ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009baa:	f04f 37ff 	mov.w	r7, #4294967295
 8009bae:	40df      	lsrs	r7, r3
 8009bb0:	4207      	tst	r7, r0
 8009bb2:	d0f4      	beq.n	8009b9e <floor+0x96>
 8009bb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009bf0 <floor+0xe8>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fb6f 	bl	800029c <__adddf3>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f7f6 ffb1 	bl	8000b28 <__aeabi_dcmpgt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0c2      	beq.n	8009b50 <floor+0x48>
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	da0a      	bge.n	8009be4 <floor+0xdc>
 8009bce:	2e14      	cmp	r6, #20
 8009bd0:	d101      	bne.n	8009bd6 <floor+0xce>
 8009bd2:	3401      	adds	r4, #1
 8009bd4:	e006      	b.n	8009be4 <floor+0xdc>
 8009bd6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009bda:	2301      	movs	r3, #1
 8009bdc:	40b3      	lsls	r3, r6
 8009bde:	441d      	add	r5, r3
 8009be0:	4545      	cmp	r5, r8
 8009be2:	d3f6      	bcc.n	8009bd2 <floor+0xca>
 8009be4:	ea25 0507 	bic.w	r5, r5, r7
 8009be8:	e7b2      	b.n	8009b50 <floor+0x48>
 8009bea:	2500      	movs	r5, #0
 8009bec:	462c      	mov	r4, r5
 8009bee:	e7af      	b.n	8009b50 <floor+0x48>
 8009bf0:	8800759c 	.word	0x8800759c
 8009bf4:	7e37e43c 	.word	0x7e37e43c
 8009bf8:	bff00000 	.word	0xbff00000
 8009bfc:	000fffff 	.word	0x000fffff

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
