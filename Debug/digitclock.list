
digitclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080044c8  080044c8  000054c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000010  080046d8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  080046d8  0000649c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079b2  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001707  00000000  00000000  0000d9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  0000f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016092  00000000  00000000  0000fed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a970  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086639  00000000  00000000  000308d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6f11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002394  00000000  00000000  000b6f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b92e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080044b0 	.word	0x080044b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080044b0 	.word	0x080044b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96a 	b.w	8000e00 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f f68c 	uxth.w	r6, ip
 8000b7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b82:	fb07 1114 	mls	r1, r7, r4, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9a:	f080 8112 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810f 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb00 f606 	mul.w	r6, r0, r6
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bca:	f080 80fc 	bcs.w	8000dc6 <__udivmoddi4+0x282>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f9 	bls.w	8000dc6 <__udivmoddi4+0x282>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	1b9b      	subs	r3, r3, r6
 8000bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80f0 	bcc.w	8000df0 <__udivmoddi4+0x2ac>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 8090 	bne.w	8000d48 <__udivmoddi4+0x204>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c46:	fb07 f006 	mul.w	r0, r7, r6
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb00 f707 	mul.w	r7, r0, r7
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80b0 	bhi.w	8000dea <__udivmoddi4+0x2a6>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0620 	rsb	r6, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca8:	ea43 030c 	orr.w	r3, r3, ip
 8000cac:	40f4      	lsrs	r4, r6
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	0c38      	lsrs	r0, r7, #16
 8000cb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ccc:	45a1      	cmp	r9, r4
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cda:	f080 8084 	bcs.w	8000de6 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8081 	bls.w	8000de6 <__udivmoddi4+0x2a2>
 8000ce4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	eba4 0409 	sub.w	r4, r4, r9
 8000cee:	fa1f f983 	uxth.w	r9, r3
 8000cf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x1d2>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d0c:	d267      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d965      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d1e:	eba4 040c 	sub.w	r4, r4, ip
 8000d22:	429c      	cmp	r4, r3
 8000d24:	46ce      	mov	lr, r9
 8000d26:	469c      	mov	ip, r3
 8000d28:	d351      	bcc.n	8000dce <__udivmoddi4+0x28a>
 8000d2a:	d04e      	beq.n	8000dca <__udivmoddi4+0x286>
 8000d2c:	b155      	cbz	r5, 8000d44 <__udivmoddi4+0x200>
 8000d2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d32:	eb64 040c 	sbc.w	r4, r4, ip
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	40cb      	lsrs	r3, r1
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	e9c5 6400 	strd	r6, r4, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	e750      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa24 f303 	lsr.w	r3, r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb00 f107 	mul.w	r1, r0, r7
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x24c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d86:	d22c      	bcs.n	8000de2 <__udivmoddi4+0x29e>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d92a      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da0:	fb01 f307 	mul.w	r3, r1, r7
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x276>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db0:	d213      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d911      	bls.n	8000dda <__udivmoddi4+0x296>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1ae4      	subs	r4, r4, r3
 8000dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc0:	e739      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	e6f0      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e706      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dca:	45c8      	cmp	r8, r9
 8000dcc:	d2ae      	bcs.n	8000d2c <__udivmoddi4+0x1e8>
 8000dce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	e7a8      	b.n	8000d2c <__udivmoddi4+0x1e8>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e7ed      	b.n	8000dba <__udivmoddi4+0x276>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e799      	b.n	8000d16 <__udivmoddi4+0x1d2>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e7d4      	b.n	8000d90 <__udivmoddi4+0x24c>
 8000de6:	46d6      	mov	lr, sl
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000dea:	4463      	add	r3, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e74d      	b.n	8000c8c <__udivmoddi4+0x148>
 8000df0:	4606      	mov	r6, r0
 8000df2:	4623      	mov	r3, r4
 8000df4:	4608      	mov	r0, r1
 8000df6:	e70f      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	e730      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <SystickCallback>:
//전역 변수 선언
uint8_t hour = 12, minute = 0, second = 0;
uint8_t update = 0;

//1ms주기로 호출됨
void SystickCallback(){
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	static ksec=0;
	ksec++;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <SystickCallback+0x7c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <SystickCallback+0x7c>)
 8000e10:	6013      	str	r3, [r2, #0]
	if(ksec == 1000){
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <SystickCallback+0x7c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e1a:	d12c      	bne.n	8000e76 <SystickCallback+0x72>
		ksec = 0;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <SystickCallback+0x7c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
		second++;
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <SystickCallback+0x80>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <SystickCallback+0x80>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		update = 1;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <SystickCallback+0x84>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
		if (second == 60) {
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <SystickCallback+0x80>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e3a:	d11c      	bne.n	8000e76 <SystickCallback+0x72>
			second = 0;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <SystickCallback+0x80>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
			minute++;
 8000e42:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <SystickCallback+0x88>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <SystickCallback+0x88>)
 8000e4c:	701a      	strb	r2, [r3, #0]
			if(minute == 60){
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <SystickCallback+0x88>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e54:	d10f      	bne.n	8000e76 <SystickCallback+0x72>
				minute = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <SystickCallback+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
				hour++;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <SystickCallback+0x8c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <SystickCallback+0x8c>)
 8000e66:	701a      	strb	r2, [r3, #0]
				if(hour == 12){
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <SystickCallback+0x8c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b0c      	cmp	r3, #12
 8000e6e:	d102      	bne.n	8000e76 <SystickCallback+0x72>
					hour = 0;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <SystickCallback+0x8c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000030 	.word	0x20000030
 8000e84:	2000002d 	.word	0x2000002d
 8000e88:	2000002e 	.word	0x2000002e
 8000e8c:	2000002c 	.word	0x2000002c
 8000e90:	20000000 	.word	0x20000000
 8000e94:	00000000 	.word	0x00000000

08000e98 <app>:

void app(){
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b088      	sub	sp, #32
 8000e9e:	af02      	add	r7, sp, #8
	//장치 초기화
	ssd1306_Init();
 8000ea0:	f000 fb3c 	bl	800151c <ssd1306_Init>
	//for analogClock
	const uint8_t centerX = 63;
 8000ea4:	233f      	movs	r3, #63	@ 0x3f
 8000ea6:	75fb      	strb	r3, [r7, #23]
	const uint8_t centerY = 31;
 8000ea8:	231f      	movs	r3, #31
 8000eaa:	75bb      	strb	r3, [r7, #22]
	const uint8_t lengthS = 29;
 8000eac:	231d      	movs	r3, #29
 8000eae:	757b      	strb	r3, [r7, #21]
	const uint8_t lengthM = 25;
 8000eb0:	2319      	movs	r3, #25
 8000eb2:	753b      	strb	r3, [r7, #20]
	const uint8_t lengthH = 18;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	74fb      	strb	r3, [r7, #19]
	ssd1306_DrawCircle(63, 31, 31, 1);
 8000eb8:	2301      	movs	r3, #1
 8000eba:	221f      	movs	r2, #31
 8000ebc:	211f      	movs	r1, #31
 8000ebe:	203f      	movs	r0, #63	@ 0x3f
 8000ec0:	f000 fca2 	bl	8001808 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8000ec4:	f000 fbb8 	bl	8001638 <ssd1306_UpdateScreen>
//		ssd1306_WriteString(str, Font_16x26, 1); //폰트, 컬러
//		ssd1306_UpdateScreen(); //스크린에 업데이트
		static uint8_t oldXs, oldYs, oldXm, oldYm, oldXh,oldYh;

		// 각도계산 (도 단위)
		uint16_t angleS = -90 + (360/60) * second;
 8000ec8:	4bd9      	ldr	r3, [pc, #868]	@ (8001230 <app+0x398>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	0052      	lsls	r2, r2, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b5a      	subs	r3, #90	@ 0x5a
 8000ed8:	823b      	strh	r3, [r7, #16]
		uint16_t angleM = -90 + (360/60) * minute;
 8000eda:	4bd6      	ldr	r3, [pc, #856]	@ (8001234 <app+0x39c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3b5a      	subs	r3, #90	@ 0x5a
 8000eea:	81fb      	strh	r3, [r7, #14]
		uint16_t angleH = -90 + (360/12) * hour;
 8000eec:	4bd2      	ldr	r3, [pc, #840]	@ (8001238 <app+0x3a0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3b5a      	subs	r3, #90	@ 0x5a
 8000efc:	81bb      	strh	r3, [r7, #12]

		// 바늘 끝위치 계산
		uint8_t Xs = centerX + cos(angleS * 3.14 / 180) * lengthS;
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fabb 	bl	800047c <__aeabi_i2d>
 8000f06:	4604      	mov	r4, r0
 8000f08:	460d      	mov	r5, r1
 8000f0a:	8a3b      	ldrh	r3, [r7, #16]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fab5 	bl	800047c <__aeabi_i2d>
 8000f12:	a3c5      	add	r3, pc, #788	@ (adr r3, 8001228 <app+0x390>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb1a 	bl	8000550 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4bc4      	ldr	r3, [pc, #784]	@ (800123c <app+0x3a4>)
 8000f2a:	f7ff fc3b 	bl	80007a4 <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	ec43 2b17 	vmov	d7, r2, r3
 8000f36:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3a:	eef0 0a67 	vmov.f32	s1, s15
 8000f3e:	f002 fa33 	bl	80033a8 <cos>
 8000f42:	ec59 8b10 	vmov	r8, r9, d0
 8000f46:	7d7b      	ldrb	r3, [r7, #21]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa97 	bl	800047c <__aeabi_i2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4640      	mov	r0, r8
 8000f54:	4649      	mov	r1, r9
 8000f56:	f7ff fafb 	bl	8000550 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff f93f 	bl	80001e4 <__adddf3>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fdb1 	bl	8000ad4 <__aeabi_d2uiz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	72fb      	strb	r3, [r7, #11]
		uint8_t Ys = centerY + sin(angleS * 3.14 / 180) * lengthS;
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa7f 	bl	800047c <__aeabi_i2d>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	460d      	mov	r5, r1
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa79 	bl	800047c <__aeabi_i2d>
 8000f8a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001228 <app+0x390>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fade 	bl	8000550 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4ba6      	ldr	r3, [pc, #664]	@ (800123c <app+0x3a4>)
 8000fa2:	f7ff fbff 	bl	80007a4 <__aeabi_ddiv>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ec43 2b17 	vmov	d7, r2, r3
 8000fae:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb2:	eef0 0a67 	vmov.f32	s1, s15
 8000fb6:	f002 fa4b 	bl	8003450 <sin>
 8000fba:	ec59 8b10 	vmov	r8, r9, d0
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa5b 	bl	800047c <__aeabi_i2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4640      	mov	r0, r8
 8000fcc:	4649      	mov	r1, r9
 8000fce:	f7ff fabf 	bl	8000550 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff f903 	bl	80001e4 <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fd75 	bl	8000ad4 <__aeabi_d2uiz>
 8000fea:	4603      	mov	r3, r0
 8000fec:	72bb      	strb	r3, [r7, #10]
		uint8_t Xm = centerX + cos(angleM * 3.14 / 180) * lengthM;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa43 	bl	800047c <__aeabi_i2d>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	460d      	mov	r5, r1
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa3d 	bl	800047c <__aeabi_i2d>
 8001002:	a389      	add	r3, pc, #548	@ (adr r3, 8001228 <app+0x390>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff faa2 	bl	8000550 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b88      	ldr	r3, [pc, #544]	@ (800123c <app+0x3a4>)
 800101a:	f7ff fbc3 	bl	80007a4 <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	ec43 2b17 	vmov	d7, r2, r3
 8001026:	eeb0 0a47 	vmov.f32	s0, s14
 800102a:	eef0 0a67 	vmov.f32	s1, s15
 800102e:	f002 f9bb 	bl	80033a8 <cos>
 8001032:	ec59 8b10 	vmov	r8, r9, d0
 8001036:	7d3b      	ldrb	r3, [r7, #20]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa1f 	bl	800047c <__aeabi_i2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f7ff fa83 	bl	8000550 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff f8c7 	bl	80001e4 <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd39 	bl	8000ad4 <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	727b      	strb	r3, [r7, #9]
		uint8_t Ym = centerY + sin(angleM * 3.14 / 180) * lengthM;
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa07 	bl	800047c <__aeabi_i2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa01 	bl	800047c <__aeabi_i2d>
 800107a:	a36b      	add	r3, pc, #428	@ (adr r3, 8001228 <app+0x390>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fa66 	bl	8000550 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <app+0x3a4>)
 8001092:	f7ff fb87 	bl	80007a4 <__aeabi_ddiv>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	ec43 2b17 	vmov	d7, r2, r3
 800109e:	eeb0 0a47 	vmov.f32	s0, s14
 80010a2:	eef0 0a67 	vmov.f32	s1, s15
 80010a6:	f002 f9d3 	bl	8003450 <sin>
 80010aa:	ec59 8b10 	vmov	r8, r9, d0
 80010ae:	7d3b      	ldrb	r3, [r7, #20]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9e3 	bl	800047c <__aeabi_i2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4640      	mov	r0, r8
 80010bc:	4649      	mov	r1, r9
 80010be:	f7ff fa47 	bl	8000550 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff f88b 	bl	80001e4 <__adddf3>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fcfd 	bl	8000ad4 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	723b      	strb	r3, [r7, #8]
		uint8_t Xh = centerX + cos(angleH * 3.14 / 180) * lengthH;
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f9cb 	bl	800047c <__aeabi_i2d>
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	89bb      	ldrh	r3, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9c5 	bl	800047c <__aeabi_i2d>
 80010f2:	a34d      	add	r3, pc, #308	@ (adr r3, 8001228 <app+0x390>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fa2a 	bl	8000550 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <app+0x3a4>)
 800110a:	f7ff fb4b 	bl	80007a4 <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	ec43 2b17 	vmov	d7, r2, r3
 8001116:	eeb0 0a47 	vmov.f32	s0, s14
 800111a:	eef0 0a67 	vmov.f32	s1, s15
 800111e:	f002 f943 	bl	80033a8 <cos>
 8001122:	ec59 8b10 	vmov	r8, r9, d0
 8001126:	7cfb      	ldrb	r3, [r7, #19]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9a7 	bl	800047c <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4640      	mov	r0, r8
 8001134:	4649      	mov	r1, r9
 8001136:	f7ff fa0b 	bl	8000550 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff f84f 	bl	80001e4 <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcc1 	bl	8000ad4 <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
		uint8_t Yh = centerY + sin(angleH * 3.14 / 180) * lengthH;
 8001156:	7dbb      	ldrb	r3, [r7, #22]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f98f 	bl	800047c <__aeabi_i2d>
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f989 	bl	800047c <__aeabi_i2d>
 800116a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001228 <app+0x390>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff f9ee 	bl	8000550 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <app+0x3a4>)
 8001182:	f7ff fb0f 	bl	80007a4 <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	ec43 2b17 	vmov	d7, r2, r3
 800118e:	eeb0 0a47 	vmov.f32	s0, s14
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	f002 f95b 	bl	8003450 <sin>
 800119a:	ec59 8b10 	vmov	r8, r9, d0
 800119e:	7cfb      	ldrb	r3, [r7, #19]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f96b 	bl	800047c <__aeabi_i2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4640      	mov	r0, r8
 80011ac:	4649      	mov	r1, r9
 80011ae:	f7ff f9cf 	bl	8000550 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff f813 	bl	80001e4 <__adddf3>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc85 	bl	8000ad4 <__aeabi_d2uiz>
 80011ca:	4603      	mov	r3, r0
 80011cc:	71bb      	strb	r3, [r7, #6]
		//이전 그림 지우기
		ssd1306_Line(centerX, centerY, oldXs, oldYs, 0);
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <app+0x3a8>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <app+0x3ac>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	7db9      	ldrb	r1, [r7, #22]
 80011d8:	7df8      	ldrb	r0, [r7, #23]
 80011da:	2400      	movs	r4, #0
 80011dc:	9400      	str	r4, [sp, #0]
 80011de:	f000 faa7 	bl	8001730 <ssd1306_Line>
		ssd1306_Line(centerX, centerY, oldXm, oldYm, 0);
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <app+0x3b0>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <app+0x3b4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	7db9      	ldrb	r1, [r7, #22]
 80011ec:	7df8      	ldrb	r0, [r7, #23]
 80011ee:	2400      	movs	r4, #0
 80011f0:	9400      	str	r4, [sp, #0]
 80011f2:	f000 fa9d 	bl	8001730 <ssd1306_Line>
		ssd1306_Line(centerX, centerY, oldXh, oldYh, 0);
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <app+0x3b8>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <app+0x3bc>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	7db9      	ldrb	r1, [r7, #22]
 8001200:	7df8      	ldrb	r0, [r7, #23]
 8001202:	2400      	movs	r4, #0
 8001204:	9400      	str	r4, [sp, #0]
 8001206:	f000 fa93 	bl	8001730 <ssd1306_Line>
		//새로 그리기
		ssd1306_Line(centerX, centerY, Xs, Ys, 1);
 800120a:	7abb      	ldrb	r3, [r7, #10]
 800120c:	7afa      	ldrb	r2, [r7, #11]
 800120e:	7db9      	ldrb	r1, [r7, #22]
 8001210:	7df8      	ldrb	r0, [r7, #23]
 8001212:	2401      	movs	r4, #1
 8001214:	9400      	str	r4, [sp, #0]
 8001216:	f000 fa8b 	bl	8001730 <ssd1306_Line>
		ssd1306_Line(centerX, centerY, Xm, Ym, 1);
 800121a:	7a3b      	ldrb	r3, [r7, #8]
 800121c:	7a7a      	ldrb	r2, [r7, #9]
 800121e:	7db9      	ldrb	r1, [r7, #22]
 8001220:	7df8      	ldrb	r0, [r7, #23]
 8001222:	2401      	movs	r4, #1
 8001224:	e018      	b.n	8001258 <app+0x3c0>
 8001226:	bf00      	nop
 8001228:	51eb851f 	.word	0x51eb851f
 800122c:	40091eb8 	.word	0x40091eb8
 8001230:	2000002d 	.word	0x2000002d
 8001234:	2000002c 	.word	0x2000002c
 8001238:	20000000 	.word	0x20000000
 800123c:	40668000 	.word	0x40668000
 8001240:	20000034 	.word	0x20000034
 8001244:	20000035 	.word	0x20000035
 8001248:	20000036 	.word	0x20000036
 800124c:	20000037 	.word	0x20000037
 8001250:	20000038 	.word	0x20000038
 8001254:	20000039 	.word	0x20000039
 8001258:	9400      	str	r4, [sp, #0]
 800125a:	f000 fa69 	bl	8001730 <ssd1306_Line>
		ssd1306_Line(centerX, centerY, Xh, Yh, 1);
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	7db9      	ldrb	r1, [r7, #22]
 8001264:	7df8      	ldrb	r0, [r7, #23]
 8001266:	2401      	movs	r4, #1
 8001268:	9400      	str	r4, [sp, #0]
 800126a:	f000 fa61 	bl	8001730 <ssd1306_Line>
		//좌표 백업
		oldXs = Xs;
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <app+0x410>)
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	7013      	strb	r3, [r2, #0]
		oldYs = Ys;
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <app+0x414>)
 8001276:	7abb      	ldrb	r3, [r7, #10]
 8001278:	7013      	strb	r3, [r2, #0]
		oldXm = Xm;
 800127a:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <app+0x418>)
 800127c:	7a7b      	ldrb	r3, [r7, #9]
 800127e:	7013      	strb	r3, [r2, #0]
		oldYm = Ym;
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <app+0x41c>)
 8001282:	7a3b      	ldrb	r3, [r7, #8]
 8001284:	7013      	strb	r3, [r2, #0]
		oldXh = Xh;
 8001286:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <app+0x420>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	7013      	strb	r3, [r2, #0]
		oldYh = Yh;
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <app+0x424>)
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	7013      	strb	r3, [r2, #0]
		//스크린에 업데이트
		ssd1306_UpdateScreen();
 8001292:	f000 f9d1 	bl	8001638 <ssd1306_UpdateScreen>



		update = 0;
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <app+0x428>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
		while(update==0);
 800129c:	bf00      	nop
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <app+0x428>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0fb      	beq.n	800129e <app+0x406>
	while(1){
 80012a6:	e60f      	b.n	8000ec8 <app+0x30>
 80012a8:	20000034 	.word	0x20000034
 80012ac:	20000035 	.word	0x20000035
 80012b0:	20000036 	.word	0x20000036
 80012b4:	20000037 	.word	0x20000037
 80012b8:	20000038 	.word	0x20000038
 80012bc:	20000039 	.word	0x20000039
 80012c0:	2000002e 	.word	0x2000002e

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f000 fc34 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f808 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 f892 	bl	80013f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d4:	f000 f862 	bl	800139c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app();
 80012d8:	f7ff fdde 	bl	8000e98 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <main+0x18>

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 f82c 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <SystemClock_Config+0xb4>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <SystemClock_Config+0xb4>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <SystemClock_Config+0xb4>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <SystemClock_Config+0xb8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <SystemClock_Config+0xb8>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <SystemClock_Config+0xb8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2310      	movs	r3, #16
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fbb7 	bl	8002ac4 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800135c:	f000 f890 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fe1a 	bl	8002fb4 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001386:	f000 f87b 	bl	8001480 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	@ 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f000 fec5 	bl	8002168 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 f84c 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000003c 	.word	0x2000003c
 80013f0:	40005400 	.word	0x40005400
 80013f4:	00061a80 	.word	0x00061a80

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_GPIO_Init+0x80>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a18      	ldr	r2, [pc, #96]	@ (8001478 <MX_GPIO_Init+0x80>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_GPIO_Init+0x80>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_GPIO_Init+0x80>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <MX_GPIO_Init+0x80>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_GPIO_Init+0x80>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144c:	480b      	ldr	r0, [pc, #44]	@ (800147c <MX_GPIO_Init+0x84>)
 800144e:	f000 fe71 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8001452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_GPIO_Init+0x84>)
 800146c:	f000 fcde 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001496:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <ssd1306_Reset+0x28>)
 8001498:	f000 fe4c 	bl	8002134 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 fbbb 	bl	8001c18 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <ssd1306_Reset+0x28>)
 80014aa:	f000 fe43 	bl	8002134 <HAL_GPIO_WritePin>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020000 	.word	0x40020000

080014b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af04      	add	r7, sp, #16
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	2200      	movs	r2, #0
 80014d4:	2178      	movs	r1, #120	@ 0x78
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <ssd1306_WriteCommand+0x2c>)
 80014d8:	f000 ff8a 	bl	80023f0 <HAL_I2C_Mem_Write>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000003c 	.word	0x2000003c

080014e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	9202      	str	r2, [sp, #8]
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	2240      	movs	r2, #64	@ 0x40
 8001506:	2178      	movs	r1, #120	@ 0x78
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <ssd1306_WriteData+0x30>)
 800150a:	f000 ff71 	bl	80023f0 <HAL_I2C_Mem_Write>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000003c 	.word	0x2000003c

0800151c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001520:	f7ff ffb4 	bl	800148c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001524:	2064      	movs	r0, #100	@ 0x64
 8001526:	f000 fb77 	bl	8001c18 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800152a:	2000      	movs	r0, #0
 800152c:	f000 fa06 	bl	800193c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001530:	2020      	movs	r0, #32
 8001532:	f7ff ffc1 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff ffbe 	bl	80014b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800153c:	20b0      	movs	r0, #176	@ 0xb0
 800153e:	f7ff ffbb 	bl	80014b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001542:	20c8      	movs	r0, #200	@ 0xc8
 8001544:	f7ff ffb8 	bl	80014b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ffb5 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800154e:	2010      	movs	r0, #16
 8001550:	f7ff ffb2 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001554:	2040      	movs	r0, #64	@ 0x40
 8001556:	f7ff ffaf 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800155a:	20ff      	movs	r0, #255	@ 0xff
 800155c:	f000 f9db 	bl	8001916 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001560:	20a1      	movs	r0, #161	@ 0xa1
 8001562:	f7ff ffa9 	bl	80014b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001566:	20a6      	movs	r0, #166	@ 0xa6
 8001568:	f7ff ffa6 	bl	80014b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800156c:	20a8      	movs	r0, #168	@ 0xa8
 800156e:	f7ff ffa3 	bl	80014b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001572:	203f      	movs	r0, #63	@ 0x3f
 8001574:	f7ff ffa0 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001578:	20a4      	movs	r0, #164	@ 0xa4
 800157a:	f7ff ff9d 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800157e:	20d3      	movs	r0, #211	@ 0xd3
 8001580:	f7ff ff9a 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ff97 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800158a:	20d5      	movs	r0, #213	@ 0xd5
 800158c:	f7ff ff94 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001590:	20f0      	movs	r0, #240	@ 0xf0
 8001592:	f7ff ff91 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001596:	20d9      	movs	r0, #217	@ 0xd9
 8001598:	f7ff ff8e 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800159c:	2022      	movs	r0, #34	@ 0x22
 800159e:	f7ff ff8b 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015a2:	20da      	movs	r0, #218	@ 0xda
 80015a4:	f7ff ff88 	bl	80014b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80015a8:	2012      	movs	r0, #18
 80015aa:	f7ff ff85 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015ae:	20db      	movs	r0, #219	@ 0xdb
 80015b0:	f7ff ff82 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015b4:	2020      	movs	r0, #32
 80015b6:	f7ff ff7f 	bl	80014b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015ba:	208d      	movs	r0, #141	@ 0x8d
 80015bc:	f7ff ff7c 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015c0:	2014      	movs	r0, #20
 80015c2:	f7ff ff79 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f9b8 	bl	800193c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 f80f 	bl	80015f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80015d2:	f000 f831 	bl	8001638 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <ssd1306_Init+0xd0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <ssd1306_Init+0xd0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80015e2:	4b02      	ldr	r3, [pc, #8]	@ (80015ec <ssd1306_Init+0xd0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	711a      	strb	r2, [r3, #4]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000490 	.word	0x20000490

080015f0 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e00d      	b.n	800161c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <ssd1306_Fill+0x1a>
 8001606:	2100      	movs	r1, #0
 8001608:	e000      	b.n	800160c <ssd1306_Fill+0x1c>
 800160a:	21ff      	movs	r1, #255	@ 0xff
 800160c:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <ssd1306_Fill+0x44>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	460a      	mov	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001622:	d3ed      	bcc.n	8001600 <ssd1306_Fill+0x10>
    }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000090 	.word	0x20000090

08001638 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e016      	b.n	8001672 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	3b50      	subs	r3, #80	@ 0x50
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff34 	bl	80014b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 8001650:	2002      	movs	r0, #2
 8001652:	f7ff ff31 	bl	80014b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001656:	2010      	movs	r0, #16
 8001658:	f7ff ff2e 	bl	80014b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <ssd1306_UpdateScreen+0x4c>)
 8001662:	4413      	add	r3, r2
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff3e 	bl	80014e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3301      	adds	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b07      	cmp	r3, #7
 8001676:	d9e5      	bls.n	8001644 <ssd1306_UpdateScreen+0xc>
    }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000090 	.word	0x20000090

08001688 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	460b      	mov	r3, r1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	4613      	mov	r3, r2
 8001698:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db3d      	blt.n	800171e <ssd1306_DrawPixel+0x96>
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016a6:	d83a      	bhi.n	800171e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11a      	bne.n	80016e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	01db      	lsls	r3, r3, #7
 80016ba:	4413      	add	r3, r2
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <ssd1306_DrawPixel+0xa4>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	b25a      	sxtb	r2, r3
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b259      	sxtb	r1, r3
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	4603      	mov	r3, r0
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	4413      	add	r3, r2
 80016dc:	b2c9      	uxtb	r1, r1
 80016de:	4a13      	ldr	r2, [pc, #76]	@ (800172c <ssd1306_DrawPixel+0xa4>)
 80016e0:	54d1      	strb	r1, [r2, r3]
 80016e2:	e01d      	b.n	8001720 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	b2d8      	uxtb	r0, r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	4413      	add	r3, r2
 80016f2:	4a0e      	ldr	r2, [pc, #56]	@ (800172c <ssd1306_DrawPixel+0xa4>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	b259      	sxtb	r1, r3
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <ssd1306_DrawPixel+0xa4>)
 800171a:	54d1      	strb	r1, [r2, r3]
 800171c:	e000      	b.n	8001720 <ssd1306_DrawPixel+0x98>
        return;
 800171e:	bf00      	nop
    }
}
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000090 	.word	0x20000090

08001730 <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	4603      	mov	r3, r0
 8001744:	71bb      	strb	r3, [r7, #6]
 8001746:	460b      	mov	r3, r1
 8001748:	717b      	strb	r3, [r7, #5]
 800174a:	4613      	mov	r3, r2
 800174c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800174e:	797a      	ldrb	r2, [r7, #5]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bfb8      	it	lt
 8001758:	425b      	neglt	r3, r3
 800175a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800175c:	793a      	ldrb	r2, [r7, #4]
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	bfb8      	it	lt
 8001766:	425b      	neglt	r3, r3
 8001768:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	797b      	ldrb	r3, [r7, #5]
 800176e:	429a      	cmp	r2, r3
 8001770:	d201      	bcs.n	8001776 <ssd1306_Line+0x46>
 8001772:	2301      	movs	r3, #1
 8001774:	e001      	b.n	800177a <ssd1306_Line+0x4a>
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800177c:	79ba      	ldrb	r2, [r7, #6]
 800177e:	793b      	ldrb	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	d201      	bcs.n	8001788 <ssd1306_Line+0x58>
 8001784:	2301      	movs	r3, #1
 8001786:	e001      	b.n	800178c <ssd1306_Line+0x5c>
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001796:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800179a:	7939      	ldrb	r1, [r7, #4]
 800179c:	797b      	ldrb	r3, [r7, #5]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff72 	bl	8001688 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80017a4:	e024      	b.n	80017f0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80017a6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80017aa:	79b9      	ldrb	r1, [r7, #6]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff6a 	bl	8001688 <ssd1306_DrawPixel>
    error2 = error * 2;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	425b      	negs	r3, r3
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dd08      	ble.n	80017d6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4413      	add	r3, r2
 80017d4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	429a      	cmp	r2, r3
 80017dc:	da08      	bge.n	80017f0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4413      	add	r3, r2
 80017e4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	4413      	add	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	797b      	ldrb	r3, [r7, #5]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1d6      	bne.n	80017a6 <ssd1306_Line+0x76>
 80017f8:	79ba      	ldrb	r2, [r7, #6]
 80017fa:	793b      	ldrb	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1d2      	bne.n	80017a6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001800:	bf00      	nop
}
 8001802:	3724      	adds	r7, #36	@ 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	4603      	mov	r3, r0
 800181c:	71bb      	strb	r3, [r7, #6]
 800181e:	460b      	mov	r3, r1
 8001820:	717b      	strb	r3, [r7, #5]
 8001822:	4613      	mov	r3, r2
 8001824:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	425b      	negs	r3, r3
 800182a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	f1c3 0301 	rsb	r3, r3, #1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db65      	blt.n	800190e <ssd1306_DrawCircle+0x106>
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	2b3f      	cmp	r3, #63	@ 0x3f
 8001846:	d862      	bhi.n	800190e <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4413      	add	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	793a      	ldrb	r2, [r7, #4]
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff ff12 	bl	8001688 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4413      	add	r3, r2
 800186c:	b2d8      	uxtb	r0, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	793a      	ldrb	r2, [r7, #4]
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff ff04 	bl	8001688 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4413      	add	r3, r2
 8001888:	b2d8      	uxtb	r0, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	79ba      	ldrb	r2, [r7, #6]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	793a      	ldrb	r2, [r7, #4]
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff fef6 	bl	8001688 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	79ba      	ldrb	r2, [r7, #6]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	793a      	ldrb	r2, [r7, #4]
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff fee8 	bl	8001688 <ssd1306_DrawPixel>
        e2 = err;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dc13      	bgt.n	80018ec <ssd1306_DrawCircle+0xe4>
            y++;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3301      	adds	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	3301      	adds	r3, #1
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	425b      	negs	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d105      	bne.n	80018ec <ssd1306_DrawCircle+0xe4>
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dc01      	bgt.n	80018ec <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dd08      	ble.n	8001906 <ssd1306_DrawCircle+0xfe>
          x++;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	3301      	adds	r3, #1
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd9d      	ble.n	8001848 <ssd1306_DrawCircle+0x40>

    return;
 800190c:	e000      	b.n	8001910 <ssd1306_DrawCircle+0x108>
    return;
 800190e:	bf00      	nop
}
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001920:	2381      	movs	r3, #129	@ 0x81
 8001922:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fdc6 	bl	80014b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fdc2 	bl	80014b8 <ssd1306_WriteCommand>
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800194c:	23af      	movs	r3, #175	@ 0xaf
 800194e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <ssd1306_SetDisplayOn+0x38>)
 8001952:	2201      	movs	r2, #1
 8001954:	715a      	strb	r2, [r3, #5]
 8001956:	e004      	b.n	8001962 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001958:	23ae      	movs	r3, #174	@ 0xae
 800195a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <ssd1306_SetDisplayOn+0x38>)
 800195e:	2200      	movs	r2, #0
 8001960:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fda7 	bl	80014b8 <ssd1306_WriteCommand>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000490 	.word	0x20000490

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <HAL_I2C_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12b      	bne.n	8001a42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a06:	23c0      	movs	r3, #192	@ 0xc0
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <HAL_I2C_MspInit+0x8c>)
 8001a22:	f000 fa03 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickCallback();
 8001aae:	f7ff f9a9 	bl	8000e04 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f000 f891 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <SystemInit+0x20>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <SystemInit+0x20>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae4:	f7ff ffea 	bl	8001abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f001 fc25 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fbd7 	bl	80012c4 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b24:	080046c8 	.word	0x080046c8
  ldr r2, =_sbss
 8001b28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b2c:	2000049c 	.word	0x2000049c

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f931 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff ff06 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f93b 	bl	8001e12 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f911 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000498 	.word	0x20000498

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000498 	.word	0x20000498

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff47 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff5c 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffb0 	bl	8001d80 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e159      	b.n	80020fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8148 	bne.w	80020f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a2 	beq.w	80020f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b54      	ldr	r3, [pc, #336]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a52      	ldr	r2, [pc, #328]	@ (8002118 <HAL_GPIO_Init+0x2ec>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	@ (800211c <HAL_GPIO_Init+0x2f0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x202>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	@ (8002120 <HAL_GPIO_Init+0x2f4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x1fe>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <HAL_GPIO_Init+0x2f8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x1fa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a46      	ldr	r2, [pc, #280]	@ (8002128 <HAL_GPIO_Init+0x2fc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x1f6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a45      	ldr	r2, [pc, #276]	@ (800212c <HAL_GPIO_Init+0x300>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x1f2>
 800201a:	2304      	movs	r3, #4
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800201e:	2307      	movs	r3, #7
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	@ (8002118 <HAL_GPIO_Init+0x2ec>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b38      	ldr	r3, [pc, #224]	@ (8002130 <HAL_GPIO_Init+0x304>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a2f      	ldr	r2, [pc, #188]	@ (8002130 <HAL_GPIO_Init+0x304>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_GPIO_Init+0x304>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <HAL_GPIO_Init+0x304>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f aea2 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e12b      	b.n	80023d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fc1a 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021cc:	f001 f8aa 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a81      	ldr	r2, [pc, #516]	@ (80023dc <HAL_I2C_Init+0x274>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d807      	bhi.n	80021ec <HAL_I2C_Init+0x84>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a80      	ldr	r2, [pc, #512]	@ (80023e0 <HAL_I2C_Init+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf94      	ite	ls
 80021e4:	2301      	movls	r3, #1
 80021e6:	2300      	movhi	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e006      	b.n	80021fa <HAL_I2C_Init+0x92>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a7d      	ldr	r2, [pc, #500]	@ (80023e4 <HAL_I2C_Init+0x27c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0e7      	b.n	80023d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a78      	ldr	r2, [pc, #480]	@ (80023e8 <HAL_I2C_Init+0x280>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9b      	lsrs	r3, r3, #18
 800220c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a6a      	ldr	r2, [pc, #424]	@ (80023dc <HAL_I2C_Init+0x274>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d802      	bhi.n	800223c <HAL_I2C_Init+0xd4>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3301      	adds	r3, #1
 800223a:	e009      	b.n	8002250 <HAL_I2C_Init+0xe8>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a69      	ldr	r2, [pc, #420]	@ (80023ec <HAL_I2C_Init+0x284>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	430b      	orrs	r3, r1
 8002256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002262:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	495c      	ldr	r1, [pc, #368]	@ (80023dc <HAL_I2C_Init+0x274>)
 800226c:	428b      	cmp	r3, r1
 800226e:	d819      	bhi.n	80022a4 <HAL_I2C_Init+0x13c>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e59      	subs	r1, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fbb1 f3f3 	udiv	r3, r1, r3
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002284:	400b      	ands	r3, r1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_I2C_Init+0x138>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e59      	subs	r1, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fbb1 f3f3 	udiv	r3, r1, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229e:	e051      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e04f      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <HAL_I2C_Init+0x168>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e012      	b.n	80022f6 <HAL_I2C_Init+0x18e>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	0099      	lsls	r1, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x196>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e022      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_I2C_Init+0x1bc>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e58      	subs	r0, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	fbb0 f3f3 	udiv	r3, r0, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6809      	ldr	r1, [r1, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002372:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6911      	ldr	r1, [r2, #16]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	000186a0 	.word	0x000186a0
 80023e0:	001e847f 	.word	0x001e847f
 80023e4:	003d08ff 	.word	0x003d08ff
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	817b      	strh	r3, [r7, #10]
 8002402:	460b      	mov	r3, r1
 8002404:	813b      	strh	r3, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800240a:	f7ff fbf9 	bl	8001c00 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	f040 80d9 	bne.w	80025d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2319      	movs	r3, #25
 8002424:	2201      	movs	r2, #1
 8002426:	496d      	ldr	r1, [pc, #436]	@ (80025dc <HAL_I2C_Mem_Write+0x1ec>)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f971 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Mem_Write+0x56>
 8002442:	2302      	movs	r3, #2
 8002444:	e0c5      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d007      	beq.n	800246c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2221      	movs	r2, #33	@ 0x21
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800249c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_I2C_Mem_Write+0x1f0>)
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ae:	88f8      	ldrh	r0, [r7, #6]
 80024b0:	893a      	ldrh	r2, [r7, #8]
 80024b2:	8979      	ldrh	r1, [r7, #10]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4603      	mov	r3, r0
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f890 	bl	80025e4 <I2C_RequestMemoryWrite>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d052      	beq.n	8002570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e081      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa36 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Mem_Write+0x180>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1aa      	bne.n	80024ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa29 	bl	80029d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e016      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2200      	movs	r2, #0
 8002616:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f878 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002634:	d103      	bne.n	800263e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e05f      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	492d      	ldr	r1, [pc, #180]	@ (800270c <I2C_RequestMemoryWrite+0x128>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f8d3 	bl	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e04c      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f95e 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e02b      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e021      	b.n	8002700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f938 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e005      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002720:	e048      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d044      	beq.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7ff fa69 	bl	8001c00 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d139      	bne.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10d      	bne.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	43da      	mvns	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4013      	ands	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	e00c      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	429a      	cmp	r2, r3
 8002784:	d116      	bne.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e023      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d10d      	bne.n	80027da <I2C_WaitOnFlagUntilTimeout+0xca>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	43da      	mvns	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	e00c      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	43da      	mvns	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4013      	ands	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d093      	beq.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002812:	e071      	b.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002822:	d123      	bne.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800283c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e067      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d041      	beq.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002874:	f7ff f9c4 	bl	8001c00 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d136      	bne.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e00b      	b.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e021      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10c      	bne.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	43da      	mvns	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e00b      	b.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f af6d 	bne.w	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002950:	e034      	b.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f886 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e034      	b.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d028      	beq.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7ff f949 	bl	8001c00 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11d      	bne.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b80      	cmp	r3, #128	@ 0x80
 800298c:	d016      	beq.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b80      	cmp	r3, #128	@ 0x80
 80029c8:	d1c3      	bne.n	8002952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e0:	e034      	b.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f83e 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e034      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d028      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff f901 	bl	8001c00 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11d      	bne.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d016      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1c3      	bne.n	80029e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d11b      	bne.n	8002ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e267      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d075      	beq.n	8002bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ae2:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b85      	ldr	r3, [pc, #532]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d112      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afa:	4b82      	ldr	r3, [pc, #520]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b06:	d10b      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	4b7e      	ldr	r3, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d05b      	beq.n	8002bcc <HAL_RCC_OscConfig+0x108>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d157      	bne.n	8002bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e242      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x74>
 8002b2a:	4b76      	ldr	r3, [pc, #472]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e01d      	b.n	8002b74 <HAL_RCC_OscConfig+0xb0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x98>
 8002b42:	4b70      	ldr	r3, [pc, #448]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6f      	ldr	r2, [pc, #444]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6c      	ldr	r2, [pc, #432]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0xb0>
 8002b5c:	4b69      	ldr	r3, [pc, #420]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a68      	ldr	r2, [pc, #416]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b66      	ldr	r3, [pc, #408]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a65      	ldr	r2, [pc, #404]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f840 	bl	8001c00 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff f83c 	bl	8001c00 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e207      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b5b      	ldr	r3, [pc, #364]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0xc0>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f82c 	bl	8001c00 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff f828 	bl	8001c00 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1f3      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b51      	ldr	r3, [pc, #324]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0xe8>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bda:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b47      	ldr	r3, [pc, #284]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf2:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b41      	ldr	r3, [pc, #260]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x152>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e1c7      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4937      	ldr	r1, [pc, #220]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e03a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCC_OscConfig+0x244>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe ffe1 	bl	8001c00 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe ffdd 	bl	8001c00 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1a8      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4925      	ldr	r1, [pc, #148]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCC_OscConfig+0x244>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe ffc0 	bl	8001c00 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe ffbc 	bl	8001c00 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e187      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d036      	beq.n	8002d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x248>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe ffa0 	bl	8001c00 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe ff9c 	bl	8001c00 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e167      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x200>
 8002ce2:	e01b      	b.n	8002d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_RCC_OscConfig+0x248>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe ff89 	bl	8001c00 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	e00e      	b.n	8002d10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe ff85 	bl	8001c00 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d907      	bls.n	8002d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e150      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470000 	.word	0x42470000
 8002d0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	4b88      	ldr	r3, [pc, #544]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ea      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8097 	beq.w	8002e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b81      	ldr	r3, [pc, #516]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	4a7c      	ldr	r2, [pc, #496]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b77      	ldr	r3, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d66:	4b74      	ldr	r3, [pc, #464]	@ (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a73      	ldr	r2, [pc, #460]	@ (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fe ff45 	bl	8001c00 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe ff41 	bl	8001c00 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e10c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x2ea>
 8002da0:	4b64      	ldr	r3, [pc, #400]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a63      	ldr	r2, [pc, #396]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dac:	e01c      	b.n	8002de8 <HAL_RCC_OscConfig+0x324>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x30c>
 8002db6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	4a5e      	ldr	r2, [pc, #376]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0x324>
 8002dd0:	4b58      	ldr	r3, [pc, #352]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd4:	4a57      	ldr	r2, [pc, #348]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ddc:	4b55      	ldr	r3, [pc, #340]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de0:	4a54      	ldr	r2, [pc, #336]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002de2:	f023 0304 	bic.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe ff06 	bl	8001c00 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe ff02 	bl	8001c00 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0cb      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ee      	beq.n	8002df8 <HAL_RCC_OscConfig+0x334>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fef0 	bl	8001c00 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe feec 	bl	8001c00 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0b5      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ee      	bne.n	8002e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b39      	ldr	r3, [pc, #228]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	4a38      	ldr	r2, [pc, #224]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a1 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e62:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d05c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d141      	bne.n	8002efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fec0 	bl	8001c00 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe febc 	bl	8001c00 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e087      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	491b      	ldr	r1, [pc, #108]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fe95 	bl	8001c00 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fe91 	bl	8001c00 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e05c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x416>
 8002ef8:	e054      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fe7e 	bl	8001c00 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fe7a 	bl	8001c00 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e045      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x444>
 8002f26:	e03d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e038      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d121      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d11a      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0cc      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d90c      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b63      	ldr	r3, [pc, #396]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b8      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b59      	ldr	r3, [pc, #356]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a58      	ldr	r2, [pc, #352]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b53      	ldr	r3, [pc, #332]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a52      	ldr	r2, [pc, #328]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800302a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b50      	ldr	r3, [pc, #320]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494d      	ldr	r1, [pc, #308]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d044      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b47      	ldr	r3, [pc, #284]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b3f      	ldr	r3, [pc, #252]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e067      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b37      	ldr	r3, [pc, #220]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4934      	ldr	r1, [pc, #208]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fdac 	bl	8001c00 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fda8 	bl	8001c00 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e04f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20c      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b20      	ldr	r3, [pc, #128]	@ (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e032      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4916      	ldr	r1, [pc, #88]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003126:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490e      	ldr	r1, [pc, #56]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f821 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	490a      	ldr	r1, [pc, #40]	@ (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	@ (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fd0c 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00
 8003170:	40023800 	.word	0x40023800
 8003174:	080044c8 	.word	0x080044c8
 8003178:	20000004 	.word	0x20000004
 800317c:	20000008 	.word	0x20000008

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b090      	sub	sp, #64	@ 0x40
 8003186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003198:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d00d      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x40>
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	f200 80a1 	bhi.w	80032ec <HAL_RCC_GetSysClockFreq+0x16c>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x3a>
 80031b2:	e09b      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x184>)
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031b8:	e09b      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ba:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x188>)
 80031bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031be:	e098      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d028      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	2200      	movs	r2, #0
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031e8:	2100      	movs	r1, #0
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ec:	fb03 f201 	mul.w	r2, r3, r1
 80031f0:	2300      	movs	r3, #0
 80031f2:	fb00 f303 	mul.w	r3, r0, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	4a43      	ldr	r2, [pc, #268]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x188>)
 80031fa:	fba0 1202 	umull	r1, r2, r0, r2
 80031fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003200:	460a      	mov	r2, r1
 8003202:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003206:	4413      	add	r3, r2
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320c:	2200      	movs	r2, #0
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	61fa      	str	r2, [r7, #28]
 8003212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800321a:	f7fd fc7b 	bl	8000b14 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4613      	mov	r3, r2
 8003224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003226:	e053      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	4b35      	ldr	r3, [pc, #212]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	2200      	movs	r2, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	617a      	str	r2, [r7, #20]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800323a:	f04f 0b00 	mov.w	fp, #0
 800323e:	4652      	mov	r2, sl
 8003240:	465b      	mov	r3, fp
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	ebb2 080a 	subs.w	r8, r2, sl
 800325a:	eb63 090b 	sbc.w	r9, r3, fp
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800326a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800326e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003272:	ebb2 0408 	subs.w	r4, r2, r8
 8003276:	eb63 0509 	sbc.w	r5, r3, r9
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	00eb      	lsls	r3, r5, #3
 8003284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003288:	00e2      	lsls	r2, r4, #3
 800328a:	4614      	mov	r4, r2
 800328c:	461d      	mov	r5, r3
 800328e:	eb14 030a 	adds.w	r3, r4, sl
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	eb45 030b 	adc.w	r3, r5, fp
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a6:	4629      	mov	r1, r5
 80032a8:	028b      	lsls	r3, r1, #10
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b0:	4621      	mov	r1, r4
 80032b2:	028a      	lsls	r2, r1, #10
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	2200      	movs	r2, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c4:	f7fd fc26 	bl	8000b14 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3740      	adds	r7, #64	@ 0x40
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400
 8003308:	017d7840 	.word	0x017d7840

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	080044d8 	.word	0x080044d8

0800334c <memset>:
 800334c:	4402      	add	r2, r0
 800334e:	4603      	mov	r3, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4d0d      	ldr	r5, [pc, #52]	@ (8003394 <__libc_init_array+0x38>)
 8003360:	4c0d      	ldr	r4, [pc, #52]	@ (8003398 <__libc_init_array+0x3c>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	2600      	movs	r6, #0
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	4d0b      	ldr	r5, [pc, #44]	@ (800339c <__libc_init_array+0x40>)
 800336e:	4c0c      	ldr	r4, [pc, #48]	@ (80033a0 <__libc_init_array+0x44>)
 8003370:	f001 f89e 	bl	80044b0 <_init>
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	2600      	movs	r6, #0
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f855 3b04 	ldr.w	r3, [r5], #4
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f855 3b04 	ldr.w	r3, [r5], #4
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	080046c0 	.word	0x080046c0
 8003398:	080046c0 	.word	0x080046c0
 800339c:	080046c0 	.word	0x080046c0
 80033a0:	080046c4 	.word	0x080046c4
 80033a4:	00000000 	.word	0x00000000

080033a8 <cos>:
 80033a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033aa:	ec53 2b10 	vmov	r2, r3, d0
 80033ae:	4826      	ldr	r0, [pc, #152]	@ (8003448 <cos+0xa0>)
 80033b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80033b4:	4281      	cmp	r1, r0
 80033b6:	d806      	bhi.n	80033c6 <cos+0x1e>
 80033b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003440 <cos+0x98>
 80033bc:	b005      	add	sp, #20
 80033be:	f85d eb04 	ldr.w	lr, [sp], #4
 80033c2:	f000 b899 	b.w	80034f8 <__kernel_cos>
 80033c6:	4821      	ldr	r0, [pc, #132]	@ (800344c <cos+0xa4>)
 80033c8:	4281      	cmp	r1, r0
 80033ca:	d908      	bls.n	80033de <cos+0x36>
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fc ff06 	bl	80001e0 <__aeabi_dsub>
 80033d4:	ec41 0b10 	vmov	d0, r0, r1
 80033d8:	b005      	add	sp, #20
 80033da:	f85d fb04 	ldr.w	pc, [sp], #4
 80033de:	4668      	mov	r0, sp
 80033e0:	f000 fa0e 	bl	8003800 <__ieee754_rem_pio2>
 80033e4:	f000 0003 	and.w	r0, r0, #3
 80033e8:	2801      	cmp	r0, #1
 80033ea:	d00b      	beq.n	8003404 <cos+0x5c>
 80033ec:	2802      	cmp	r0, #2
 80033ee:	d015      	beq.n	800341c <cos+0x74>
 80033f0:	b9d8      	cbnz	r0, 800342a <cos+0x82>
 80033f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033f6:	ed9d 0b00 	vldr	d0, [sp]
 80033fa:	f000 f87d 	bl	80034f8 <__kernel_cos>
 80033fe:	ec51 0b10 	vmov	r0, r1, d0
 8003402:	e7e7      	b.n	80033d4 <cos+0x2c>
 8003404:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003408:	ed9d 0b00 	vldr	d0, [sp]
 800340c:	f000 f93c 	bl	8003688 <__kernel_sin>
 8003410:	ec53 2b10 	vmov	r2, r3, d0
 8003414:	4610      	mov	r0, r2
 8003416:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800341a:	e7db      	b.n	80033d4 <cos+0x2c>
 800341c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003420:	ed9d 0b00 	vldr	d0, [sp]
 8003424:	f000 f868 	bl	80034f8 <__kernel_cos>
 8003428:	e7f2      	b.n	8003410 <cos+0x68>
 800342a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800342e:	ed9d 0b00 	vldr	d0, [sp]
 8003432:	2001      	movs	r0, #1
 8003434:	f000 f928 	bl	8003688 <__kernel_sin>
 8003438:	e7e1      	b.n	80033fe <cos+0x56>
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w
	...
 8003448:	3fe921fb 	.word	0x3fe921fb
 800344c:	7fefffff 	.word	0x7fefffff

08003450 <sin>:
 8003450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003452:	ec53 2b10 	vmov	r2, r3, d0
 8003456:	4826      	ldr	r0, [pc, #152]	@ (80034f0 <sin+0xa0>)
 8003458:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800345c:	4281      	cmp	r1, r0
 800345e:	d807      	bhi.n	8003470 <sin+0x20>
 8003460:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80034e8 <sin+0x98>
 8003464:	2000      	movs	r0, #0
 8003466:	b005      	add	sp, #20
 8003468:	f85d eb04 	ldr.w	lr, [sp], #4
 800346c:	f000 b90c 	b.w	8003688 <__kernel_sin>
 8003470:	4820      	ldr	r0, [pc, #128]	@ (80034f4 <sin+0xa4>)
 8003472:	4281      	cmp	r1, r0
 8003474:	d908      	bls.n	8003488 <sin+0x38>
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fc feb1 	bl	80001e0 <__aeabi_dsub>
 800347e:	ec41 0b10 	vmov	d0, r0, r1
 8003482:	b005      	add	sp, #20
 8003484:	f85d fb04 	ldr.w	pc, [sp], #4
 8003488:	4668      	mov	r0, sp
 800348a:	f000 f9b9 	bl	8003800 <__ieee754_rem_pio2>
 800348e:	f000 0003 	and.w	r0, r0, #3
 8003492:	2801      	cmp	r0, #1
 8003494:	d00c      	beq.n	80034b0 <sin+0x60>
 8003496:	2802      	cmp	r0, #2
 8003498:	d011      	beq.n	80034be <sin+0x6e>
 800349a:	b9e8      	cbnz	r0, 80034d8 <sin+0x88>
 800349c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034a0:	ed9d 0b00 	vldr	d0, [sp]
 80034a4:	2001      	movs	r0, #1
 80034a6:	f000 f8ef 	bl	8003688 <__kernel_sin>
 80034aa:	ec51 0b10 	vmov	r0, r1, d0
 80034ae:	e7e6      	b.n	800347e <sin+0x2e>
 80034b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034b4:	ed9d 0b00 	vldr	d0, [sp]
 80034b8:	f000 f81e 	bl	80034f8 <__kernel_cos>
 80034bc:	e7f5      	b.n	80034aa <sin+0x5a>
 80034be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034c2:	ed9d 0b00 	vldr	d0, [sp]
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 f8de 	bl	8003688 <__kernel_sin>
 80034cc:	ec53 2b10 	vmov	r2, r3, d0
 80034d0:	4610      	mov	r0, r2
 80034d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80034d6:	e7d2      	b.n	800347e <sin+0x2e>
 80034d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034dc:	ed9d 0b00 	vldr	d0, [sp]
 80034e0:	f000 f80a 	bl	80034f8 <__kernel_cos>
 80034e4:	e7f2      	b.n	80034cc <sin+0x7c>
 80034e6:	bf00      	nop
	...
 80034f0:	3fe921fb 	.word	0x3fe921fb
 80034f4:	7fefffff 	.word	0x7fefffff

080034f8 <__kernel_cos>:
 80034f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	ec57 6b10 	vmov	r6, r7, d0
 8003500:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003504:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003508:	ed8d 1b00 	vstr	d1, [sp]
 800350c:	d206      	bcs.n	800351c <__kernel_cos+0x24>
 800350e:	4630      	mov	r0, r6
 8003510:	4639      	mov	r1, r7
 8003512:	f7fd fab7 	bl	8000a84 <__aeabi_d2iz>
 8003516:	2800      	cmp	r0, #0
 8003518:	f000 8088 	beq.w	800362c <__kernel_cos+0x134>
 800351c:	4632      	mov	r2, r6
 800351e:	463b      	mov	r3, r7
 8003520:	4630      	mov	r0, r6
 8003522:	4639      	mov	r1, r7
 8003524:	f7fd f814 	bl	8000550 <__aeabi_dmul>
 8003528:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <__kernel_cos+0x178>)
 800352a:	2200      	movs	r2, #0
 800352c:	4604      	mov	r4, r0
 800352e:	460d      	mov	r5, r1
 8003530:	f7fd f80e 	bl	8000550 <__aeabi_dmul>
 8003534:	a340      	add	r3, pc, #256	@ (adr r3, 8003638 <__kernel_cos+0x140>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	4682      	mov	sl, r0
 800353c:	468b      	mov	fp, r1
 800353e:	4620      	mov	r0, r4
 8003540:	4629      	mov	r1, r5
 8003542:	f7fd f805 	bl	8000550 <__aeabi_dmul>
 8003546:	a33e      	add	r3, pc, #248	@ (adr r3, 8003640 <__kernel_cos+0x148>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fc fe4a 	bl	80001e4 <__adddf3>
 8003550:	4622      	mov	r2, r4
 8003552:	462b      	mov	r3, r5
 8003554:	f7fc fffc 	bl	8000550 <__aeabi_dmul>
 8003558:	a33b      	add	r3, pc, #236	@ (adr r3, 8003648 <__kernel_cos+0x150>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f7fc fe3f 	bl	80001e0 <__aeabi_dsub>
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f7fc fff3 	bl	8000550 <__aeabi_dmul>
 800356a:	a339      	add	r3, pc, #228	@ (adr r3, 8003650 <__kernel_cos+0x158>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fc fe38 	bl	80001e4 <__adddf3>
 8003574:	4622      	mov	r2, r4
 8003576:	462b      	mov	r3, r5
 8003578:	f7fc ffea 	bl	8000550 <__aeabi_dmul>
 800357c:	a336      	add	r3, pc, #216	@ (adr r3, 8003658 <__kernel_cos+0x160>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fc fe2d 	bl	80001e0 <__aeabi_dsub>
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	f7fc ffe1 	bl	8000550 <__aeabi_dmul>
 800358e:	a334      	add	r3, pc, #208	@ (adr r3, 8003660 <__kernel_cos+0x168>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fc fe26 	bl	80001e4 <__adddf3>
 8003598:	4622      	mov	r2, r4
 800359a:	462b      	mov	r3, r5
 800359c:	f7fc ffd8 	bl	8000550 <__aeabi_dmul>
 80035a0:	4622      	mov	r2, r4
 80035a2:	462b      	mov	r3, r5
 80035a4:	f7fc ffd4 	bl	8000550 <__aeabi_dmul>
 80035a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035ac:	4604      	mov	r4, r0
 80035ae:	460d      	mov	r5, r1
 80035b0:	4630      	mov	r0, r6
 80035b2:	4639      	mov	r1, r7
 80035b4:	f7fc ffcc 	bl	8000550 <__aeabi_dmul>
 80035b8:	460b      	mov	r3, r1
 80035ba:	4602      	mov	r2, r0
 80035bc:	4629      	mov	r1, r5
 80035be:	4620      	mov	r0, r4
 80035c0:	f7fc fe0e 	bl	80001e0 <__aeabi_dsub>
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <__kernel_cos+0x17c>)
 80035c6:	4598      	cmp	r8, r3
 80035c8:	4606      	mov	r6, r0
 80035ca:	460f      	mov	r7, r1
 80035cc:	d810      	bhi.n	80035f0 <__kernel_cos+0xf8>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4650      	mov	r0, sl
 80035d4:	4659      	mov	r1, fp
 80035d6:	f7fc fe03 	bl	80001e0 <__aeabi_dsub>
 80035da:	460b      	mov	r3, r1
 80035dc:	4926      	ldr	r1, [pc, #152]	@ (8003678 <__kernel_cos+0x180>)
 80035de:	4602      	mov	r2, r0
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fc fdfd 	bl	80001e0 <__aeabi_dsub>
 80035e6:	ec41 0b10 	vmov	d0, r0, r1
 80035ea:	b003      	add	sp, #12
 80035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f0:	4b22      	ldr	r3, [pc, #136]	@ (800367c <__kernel_cos+0x184>)
 80035f2:	4921      	ldr	r1, [pc, #132]	@ (8003678 <__kernel_cos+0x180>)
 80035f4:	4598      	cmp	r8, r3
 80035f6:	bf8c      	ite	hi
 80035f8:	4d21      	ldrhi	r5, [pc, #132]	@ (8003680 <__kernel_cos+0x188>)
 80035fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80035fe:	2400      	movs	r4, #0
 8003600:	4622      	mov	r2, r4
 8003602:	462b      	mov	r3, r5
 8003604:	2000      	movs	r0, #0
 8003606:	f7fc fdeb 	bl	80001e0 <__aeabi_dsub>
 800360a:	4622      	mov	r2, r4
 800360c:	4680      	mov	r8, r0
 800360e:	4689      	mov	r9, r1
 8003610:	462b      	mov	r3, r5
 8003612:	4650      	mov	r0, sl
 8003614:	4659      	mov	r1, fp
 8003616:	f7fc fde3 	bl	80001e0 <__aeabi_dsub>
 800361a:	4632      	mov	r2, r6
 800361c:	463b      	mov	r3, r7
 800361e:	f7fc fddf 	bl	80001e0 <__aeabi_dsub>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4640      	mov	r0, r8
 8003628:	4649      	mov	r1, r9
 800362a:	e7da      	b.n	80035e2 <__kernel_cos+0xea>
 800362c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003668 <__kernel_cos+0x170>
 8003630:	e7db      	b.n	80035ea <__kernel_cos+0xf2>
 8003632:	bf00      	nop
 8003634:	f3af 8000 	nop.w
 8003638:	be8838d4 	.word	0xbe8838d4
 800363c:	bda8fae9 	.word	0xbda8fae9
 8003640:	bdb4b1c4 	.word	0xbdb4b1c4
 8003644:	3e21ee9e 	.word	0x3e21ee9e
 8003648:	809c52ad 	.word	0x809c52ad
 800364c:	3e927e4f 	.word	0x3e927e4f
 8003650:	19cb1590 	.word	0x19cb1590
 8003654:	3efa01a0 	.word	0x3efa01a0
 8003658:	16c15177 	.word	0x16c15177
 800365c:	3f56c16c 	.word	0x3f56c16c
 8003660:	5555554c 	.word	0x5555554c
 8003664:	3fa55555 	.word	0x3fa55555
 8003668:	00000000 	.word	0x00000000
 800366c:	3ff00000 	.word	0x3ff00000
 8003670:	3fe00000 	.word	0x3fe00000
 8003674:	3fd33332 	.word	0x3fd33332
 8003678:	3ff00000 	.word	0x3ff00000
 800367c:	3fe90000 	.word	0x3fe90000
 8003680:	3fd20000 	.word	0x3fd20000
 8003684:	00000000 	.word	0x00000000

08003688 <__kernel_sin>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	ec55 4b10 	vmov	r4, r5, d0
 8003690:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003694:	b085      	sub	sp, #20
 8003696:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800369a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800369e:	4680      	mov	r8, r0
 80036a0:	d205      	bcs.n	80036ae <__kernel_sin+0x26>
 80036a2:	4620      	mov	r0, r4
 80036a4:	4629      	mov	r1, r5
 80036a6:	f7fd f9ed 	bl	8000a84 <__aeabi_d2iz>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d052      	beq.n	8003754 <__kernel_sin+0xcc>
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fc ff4b 	bl	8000550 <__aeabi_dmul>
 80036ba:	4682      	mov	sl, r0
 80036bc:	468b      	mov	fp, r1
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc ff43 	bl	8000550 <__aeabi_dmul>
 80036ca:	a342      	add	r3, pc, #264	@ (adr r3, 80037d4 <__kernel_sin+0x14c>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	e9cd 0100 	strd	r0, r1, [sp]
 80036d4:	4650      	mov	r0, sl
 80036d6:	4659      	mov	r1, fp
 80036d8:	f7fc ff3a 	bl	8000550 <__aeabi_dmul>
 80036dc:	a33f      	add	r3, pc, #252	@ (adr r3, 80037dc <__kernel_sin+0x154>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fc fd7d 	bl	80001e0 <__aeabi_dsub>
 80036e6:	4652      	mov	r2, sl
 80036e8:	465b      	mov	r3, fp
 80036ea:	f7fc ff31 	bl	8000550 <__aeabi_dmul>
 80036ee:	a33d      	add	r3, pc, #244	@ (adr r3, 80037e4 <__kernel_sin+0x15c>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc fd76 	bl	80001e4 <__adddf3>
 80036f8:	4652      	mov	r2, sl
 80036fa:	465b      	mov	r3, fp
 80036fc:	f7fc ff28 	bl	8000550 <__aeabi_dmul>
 8003700:	a33a      	add	r3, pc, #232	@ (adr r3, 80037ec <__kernel_sin+0x164>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc fd6b 	bl	80001e0 <__aeabi_dsub>
 800370a:	4652      	mov	r2, sl
 800370c:	465b      	mov	r3, fp
 800370e:	f7fc ff1f 	bl	8000550 <__aeabi_dmul>
 8003712:	a338      	add	r3, pc, #224	@ (adr r3, 80037f4 <__kernel_sin+0x16c>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc fd64 	bl	80001e4 <__adddf3>
 800371c:	4606      	mov	r6, r0
 800371e:	460f      	mov	r7, r1
 8003720:	f1b8 0f00 	cmp.w	r8, #0
 8003724:	d11b      	bne.n	800375e <__kernel_sin+0xd6>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4650      	mov	r0, sl
 800372c:	4659      	mov	r1, fp
 800372e:	f7fc ff0f 	bl	8000550 <__aeabi_dmul>
 8003732:	a325      	add	r3, pc, #148	@ (adr r3, 80037c8 <__kernel_sin+0x140>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc fd52 	bl	80001e0 <__aeabi_dsub>
 800373c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003740:	f7fc ff06 	bl	8000550 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc fd4a 	bl	80001e4 <__adddf3>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
 8003754:	ec45 4b10 	vmov	d0, r4, r5
 8003758:	b005      	add	sp, #20
 800375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003762:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <__kernel_sin+0x148>)
 8003764:	2200      	movs	r2, #0
 8003766:	f7fc fef3 	bl	8000550 <__aeabi_dmul>
 800376a:	4632      	mov	r2, r6
 800376c:	4680      	mov	r8, r0
 800376e:	4689      	mov	r9, r1
 8003770:	463b      	mov	r3, r7
 8003772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003776:	f7fc feeb 	bl	8000550 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	f7fc fd2d 	bl	80001e0 <__aeabi_dsub>
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f7fc fee1 	bl	8000550 <__aeabi_dmul>
 800378e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003792:	f7fc fd25 	bl	80001e0 <__aeabi_dsub>
 8003796:	a30c      	add	r3, pc, #48	@ (adr r3, 80037c8 <__kernel_sin+0x140>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	4606      	mov	r6, r0
 800379e:	460f      	mov	r7, r1
 80037a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037a4:	f7fc fed4 	bl	8000550 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4630      	mov	r0, r6
 80037ae:	4639      	mov	r1, r7
 80037b0:	f7fc fd18 	bl	80001e4 <__adddf3>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fd10 	bl	80001e0 <__aeabi_dsub>
 80037c0:	e7c6      	b.n	8003750 <__kernel_sin+0xc8>
 80037c2:	bf00      	nop
 80037c4:	f3af 8000 	nop.w
 80037c8:	55555549 	.word	0x55555549
 80037cc:	3fc55555 	.word	0x3fc55555
 80037d0:	3fe00000 	.word	0x3fe00000
 80037d4:	5acfd57c 	.word	0x5acfd57c
 80037d8:	3de5d93a 	.word	0x3de5d93a
 80037dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80037e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80037e4:	57b1fe7d 	.word	0x57b1fe7d
 80037e8:	3ec71de3 	.word	0x3ec71de3
 80037ec:	19c161d5 	.word	0x19c161d5
 80037f0:	3f2a01a0 	.word	0x3f2a01a0
 80037f4:	1110f8a6 	.word	0x1110f8a6
 80037f8:	3f811111 	.word	0x3f811111
 80037fc:	00000000 	.word	0x00000000

08003800 <__ieee754_rem_pio2>:
 8003800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003804:	ec57 6b10 	vmov	r6, r7, d0
 8003808:	4bc5      	ldr	r3, [pc, #788]	@ (8003b20 <__ieee754_rem_pio2+0x320>)
 800380a:	b08d      	sub	sp, #52	@ 0x34
 800380c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003810:	4598      	cmp	r8, r3
 8003812:	4604      	mov	r4, r0
 8003814:	9704      	str	r7, [sp, #16]
 8003816:	d807      	bhi.n	8003828 <__ieee754_rem_pio2+0x28>
 8003818:	2200      	movs	r2, #0
 800381a:	2300      	movs	r3, #0
 800381c:	ed80 0b00 	vstr	d0, [r0]
 8003820:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003824:	2500      	movs	r5, #0
 8003826:	e028      	b.n	800387a <__ieee754_rem_pio2+0x7a>
 8003828:	4bbe      	ldr	r3, [pc, #760]	@ (8003b24 <__ieee754_rem_pio2+0x324>)
 800382a:	4598      	cmp	r8, r3
 800382c:	d878      	bhi.n	8003920 <__ieee754_rem_pio2+0x120>
 800382e:	9b04      	ldr	r3, [sp, #16]
 8003830:	4dbd      	ldr	r5, [pc, #756]	@ (8003b28 <__ieee754_rem_pio2+0x328>)
 8003832:	2b00      	cmp	r3, #0
 8003834:	4630      	mov	r0, r6
 8003836:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003ae8 <__ieee754_rem_pio2+0x2e8>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	4639      	mov	r1, r7
 800383e:	dd38      	ble.n	80038b2 <__ieee754_rem_pio2+0xb2>
 8003840:	f7fc fcce 	bl	80001e0 <__aeabi_dsub>
 8003844:	45a8      	cmp	r8, r5
 8003846:	4606      	mov	r6, r0
 8003848:	460f      	mov	r7, r1
 800384a:	d01a      	beq.n	8003882 <__ieee754_rem_pio2+0x82>
 800384c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003af0 <__ieee754_rem_pio2+0x2f0>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc fcc5 	bl	80001e0 <__aeabi_dsub>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4680      	mov	r8, r0
 800385c:	4689      	mov	r9, r1
 800385e:	4630      	mov	r0, r6
 8003860:	4639      	mov	r1, r7
 8003862:	f7fc fcbd 	bl	80001e0 <__aeabi_dsub>
 8003866:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003af0 <__ieee754_rem_pio2+0x2f0>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fcb8 	bl	80001e0 <__aeabi_dsub>
 8003870:	e9c4 8900 	strd	r8, r9, [r4]
 8003874:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003878:	2501      	movs	r5, #1
 800387a:	4628      	mov	r0, r5
 800387c:	b00d      	add	sp, #52	@ 0x34
 800387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003882:	a39d      	add	r3, pc, #628	@ (adr r3, 8003af8 <__ieee754_rem_pio2+0x2f8>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fcaa 	bl	80001e0 <__aeabi_dsub>
 800388c:	a39c      	add	r3, pc, #624	@ (adr r3, 8003b00 <__ieee754_rem_pio2+0x300>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	4606      	mov	r6, r0
 8003894:	460f      	mov	r7, r1
 8003896:	f7fc fca3 	bl	80001e0 <__aeabi_dsub>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4680      	mov	r8, r0
 80038a0:	4689      	mov	r9, r1
 80038a2:	4630      	mov	r0, r6
 80038a4:	4639      	mov	r1, r7
 80038a6:	f7fc fc9b 	bl	80001e0 <__aeabi_dsub>
 80038aa:	a395      	add	r3, pc, #596	@ (adr r3, 8003b00 <__ieee754_rem_pio2+0x300>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	e7dc      	b.n	800386c <__ieee754_rem_pio2+0x6c>
 80038b2:	f7fc fc97 	bl	80001e4 <__adddf3>
 80038b6:	45a8      	cmp	r8, r5
 80038b8:	4606      	mov	r6, r0
 80038ba:	460f      	mov	r7, r1
 80038bc:	d018      	beq.n	80038f0 <__ieee754_rem_pio2+0xf0>
 80038be:	a38c      	add	r3, pc, #560	@ (adr r3, 8003af0 <__ieee754_rem_pio2+0x2f0>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f7fc fc8e 	bl	80001e4 <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4680      	mov	r8, r0
 80038ce:	4689      	mov	r9, r1
 80038d0:	4630      	mov	r0, r6
 80038d2:	4639      	mov	r1, r7
 80038d4:	f7fc fc84 	bl	80001e0 <__aeabi_dsub>
 80038d8:	a385      	add	r3, pc, #532	@ (adr r3, 8003af0 <__ieee754_rem_pio2+0x2f0>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fc fc81 	bl	80001e4 <__adddf3>
 80038e2:	f04f 35ff 	mov.w	r5, #4294967295
 80038e6:	e9c4 8900 	strd	r8, r9, [r4]
 80038ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038ee:	e7c4      	b.n	800387a <__ieee754_rem_pio2+0x7a>
 80038f0:	a381      	add	r3, pc, #516	@ (adr r3, 8003af8 <__ieee754_rem_pio2+0x2f8>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fc75 	bl	80001e4 <__adddf3>
 80038fa:	a381      	add	r3, pc, #516	@ (adr r3, 8003b00 <__ieee754_rem_pio2+0x300>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	f7fc fc6e 	bl	80001e4 <__adddf3>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4680      	mov	r8, r0
 800390e:	4689      	mov	r9, r1
 8003910:	4630      	mov	r0, r6
 8003912:	4639      	mov	r1, r7
 8003914:	f7fc fc64 	bl	80001e0 <__aeabi_dsub>
 8003918:	a379      	add	r3, pc, #484	@ (adr r3, 8003b00 <__ieee754_rem_pio2+0x300>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	e7de      	b.n	80038de <__ieee754_rem_pio2+0xde>
 8003920:	4b82      	ldr	r3, [pc, #520]	@ (8003b2c <__ieee754_rem_pio2+0x32c>)
 8003922:	4598      	cmp	r8, r3
 8003924:	f200 80d1 	bhi.w	8003aca <__ieee754_rem_pio2+0x2ca>
 8003928:	f000 f966 	bl	8003bf8 <fabs>
 800392c:	ec57 6b10 	vmov	r6, r7, d0
 8003930:	a375      	add	r3, pc, #468	@ (adr r3, 8003b08 <__ieee754_rem_pio2+0x308>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	4630      	mov	r0, r6
 8003938:	4639      	mov	r1, r7
 800393a:	f7fc fe09 	bl	8000550 <__aeabi_dmul>
 800393e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b30 <__ieee754_rem_pio2+0x330>)
 8003940:	2200      	movs	r2, #0
 8003942:	f7fc fc4f 	bl	80001e4 <__adddf3>
 8003946:	f7fd f89d 	bl	8000a84 <__aeabi_d2iz>
 800394a:	4605      	mov	r5, r0
 800394c:	f7fc fd96 	bl	800047c <__aeabi_i2d>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003958:	a363      	add	r3, pc, #396	@ (adr r3, 8003ae8 <__ieee754_rem_pio2+0x2e8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fc fdf7 	bl	8000550 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4630      	mov	r0, r6
 8003968:	4639      	mov	r1, r7
 800396a:	f7fc fc39 	bl	80001e0 <__aeabi_dsub>
 800396e:	a360      	add	r3, pc, #384	@ (adr r3, 8003af0 <__ieee754_rem_pio2+0x2f0>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	4682      	mov	sl, r0
 8003976:	468b      	mov	fp, r1
 8003978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800397c:	f7fc fde8 	bl	8000550 <__aeabi_dmul>
 8003980:	2d1f      	cmp	r5, #31
 8003982:	4606      	mov	r6, r0
 8003984:	460f      	mov	r7, r1
 8003986:	dc0c      	bgt.n	80039a2 <__ieee754_rem_pio2+0x1a2>
 8003988:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <__ieee754_rem_pio2+0x334>)
 800398a:	1e6a      	subs	r2, r5, #1
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	4543      	cmp	r3, r8
 8003992:	d006      	beq.n	80039a2 <__ieee754_rem_pio2+0x1a2>
 8003994:	4632      	mov	r2, r6
 8003996:	463b      	mov	r3, r7
 8003998:	4650      	mov	r0, sl
 800399a:	4659      	mov	r1, fp
 800399c:	f7fc fc20 	bl	80001e0 <__aeabi_dsub>
 80039a0:	e00e      	b.n	80039c0 <__ieee754_rem_pio2+0x1c0>
 80039a2:	463b      	mov	r3, r7
 80039a4:	4632      	mov	r2, r6
 80039a6:	4650      	mov	r0, sl
 80039a8:	4659      	mov	r1, fp
 80039aa:	f7fc fc19 	bl	80001e0 <__aeabi_dsub>
 80039ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80039b2:	9305      	str	r3, [sp, #20]
 80039b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80039bc:	2b10      	cmp	r3, #16
 80039be:	dc02      	bgt.n	80039c6 <__ieee754_rem_pio2+0x1c6>
 80039c0:	e9c4 0100 	strd	r0, r1, [r4]
 80039c4:	e039      	b.n	8003a3a <__ieee754_rem_pio2+0x23a>
 80039c6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003af8 <__ieee754_rem_pio2+0x2f8>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039d0:	f7fc fdbe 	bl	8000550 <__aeabi_dmul>
 80039d4:	4606      	mov	r6, r0
 80039d6:	460f      	mov	r7, r1
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4650      	mov	r0, sl
 80039de:	4659      	mov	r1, fp
 80039e0:	f7fc fbfe 	bl	80001e0 <__aeabi_dsub>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4680      	mov	r8, r0
 80039ea:	4689      	mov	r9, r1
 80039ec:	4650      	mov	r0, sl
 80039ee:	4659      	mov	r1, fp
 80039f0:	f7fc fbf6 	bl	80001e0 <__aeabi_dsub>
 80039f4:	4632      	mov	r2, r6
 80039f6:	463b      	mov	r3, r7
 80039f8:	f7fc fbf2 	bl	80001e0 <__aeabi_dsub>
 80039fc:	a340      	add	r3, pc, #256	@ (adr r3, 8003b00 <__ieee754_rem_pio2+0x300>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	4606      	mov	r6, r0
 8003a04:	460f      	mov	r7, r1
 8003a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a0a:	f7fc fda1 	bl	8000550 <__aeabi_dmul>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	463b      	mov	r3, r7
 8003a12:	f7fc fbe5 	bl	80001e0 <__aeabi_dsub>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	460f      	mov	r7, r1
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	f7fc fbdd 	bl	80001e0 <__aeabi_dsub>
 8003a26:	9a05      	ldr	r2, [sp, #20]
 8003a28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b31      	cmp	r3, #49	@ 0x31
 8003a30:	dc20      	bgt.n	8003a74 <__ieee754_rem_pio2+0x274>
 8003a32:	e9c4 0100 	strd	r0, r1, [r4]
 8003a36:	46c2      	mov	sl, r8
 8003a38:	46cb      	mov	fp, r9
 8003a3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003a3e:	4650      	mov	r0, sl
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	4659      	mov	r1, fp
 8003a46:	f7fc fbcb 	bl	80001e0 <__aeabi_dsub>
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	f7fc fbc7 	bl	80001e0 <__aeabi_dsub>
 8003a52:	9b04      	ldr	r3, [sp, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a5a:	f6bf af0e 	bge.w	800387a <__ieee754_rem_pio2+0x7a>
 8003a5e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a68:	f8c4 8000 	str.w	r8, [r4]
 8003a6c:	60a0      	str	r0, [r4, #8]
 8003a6e:	60e3      	str	r3, [r4, #12]
 8003a70:	426d      	negs	r5, r5
 8003a72:	e702      	b.n	800387a <__ieee754_rem_pio2+0x7a>
 8003a74:	a326      	add	r3, pc, #152	@ (adr r3, 8003b10 <__ieee754_rem_pio2+0x310>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7e:	f7fc fd67 	bl	8000550 <__aeabi_dmul>
 8003a82:	4606      	mov	r6, r0
 8003a84:	460f      	mov	r7, r1
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	f7fc fba7 	bl	80001e0 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4682      	mov	sl, r0
 8003a98:	468b      	mov	fp, r1
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fb9f 	bl	80001e0 <__aeabi_dsub>
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	f7fc fb9b 	bl	80001e0 <__aeabi_dsub>
 8003aaa:	a31b      	add	r3, pc, #108	@ (adr r3, 8003b18 <__ieee754_rem_pio2+0x318>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	460f      	mov	r7, r1
 8003ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ab8:	f7fc fd4a 	bl	8000550 <__aeabi_dmul>
 8003abc:	4632      	mov	r2, r6
 8003abe:	463b      	mov	r3, r7
 8003ac0:	f7fc fb8e 	bl	80001e0 <__aeabi_dsub>
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	460f      	mov	r7, r1
 8003ac8:	e764      	b.n	8003994 <__ieee754_rem_pio2+0x194>
 8003aca:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <__ieee754_rem_pio2+0x338>)
 8003acc:	4598      	cmp	r8, r3
 8003ace:	d935      	bls.n	8003b3c <__ieee754_rem_pio2+0x33c>
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7fc fb82 	bl	80001e0 <__aeabi_dsub>
 8003adc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ae0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ae4:	e69e      	b.n	8003824 <__ieee754_rem_pio2+0x24>
 8003ae6:	bf00      	nop
 8003ae8:	54400000 	.word	0x54400000
 8003aec:	3ff921fb 	.word	0x3ff921fb
 8003af0:	1a626331 	.word	0x1a626331
 8003af4:	3dd0b461 	.word	0x3dd0b461
 8003af8:	1a600000 	.word	0x1a600000
 8003afc:	3dd0b461 	.word	0x3dd0b461
 8003b00:	2e037073 	.word	0x2e037073
 8003b04:	3ba3198a 	.word	0x3ba3198a
 8003b08:	6dc9c883 	.word	0x6dc9c883
 8003b0c:	3fe45f30 	.word	0x3fe45f30
 8003b10:	2e000000 	.word	0x2e000000
 8003b14:	3ba3198a 	.word	0x3ba3198a
 8003b18:	252049c1 	.word	0x252049c1
 8003b1c:	397b839a 	.word	0x397b839a
 8003b20:	3fe921fb 	.word	0x3fe921fb
 8003b24:	4002d97b 	.word	0x4002d97b
 8003b28:	3ff921fb 	.word	0x3ff921fb
 8003b2c:	413921fb 	.word	0x413921fb
 8003b30:	3fe00000 	.word	0x3fe00000
 8003b34:	080044e0 	.word	0x080044e0
 8003b38:	7fefffff 	.word	0x7fefffff
 8003b3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003b40:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003b44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003b48:	4630      	mov	r0, r6
 8003b4a:	460f      	mov	r7, r1
 8003b4c:	f7fc ff9a 	bl	8000a84 <__aeabi_d2iz>
 8003b50:	f7fc fc94 	bl	800047c <__aeabi_i2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b60:	f7fc fb3e 	bl	80001e0 <__aeabi_dsub>
 8003b64:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <__ieee754_rem_pio2+0x3f0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	f7fc fcf2 	bl	8000550 <__aeabi_dmul>
 8003b6c:	460f      	mov	r7, r1
 8003b6e:	4606      	mov	r6, r0
 8003b70:	f7fc ff88 	bl	8000a84 <__aeabi_d2iz>
 8003b74:	f7fc fc82 	bl	800047c <__aeabi_i2d>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	4639      	mov	r1, r7
 8003b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b84:	f7fc fb2c 	bl	80001e0 <__aeabi_dsub>
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <__ieee754_rem_pio2+0x3f0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f7fc fce0 	bl	8000550 <__aeabi_dmul>
 8003b90:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003b94:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003b98:	f04f 0803 	mov.w	r8, #3
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	2700      	movs	r7, #0
 8003ba0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	46c2      	mov	sl, r8
 8003baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bae:	f7fc ff37 	bl	8000a20 <__aeabi_dcmpeq>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d1f4      	bne.n	8003ba0 <__ieee754_rem_pio2+0x3a0>
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <__ieee754_rem_pio2+0x3f4>)
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	4653      	mov	r3, sl
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	a806      	add	r0, sp, #24
 8003bc6:	f000 f81f 	bl	8003c08 <__kernel_rem_pio2>
 8003bca:	9b04      	ldr	r3, [sp, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	4605      	mov	r5, r0
 8003bd0:	f6bf ae53 	bge.w	800387a <__ieee754_rem_pio2+0x7a>
 8003bd4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003bd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003bdc:	e9c4 2300 	strd	r2, r3, [r4]
 8003be0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003be4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003be8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003bec:	e740      	b.n	8003a70 <__ieee754_rem_pio2+0x270>
 8003bee:	bf00      	nop
 8003bf0:	41700000 	.word	0x41700000
 8003bf4:	08004560 	.word	0x08004560

08003bf8 <fabs>:
 8003bf8:	ec51 0b10 	vmov	r0, r1, d0
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003c02:	ec43 2b10 	vmov	d0, r2, r3
 8003c06:	4770      	bx	lr

08003c08 <__kernel_rem_pio2>:
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	ed2d 8b02 	vpush	{d8}
 8003c10:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003c14:	f112 0f14 	cmn.w	r2, #20
 8003c18:	9306      	str	r3, [sp, #24]
 8003c1a:	9104      	str	r1, [sp, #16]
 8003c1c:	4bbe      	ldr	r3, [pc, #760]	@ (8003f18 <__kernel_rem_pio2+0x310>)
 8003c1e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003c20:	9008      	str	r0, [sp, #32]
 8003c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	9b06      	ldr	r3, [sp, #24]
 8003c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c2e:	bfa8      	it	ge
 8003c30:	1ed4      	subge	r4, r2, #3
 8003c32:	9305      	str	r3, [sp, #20]
 8003c34:	bfb2      	itee	lt
 8003c36:	2400      	movlt	r4, #0
 8003c38:	2318      	movge	r3, #24
 8003c3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003c3e:	f06f 0317 	mvn.w	r3, #23
 8003c42:	fb04 3303 	mla	r3, r4, r3, r3
 8003c46:	eb03 0b02 	add.w	fp, r3, r2
 8003c4a:	9b00      	ldr	r3, [sp, #0]
 8003c4c:	9a05      	ldr	r2, [sp, #20]
 8003c4e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003f08 <__kernel_rem_pio2+0x300>
 8003c52:	eb03 0802 	add.w	r8, r3, r2
 8003c56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003c58:	1aa7      	subs	r7, r4, r2
 8003c5a:	ae20      	add	r6, sp, #128	@ 0x80
 8003c5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003c60:	2500      	movs	r5, #0
 8003c62:	4545      	cmp	r5, r8
 8003c64:	dd13      	ble.n	8003c8e <__kernel_rem_pio2+0x86>
 8003c66:	9b06      	ldr	r3, [sp, #24]
 8003c68:	aa20      	add	r2, sp, #128	@ 0x80
 8003c6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003c6e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003c72:	f04f 0800 	mov.w	r8, #0
 8003c76:	9b00      	ldr	r3, [sp, #0]
 8003c78:	4598      	cmp	r8, r3
 8003c7a:	dc31      	bgt.n	8003ce0 <__kernel_rem_pio2+0xd8>
 8003c7c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003f08 <__kernel_rem_pio2+0x300>
 8003c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c88:	462f      	mov	r7, r5
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	e01b      	b.n	8003cc6 <__kernel_rem_pio2+0xbe>
 8003c8e:	42ef      	cmn	r7, r5
 8003c90:	d407      	bmi.n	8003ca2 <__kernel_rem_pio2+0x9a>
 8003c92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003c96:	f7fc fbf1 	bl	800047c <__aeabi_i2d>
 8003c9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	e7df      	b.n	8003c62 <__kernel_rem_pio2+0x5a>
 8003ca2:	ec51 0b18 	vmov	r0, r1, d8
 8003ca6:	e7f8      	b.n	8003c9a <__kernel_rem_pio2+0x92>
 8003ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003cb0:	f7fc fc4e 	bl	8000550 <__aeabi_dmul>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cbc:	f7fc fa92 	bl	80001e4 <__adddf3>
 8003cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cc4:	3601      	adds	r6, #1
 8003cc6:	9b05      	ldr	r3, [sp, #20]
 8003cc8:	429e      	cmp	r6, r3
 8003cca:	f1a7 0708 	sub.w	r7, r7, #8
 8003cce:	ddeb      	ble.n	8003ca8 <__kernel_rem_pio2+0xa0>
 8003cd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003cd4:	f108 0801 	add.w	r8, r8, #1
 8003cd8:	ecaa 7b02 	vstmia	sl!, {d7}
 8003cdc:	3508      	adds	r5, #8
 8003cde:	e7ca      	b.n	8003c76 <__kernel_rem_pio2+0x6e>
 8003ce0:	9b00      	ldr	r3, [sp, #0]
 8003ce2:	f8dd 8000 	ldr.w	r8, [sp]
 8003ce6:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003cf0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cf6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cfc:	ab98      	add	r3, sp, #608	@ 0x260
 8003cfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d02:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003d06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d0a:	ac0c      	add	r4, sp, #48	@ 0x30
 8003d0c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003d0e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003d12:	46a1      	mov	r9, r4
 8003d14:	46c2      	mov	sl, r8
 8003d16:	f1ba 0f00 	cmp.w	sl, #0
 8003d1a:	f1a5 0508 	sub.w	r5, r5, #8
 8003d1e:	dc77      	bgt.n	8003e10 <__kernel_rem_pio2+0x208>
 8003d20:	4658      	mov	r0, fp
 8003d22:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003d26:	f000 fac7 	bl	80042b8 <scalbn>
 8003d2a:	ec57 6b10 	vmov	r6, r7, d0
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003d34:	4630      	mov	r0, r6
 8003d36:	4639      	mov	r1, r7
 8003d38:	f7fc fc0a 	bl	8000550 <__aeabi_dmul>
 8003d3c:	ec41 0b10 	vmov	d0, r0, r1
 8003d40:	f000 fb3a 	bl	80043b8 <floor>
 8003d44:	4b75      	ldr	r3, [pc, #468]	@ (8003f1c <__kernel_rem_pio2+0x314>)
 8003d46:	ec51 0b10 	vmov	r0, r1, d0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f7fc fc00 	bl	8000550 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4630      	mov	r0, r6
 8003d56:	4639      	mov	r1, r7
 8003d58:	f7fc fa42 	bl	80001e0 <__aeabi_dsub>
 8003d5c:	460f      	mov	r7, r1
 8003d5e:	4606      	mov	r6, r0
 8003d60:	f7fc fe90 	bl	8000a84 <__aeabi_d2iz>
 8003d64:	9002      	str	r0, [sp, #8]
 8003d66:	f7fc fb89 	bl	800047c <__aeabi_i2d>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4630      	mov	r0, r6
 8003d70:	4639      	mov	r1, r7
 8003d72:	f7fc fa35 	bl	80001e0 <__aeabi_dsub>
 8003d76:	f1bb 0f00 	cmp.w	fp, #0
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	dd6c      	ble.n	8003e5a <__kernel_rem_pio2+0x252>
 8003d80:	f108 31ff 	add.w	r1, r8, #4294967295
 8003d84:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d86:	9d02      	ldr	r5, [sp, #8]
 8003d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d8c:	f1cb 0018 	rsb	r0, fp, #24
 8003d90:	fa43 f200 	asr.w	r2, r3, r0
 8003d94:	4415      	add	r5, r2
 8003d96:	4082      	lsls	r2, r0
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	aa0c      	add	r2, sp, #48	@ 0x30
 8003d9c:	9502      	str	r5, [sp, #8]
 8003d9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003da2:	f1cb 0217 	rsb	r2, fp, #23
 8003da6:	fa43 f902 	asr.w	r9, r3, r2
 8003daa:	f1b9 0f00 	cmp.w	r9, #0
 8003dae:	dd64      	ble.n	8003e7a <__kernel_rem_pio2+0x272>
 8003db0:	9b02      	ldr	r3, [sp, #8]
 8003db2:	2200      	movs	r2, #0
 8003db4:	3301      	adds	r3, #1
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	4615      	mov	r5, r2
 8003dba:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003dbe:	4590      	cmp	r8, r2
 8003dc0:	f300 80b8 	bgt.w	8003f34 <__kernel_rem_pio2+0x32c>
 8003dc4:	f1bb 0f00 	cmp.w	fp, #0
 8003dc8:	dd07      	ble.n	8003dda <__kernel_rem_pio2+0x1d2>
 8003dca:	f1bb 0f01 	cmp.w	fp, #1
 8003dce:	f000 80bf 	beq.w	8003f50 <__kernel_rem_pio2+0x348>
 8003dd2:	f1bb 0f02 	cmp.w	fp, #2
 8003dd6:	f000 80c6 	beq.w	8003f66 <__kernel_rem_pio2+0x35e>
 8003dda:	f1b9 0f02 	cmp.w	r9, #2
 8003dde:	d14c      	bne.n	8003e7a <__kernel_rem_pio2+0x272>
 8003de0:	4632      	mov	r2, r6
 8003de2:	463b      	mov	r3, r7
 8003de4:	494e      	ldr	r1, [pc, #312]	@ (8003f20 <__kernel_rem_pio2+0x318>)
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7fc f9fa 	bl	80001e0 <__aeabi_dsub>
 8003dec:	4606      	mov	r6, r0
 8003dee:	460f      	mov	r7, r1
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	d042      	beq.n	8003e7a <__kernel_rem_pio2+0x272>
 8003df4:	4658      	mov	r0, fp
 8003df6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003f10 <__kernel_rem_pio2+0x308>
 8003dfa:	f000 fa5d 	bl	80042b8 <scalbn>
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4639      	mov	r1, r7
 8003e02:	ec53 2b10 	vmov	r2, r3, d0
 8003e06:	f7fc f9eb 	bl	80001e0 <__aeabi_dsub>
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	460f      	mov	r7, r1
 8003e0e:	e034      	b.n	8003e7a <__kernel_rem_pio2+0x272>
 8003e10:	4b44      	ldr	r3, [pc, #272]	@ (8003f24 <__kernel_rem_pio2+0x31c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e18:	f7fc fb9a 	bl	8000550 <__aeabi_dmul>
 8003e1c:	f7fc fe32 	bl	8000a84 <__aeabi_d2iz>
 8003e20:	f7fc fb2c 	bl	800047c <__aeabi_i2d>
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <__kernel_rem_pio2+0x320>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	4606      	mov	r6, r0
 8003e2a:	460f      	mov	r7, r1
 8003e2c:	f7fc fb90 	bl	8000550 <__aeabi_dmul>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e38:	f7fc f9d2 	bl	80001e0 <__aeabi_dsub>
 8003e3c:	f7fc fe22 	bl	8000a84 <__aeabi_d2iz>
 8003e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e44:	f849 0b04 	str.w	r0, [r9], #4
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7fc f9ca 	bl	80001e4 <__adddf3>
 8003e50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e58:	e75d      	b.n	8003d16 <__kernel_rem_pio2+0x10e>
 8003e5a:	d107      	bne.n	8003e6c <__kernel_rem_pio2+0x264>
 8003e5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003e60:	aa0c      	add	r2, sp, #48	@ 0x30
 8003e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e66:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003e6a:	e79e      	b.n	8003daa <__kernel_rem_pio2+0x1a2>
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f2c <__kernel_rem_pio2+0x324>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f7fc fdf4 	bl	8000a5c <__aeabi_dcmpge>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d143      	bne.n	8003f00 <__kernel_rem_pio2+0x2f8>
 8003e78:	4681      	mov	r9, r0
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	4639      	mov	r1, r7
 8003e82:	f7fc fdcd 	bl	8000a20 <__aeabi_dcmpeq>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f000 80bf 	beq.w	800400a <__kernel_rem_pio2+0x402>
 8003e8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003e90:	2200      	movs	r2, #0
 8003e92:	9900      	ldr	r1, [sp, #0]
 8003e94:	428b      	cmp	r3, r1
 8003e96:	da6e      	bge.n	8003f76 <__kernel_rem_pio2+0x36e>
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	f000 8089 	beq.w	8003fb0 <__kernel_rem_pio2+0x3a8>
 8003e9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ea2:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ea4:	f1ab 0b18 	sub.w	fp, fp, #24
 8003ea8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f6      	beq.n	8003e9e <__kernel_rem_pio2+0x296>
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003f10 <__kernel_rem_pio2+0x308>
 8003eb6:	f000 f9ff 	bl	80042b8 <scalbn>
 8003eba:	f108 0301 	add.w	r3, r8, #1
 8003ebe:	00da      	lsls	r2, r3, #3
 8003ec0:	9205      	str	r2, [sp, #20]
 8003ec2:	ec55 4b10 	vmov	r4, r5, d0
 8003ec6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003ec8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003f24 <__kernel_rem_pio2+0x31c>
 8003ecc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003ed0:	4646      	mov	r6, r8
 8003ed2:	f04f 0a00 	mov.w	sl, #0
 8003ed6:	2e00      	cmp	r6, #0
 8003ed8:	f280 80cf 	bge.w	800407a <__kernel_rem_pio2+0x472>
 8003edc:	4644      	mov	r4, r8
 8003ede:	2c00      	cmp	r4, #0
 8003ee0:	f2c0 80fd 	blt.w	80040de <__kernel_rem_pio2+0x4d6>
 8003ee4:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <__kernel_rem_pio2+0x328>)
 8003ee6:	461f      	mov	r7, r3
 8003ee8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003eee:	9306      	str	r3, [sp, #24]
 8003ef0:	f04f 0a00 	mov.w	sl, #0
 8003ef4:	f04f 0b00 	mov.w	fp, #0
 8003ef8:	2600      	movs	r6, #0
 8003efa:	eba8 0504 	sub.w	r5, r8, r4
 8003efe:	e0e2      	b.n	80040c6 <__kernel_rem_pio2+0x4be>
 8003f00:	f04f 0902 	mov.w	r9, #2
 8003f04:	e754      	b.n	8003db0 <__kernel_rem_pio2+0x1a8>
 8003f06:	bf00      	nop
	...
 8003f14:	3ff00000 	.word	0x3ff00000
 8003f18:	080046a8 	.word	0x080046a8
 8003f1c:	40200000 	.word	0x40200000
 8003f20:	3ff00000 	.word	0x3ff00000
 8003f24:	3e700000 	.word	0x3e700000
 8003f28:	41700000 	.word	0x41700000
 8003f2c:	3fe00000 	.word	0x3fe00000
 8003f30:	08004668 	.word	0x08004668
 8003f34:	f854 3b04 	ldr.w	r3, [r4], #4
 8003f38:	b945      	cbnz	r5, 8003f4c <__kernel_rem_pio2+0x344>
 8003f3a:	b123      	cbz	r3, 8003f46 <__kernel_rem_pio2+0x33e>
 8003f3c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003f40:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f44:	2301      	movs	r3, #1
 8003f46:	3201      	adds	r2, #1
 8003f48:	461d      	mov	r5, r3
 8003f4a:	e738      	b.n	8003dbe <__kernel_rem_pio2+0x1b6>
 8003f4c:	1acb      	subs	r3, r1, r3
 8003f4e:	e7f7      	b.n	8003f40 <__kernel_rem_pio2+0x338>
 8003f50:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f54:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003f5e:	a90c      	add	r1, sp, #48	@ 0x30
 8003f60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f64:	e739      	b.n	8003dda <__kernel_rem_pio2+0x1d2>
 8003f66:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003f74:	e7f3      	b.n	8003f5e <__kernel_rem_pio2+0x356>
 8003f76:	a90c      	add	r1, sp, #48	@ 0x30
 8003f78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	e787      	b.n	8003e92 <__kernel_rem_pio2+0x28a>
 8003f82:	3401      	adds	r4, #1
 8003f84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d0fa      	beq.n	8003f82 <__kernel_rem_pio2+0x37a>
 8003f8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f92:	eb0d 0503 	add.w	r5, sp, r3
 8003f96:	9b06      	ldr	r3, [sp, #24]
 8003f98:	aa20      	add	r2, sp, #128	@ 0x80
 8003f9a:	4443      	add	r3, r8
 8003f9c:	f108 0701 	add.w	r7, r8, #1
 8003fa0:	3d98      	subs	r5, #152	@ 0x98
 8003fa2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003fa6:	4444      	add	r4, r8
 8003fa8:	42bc      	cmp	r4, r7
 8003faa:	da04      	bge.n	8003fb6 <__kernel_rem_pio2+0x3ae>
 8003fac:	46a0      	mov	r8, r4
 8003fae:	e6a2      	b.n	8003cf6 <__kernel_rem_pio2+0xee>
 8003fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fb2:	2401      	movs	r4, #1
 8003fb4:	e7e6      	b.n	8003f84 <__kernel_rem_pio2+0x37c>
 8003fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003fbc:	f7fc fa5e 	bl	800047c <__aeabi_i2d>
 8003fc0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004288 <__kernel_rem_pio2+0x680>
 8003fc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003fc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fd0:	46b2      	mov	sl, r6
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	9b05      	ldr	r3, [sp, #20]
 8003fd8:	4598      	cmp	r8, r3
 8003fda:	dd05      	ble.n	8003fe8 <__kernel_rem_pio2+0x3e0>
 8003fdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003fe0:	3701      	adds	r7, #1
 8003fe2:	eca5 7b02 	vstmia	r5!, {d7}
 8003fe6:	e7df      	b.n	8003fa8 <__kernel_rem_pio2+0x3a0>
 8003fe8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003fec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003ff0:	f7fc faae 	bl	8000550 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ffc:	f7fc f8f2 	bl	80001e4 <__adddf3>
 8004000:	f108 0801 	add.w	r8, r8, #1
 8004004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004008:	e7e5      	b.n	8003fd6 <__kernel_rem_pio2+0x3ce>
 800400a:	f1cb 0000 	rsb	r0, fp, #0
 800400e:	ec47 6b10 	vmov	d0, r6, r7
 8004012:	f000 f951 	bl	80042b8 <scalbn>
 8004016:	ec55 4b10 	vmov	r4, r5, d0
 800401a:	4b9d      	ldr	r3, [pc, #628]	@ (8004290 <__kernel_rem_pio2+0x688>)
 800401c:	2200      	movs	r2, #0
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f7fc fd1b 	bl	8000a5c <__aeabi_dcmpge>
 8004026:	b300      	cbz	r0, 800406a <__kernel_rem_pio2+0x462>
 8004028:	4b9a      	ldr	r3, [pc, #616]	@ (8004294 <__kernel_rem_pio2+0x68c>)
 800402a:	2200      	movs	r2, #0
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fa8e 	bl	8000550 <__aeabi_dmul>
 8004034:	f7fc fd26 	bl	8000a84 <__aeabi_d2iz>
 8004038:	4606      	mov	r6, r0
 800403a:	f7fc fa1f 	bl	800047c <__aeabi_i2d>
 800403e:	4b94      	ldr	r3, [pc, #592]	@ (8004290 <__kernel_rem_pio2+0x688>)
 8004040:	2200      	movs	r2, #0
 8004042:	f7fc fa85 	bl	8000550 <__aeabi_dmul>
 8004046:	460b      	mov	r3, r1
 8004048:	4602      	mov	r2, r0
 800404a:	4629      	mov	r1, r5
 800404c:	4620      	mov	r0, r4
 800404e:	f7fc f8c7 	bl	80001e0 <__aeabi_dsub>
 8004052:	f7fc fd17 	bl	8000a84 <__aeabi_d2iz>
 8004056:	ab0c      	add	r3, sp, #48	@ 0x30
 8004058:	f10b 0b18 	add.w	fp, fp, #24
 800405c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004060:	f108 0801 	add.w	r8, r8, #1
 8004064:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004068:	e722      	b.n	8003eb0 <__kernel_rem_pio2+0x2a8>
 800406a:	4620      	mov	r0, r4
 800406c:	4629      	mov	r1, r5
 800406e:	f7fc fd09 	bl	8000a84 <__aeabi_d2iz>
 8004072:	ab0c      	add	r3, sp, #48	@ 0x30
 8004074:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004078:	e71a      	b.n	8003eb0 <__kernel_rem_pio2+0x2a8>
 800407a:	ab0c      	add	r3, sp, #48	@ 0x30
 800407c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004080:	f7fc f9fc 	bl	800047c <__aeabi_i2d>
 8004084:	4622      	mov	r2, r4
 8004086:	462b      	mov	r3, r5
 8004088:	f7fc fa62 	bl	8000550 <__aeabi_dmul>
 800408c:	4652      	mov	r2, sl
 800408e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004092:	465b      	mov	r3, fp
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fa5a 	bl	8000550 <__aeabi_dmul>
 800409c:	3e01      	subs	r6, #1
 800409e:	4604      	mov	r4, r0
 80040a0:	460d      	mov	r5, r1
 80040a2:	e718      	b.n	8003ed6 <__kernel_rem_pio2+0x2ce>
 80040a4:	9906      	ldr	r1, [sp, #24]
 80040a6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80040aa:	9106      	str	r1, [sp, #24]
 80040ac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80040b0:	f7fc fa4e 	bl	8000550 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4650      	mov	r0, sl
 80040ba:	4659      	mov	r1, fp
 80040bc:	f7fc f892 	bl	80001e4 <__adddf3>
 80040c0:	3601      	adds	r6, #1
 80040c2:	4682      	mov	sl, r0
 80040c4:	468b      	mov	fp, r1
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	429e      	cmp	r6, r3
 80040ca:	dc01      	bgt.n	80040d0 <__kernel_rem_pio2+0x4c8>
 80040cc:	42b5      	cmp	r5, r6
 80040ce:	dae9      	bge.n	80040a4 <__kernel_rem_pio2+0x49c>
 80040d0:	ab48      	add	r3, sp, #288	@ 0x120
 80040d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80040d6:	e9c5 ab00 	strd	sl, fp, [r5]
 80040da:	3c01      	subs	r4, #1
 80040dc:	e6ff      	b.n	8003ede <__kernel_rem_pio2+0x2d6>
 80040de:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	dc0b      	bgt.n	80040fc <__kernel_rem_pio2+0x4f4>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dc39      	bgt.n	800415c <__kernel_rem_pio2+0x554>
 80040e8:	d05d      	beq.n	80041a6 <__kernel_rem_pio2+0x59e>
 80040ea:	9b02      	ldr	r3, [sp, #8]
 80040ec:	f003 0007 	and.w	r0, r3, #7
 80040f0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80040f4:	ecbd 8b02 	vpop	{d8}
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d1f3      	bne.n	80040ea <__kernel_rem_pio2+0x4e2>
 8004102:	9b05      	ldr	r3, [sp, #20]
 8004104:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004108:	eb0d 0403 	add.w	r4, sp, r3
 800410c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004110:	4625      	mov	r5, r4
 8004112:	46c2      	mov	sl, r8
 8004114:	f1ba 0f00 	cmp.w	sl, #0
 8004118:	f1a5 0508 	sub.w	r5, r5, #8
 800411c:	dc6b      	bgt.n	80041f6 <__kernel_rem_pio2+0x5ee>
 800411e:	4645      	mov	r5, r8
 8004120:	2d01      	cmp	r5, #1
 8004122:	f1a4 0408 	sub.w	r4, r4, #8
 8004126:	f300 8087 	bgt.w	8004238 <__kernel_rem_pio2+0x630>
 800412a:	9c05      	ldr	r4, [sp, #20]
 800412c:	ab48      	add	r3, sp, #288	@ 0x120
 800412e:	441c      	add	r4, r3
 8004130:	2000      	movs	r0, #0
 8004132:	2100      	movs	r1, #0
 8004134:	f1b8 0f01 	cmp.w	r8, #1
 8004138:	f300 809c 	bgt.w	8004274 <__kernel_rem_pio2+0x66c>
 800413c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004140:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004144:	f1b9 0f00 	cmp.w	r9, #0
 8004148:	f040 80a6 	bne.w	8004298 <__kernel_rem_pio2+0x690>
 800414c:	9b04      	ldr	r3, [sp, #16]
 800414e:	e9c3 7800 	strd	r7, r8, [r3]
 8004152:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004156:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800415a:	e7c6      	b.n	80040ea <__kernel_rem_pio2+0x4e2>
 800415c:	9d05      	ldr	r5, [sp, #20]
 800415e:	ab48      	add	r3, sp, #288	@ 0x120
 8004160:	441d      	add	r5, r3
 8004162:	4644      	mov	r4, r8
 8004164:	2000      	movs	r0, #0
 8004166:	2100      	movs	r1, #0
 8004168:	2c00      	cmp	r4, #0
 800416a:	da35      	bge.n	80041d8 <__kernel_rem_pio2+0x5d0>
 800416c:	f1b9 0f00 	cmp.w	r9, #0
 8004170:	d038      	beq.n	80041e4 <__kernel_rem_pio2+0x5dc>
 8004172:	4602      	mov	r2, r0
 8004174:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004178:	9c04      	ldr	r4, [sp, #16]
 800417a:	e9c4 2300 	strd	r2, r3, [r4]
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004186:	f7fc f82b 	bl	80001e0 <__aeabi_dsub>
 800418a:	ad4a      	add	r5, sp, #296	@ 0x128
 800418c:	2401      	movs	r4, #1
 800418e:	45a0      	cmp	r8, r4
 8004190:	da2b      	bge.n	80041ea <__kernel_rem_pio2+0x5e2>
 8004192:	f1b9 0f00 	cmp.w	r9, #0
 8004196:	d002      	beq.n	800419e <__kernel_rem_pio2+0x596>
 8004198:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800419c:	4619      	mov	r1, r3
 800419e:	9b04      	ldr	r3, [sp, #16]
 80041a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80041a4:	e7a1      	b.n	80040ea <__kernel_rem_pio2+0x4e2>
 80041a6:	9c05      	ldr	r4, [sp, #20]
 80041a8:	ab48      	add	r3, sp, #288	@ 0x120
 80041aa:	441c      	add	r4, r3
 80041ac:	2000      	movs	r0, #0
 80041ae:	2100      	movs	r1, #0
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	da09      	bge.n	80041ca <__kernel_rem_pio2+0x5c2>
 80041b6:	f1b9 0f00 	cmp.w	r9, #0
 80041ba:	d002      	beq.n	80041c2 <__kernel_rem_pio2+0x5ba>
 80041bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80041c0:	4619      	mov	r1, r3
 80041c2:	9b04      	ldr	r3, [sp, #16]
 80041c4:	e9c3 0100 	strd	r0, r1, [r3]
 80041c8:	e78f      	b.n	80040ea <__kernel_rem_pio2+0x4e2>
 80041ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80041ce:	f7fc f809 	bl	80001e4 <__adddf3>
 80041d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80041d6:	e7eb      	b.n	80041b0 <__kernel_rem_pio2+0x5a8>
 80041d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80041dc:	f7fc f802 	bl	80001e4 <__adddf3>
 80041e0:	3c01      	subs	r4, #1
 80041e2:	e7c1      	b.n	8004168 <__kernel_rem_pio2+0x560>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	e7c6      	b.n	8004178 <__kernel_rem_pio2+0x570>
 80041ea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80041ee:	f7fb fff9 	bl	80001e4 <__adddf3>
 80041f2:	3401      	adds	r4, #1
 80041f4:	e7cb      	b.n	800418e <__kernel_rem_pio2+0x586>
 80041f6:	ed95 7b00 	vldr	d7, [r5]
 80041fa:	ed8d 7b00 	vstr	d7, [sp]
 80041fe:	ed95 7b02 	vldr	d7, [r5, #8]
 8004202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004206:	ec53 2b17 	vmov	r2, r3, d7
 800420a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800420e:	f7fb ffe9 	bl	80001e4 <__adddf3>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4606      	mov	r6, r0
 8004218:	460f      	mov	r7, r1
 800421a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800421e:	f7fb ffdf 	bl	80001e0 <__aeabi_dsub>
 8004222:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004226:	f7fb ffdd 	bl	80001e4 <__adddf3>
 800422a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800422e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004232:	e9c5 6700 	strd	r6, r7, [r5]
 8004236:	e76d      	b.n	8004114 <__kernel_rem_pio2+0x50c>
 8004238:	ed94 7b00 	vldr	d7, [r4]
 800423c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004240:	ec51 0b17 	vmov	r0, r1, d7
 8004244:	4652      	mov	r2, sl
 8004246:	465b      	mov	r3, fp
 8004248:	ed8d 7b00 	vstr	d7, [sp]
 800424c:	f7fb ffca 	bl	80001e4 <__adddf3>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800425c:	f7fb ffc0 	bl	80001e0 <__aeabi_dsub>
 8004260:	4652      	mov	r2, sl
 8004262:	465b      	mov	r3, fp
 8004264:	f7fb ffbe 	bl	80001e4 <__adddf3>
 8004268:	3d01      	subs	r5, #1
 800426a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800426e:	e9c4 6700 	strd	r6, r7, [r4]
 8004272:	e755      	b.n	8004120 <__kernel_rem_pio2+0x518>
 8004274:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004278:	f7fb ffb4 	bl	80001e4 <__adddf3>
 800427c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004280:	e758      	b.n	8004134 <__kernel_rem_pio2+0x52c>
 8004282:	bf00      	nop
 8004284:	f3af 8000 	nop.w
	...
 8004290:	41700000 	.word	0x41700000
 8004294:	3e700000 	.word	0x3e700000
 8004298:	9b04      	ldr	r3, [sp, #16]
 800429a:	9a04      	ldr	r2, [sp, #16]
 800429c:	601f      	str	r7, [r3, #0]
 800429e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80042a2:	605c      	str	r4, [r3, #4]
 80042a4:	609d      	str	r5, [r3, #8]
 80042a6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80042aa:	60d3      	str	r3, [r2, #12]
 80042ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042b0:	6110      	str	r0, [r2, #16]
 80042b2:	6153      	str	r3, [r2, #20]
 80042b4:	e719      	b.n	80040ea <__kernel_rem_pio2+0x4e2>
 80042b6:	bf00      	nop

080042b8 <scalbn>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	ec55 4b10 	vmov	r4, r5, d0
 80042be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80042c2:	4606      	mov	r6, r0
 80042c4:	462b      	mov	r3, r5
 80042c6:	b991      	cbnz	r1, 80042ee <scalbn+0x36>
 80042c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80042cc:	4323      	orrs	r3, r4
 80042ce:	d03d      	beq.n	800434c <scalbn+0x94>
 80042d0:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <scalbn+0xf0>)
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	2200      	movs	r2, #0
 80042d8:	f7fc f93a 	bl	8000550 <__aeabi_dmul>
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <scalbn+0xf4>)
 80042de:	429e      	cmp	r6, r3
 80042e0:	4604      	mov	r4, r0
 80042e2:	460d      	mov	r5, r1
 80042e4:	da0f      	bge.n	8004306 <scalbn+0x4e>
 80042e6:	a328      	add	r3, pc, #160	@ (adr r3, 8004388 <scalbn+0xd0>)
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	e01e      	b.n	800432c <scalbn+0x74>
 80042ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80042f2:	4291      	cmp	r1, r2
 80042f4:	d10b      	bne.n	800430e <scalbn+0x56>
 80042f6:	4622      	mov	r2, r4
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ff72 	bl	80001e4 <__adddf3>
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	e022      	b.n	800434c <scalbn+0x94>
 8004306:	460b      	mov	r3, r1
 8004308:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800430c:	3936      	subs	r1, #54	@ 0x36
 800430e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004312:	4296      	cmp	r6, r2
 8004314:	dd0d      	ble.n	8004332 <scalbn+0x7a>
 8004316:	2d00      	cmp	r5, #0
 8004318:	a11d      	add	r1, pc, #116	@ (adr r1, 8004390 <scalbn+0xd8>)
 800431a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800431e:	da02      	bge.n	8004326 <scalbn+0x6e>
 8004320:	a11d      	add	r1, pc, #116	@ (adr r1, 8004398 <scalbn+0xe0>)
 8004322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004326:	a31a      	add	r3, pc, #104	@ (adr r3, 8004390 <scalbn+0xd8>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc f910 	bl	8000550 <__aeabi_dmul>
 8004330:	e7e6      	b.n	8004300 <scalbn+0x48>
 8004332:	1872      	adds	r2, r6, r1
 8004334:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004338:	428a      	cmp	r2, r1
 800433a:	dcec      	bgt.n	8004316 <scalbn+0x5e>
 800433c:	2a00      	cmp	r2, #0
 800433e:	dd08      	ble.n	8004352 <scalbn+0x9a>
 8004340:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004344:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004348:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800434c:	ec45 4b10 	vmov	d0, r4, r5
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004356:	da08      	bge.n	800436a <scalbn+0xb2>
 8004358:	2d00      	cmp	r5, #0
 800435a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004388 <scalbn+0xd0>)
 800435c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004360:	dac1      	bge.n	80042e6 <scalbn+0x2e>
 8004362:	a10f      	add	r1, pc, #60	@ (adr r1, 80043a0 <scalbn+0xe8>)
 8004364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004368:	e7bd      	b.n	80042e6 <scalbn+0x2e>
 800436a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800436e:	3236      	adds	r2, #54	@ 0x36
 8004370:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004378:	4620      	mov	r0, r4
 800437a:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <scalbn+0xf8>)
 800437c:	4629      	mov	r1, r5
 800437e:	2200      	movs	r2, #0
 8004380:	e7d4      	b.n	800432c <scalbn+0x74>
 8004382:	bf00      	nop
 8004384:	f3af 8000 	nop.w
 8004388:	c2f8f359 	.word	0xc2f8f359
 800438c:	01a56e1f 	.word	0x01a56e1f
 8004390:	8800759c 	.word	0x8800759c
 8004394:	7e37e43c 	.word	0x7e37e43c
 8004398:	8800759c 	.word	0x8800759c
 800439c:	fe37e43c 	.word	0xfe37e43c
 80043a0:	c2f8f359 	.word	0xc2f8f359
 80043a4:	81a56e1f 	.word	0x81a56e1f
 80043a8:	43500000 	.word	0x43500000
 80043ac:	ffff3cb0 	.word	0xffff3cb0
 80043b0:	3c900000 	.word	0x3c900000
 80043b4:	00000000 	.word	0x00000000

080043b8 <floor>:
 80043b8:	ec51 0b10 	vmov	r0, r1, d0
 80043bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80043c8:	2e13      	cmp	r6, #19
 80043ca:	460c      	mov	r4, r1
 80043cc:	4605      	mov	r5, r0
 80043ce:	4680      	mov	r8, r0
 80043d0:	dc34      	bgt.n	800443c <floor+0x84>
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	da17      	bge.n	8004406 <floor+0x4e>
 80043d6:	a332      	add	r3, pc, #200	@ (adr r3, 80044a0 <floor+0xe8>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fb ff02 	bl	80001e4 <__adddf3>
 80043e0:	2200      	movs	r2, #0
 80043e2:	2300      	movs	r3, #0
 80043e4:	f7fc fb44 	bl	8000a70 <__aeabi_dcmpgt>
 80043e8:	b150      	cbz	r0, 8004400 <floor+0x48>
 80043ea:	2c00      	cmp	r4, #0
 80043ec:	da55      	bge.n	800449a <floor+0xe2>
 80043ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80043f2:	432c      	orrs	r4, r5
 80043f4:	2500      	movs	r5, #0
 80043f6:	42ac      	cmp	r4, r5
 80043f8:	4c2b      	ldr	r4, [pc, #172]	@ (80044a8 <floor+0xf0>)
 80043fa:	bf08      	it	eq
 80043fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004400:	4621      	mov	r1, r4
 8004402:	4628      	mov	r0, r5
 8004404:	e023      	b.n	800444e <floor+0x96>
 8004406:	4f29      	ldr	r7, [pc, #164]	@ (80044ac <floor+0xf4>)
 8004408:	4137      	asrs	r7, r6
 800440a:	ea01 0307 	and.w	r3, r1, r7
 800440e:	4303      	orrs	r3, r0
 8004410:	d01d      	beq.n	800444e <floor+0x96>
 8004412:	a323      	add	r3, pc, #140	@ (adr r3, 80044a0 <floor+0xe8>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fb fee4 	bl	80001e4 <__adddf3>
 800441c:	2200      	movs	r2, #0
 800441e:	2300      	movs	r3, #0
 8004420:	f7fc fb26 	bl	8000a70 <__aeabi_dcmpgt>
 8004424:	2800      	cmp	r0, #0
 8004426:	d0eb      	beq.n	8004400 <floor+0x48>
 8004428:	2c00      	cmp	r4, #0
 800442a:	bfbe      	ittt	lt
 800442c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004430:	4133      	asrlt	r3, r6
 8004432:	18e4      	addlt	r4, r4, r3
 8004434:	ea24 0407 	bic.w	r4, r4, r7
 8004438:	2500      	movs	r5, #0
 800443a:	e7e1      	b.n	8004400 <floor+0x48>
 800443c:	2e33      	cmp	r6, #51	@ 0x33
 800443e:	dd0a      	ble.n	8004456 <floor+0x9e>
 8004440:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004444:	d103      	bne.n	800444e <floor+0x96>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	f7fb fecb 	bl	80001e4 <__adddf3>
 800444e:	ec41 0b10 	vmov	d0, r0, r1
 8004452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004456:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800445a:	f04f 37ff 	mov.w	r7, #4294967295
 800445e:	40df      	lsrs	r7, r3
 8004460:	4207      	tst	r7, r0
 8004462:	d0f4      	beq.n	800444e <floor+0x96>
 8004464:	a30e      	add	r3, pc, #56	@ (adr r3, 80044a0 <floor+0xe8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fb febb 	bl	80001e4 <__adddf3>
 800446e:	2200      	movs	r2, #0
 8004470:	2300      	movs	r3, #0
 8004472:	f7fc fafd 	bl	8000a70 <__aeabi_dcmpgt>
 8004476:	2800      	cmp	r0, #0
 8004478:	d0c2      	beq.n	8004400 <floor+0x48>
 800447a:	2c00      	cmp	r4, #0
 800447c:	da0a      	bge.n	8004494 <floor+0xdc>
 800447e:	2e14      	cmp	r6, #20
 8004480:	d101      	bne.n	8004486 <floor+0xce>
 8004482:	3401      	adds	r4, #1
 8004484:	e006      	b.n	8004494 <floor+0xdc>
 8004486:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800448a:	2301      	movs	r3, #1
 800448c:	40b3      	lsls	r3, r6
 800448e:	441d      	add	r5, r3
 8004490:	4545      	cmp	r5, r8
 8004492:	d3f6      	bcc.n	8004482 <floor+0xca>
 8004494:	ea25 0507 	bic.w	r5, r5, r7
 8004498:	e7b2      	b.n	8004400 <floor+0x48>
 800449a:	2500      	movs	r5, #0
 800449c:	462c      	mov	r4, r5
 800449e:	e7af      	b.n	8004400 <floor+0x48>
 80044a0:	8800759c 	.word	0x8800759c
 80044a4:	7e37e43c 	.word	0x7e37e43c
 80044a8:	bff00000 	.word	0xbff00000
 80044ac:	000fffff 	.word	0x000fffff

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
